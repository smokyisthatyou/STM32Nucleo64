
customizeOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f30  08004f30  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b0  2000006c  08004fa4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000421c  08004fa4  0002421c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b83  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a60  00000000  00000000  00030c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  000336c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c55  00000000  00000000  000346a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242d4  00000000  00000000  000352fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001361d  00000000  00000000  000595d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8c8  00000000  00000000  0006cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004924  00000000  00000000  001474b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e00 	.word	0x08004e00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004e00 	.word	0x08004e00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000600:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	e000      	b.n	800060c <ITM_SendChar+0x2c>
    {
      __NOP();
 800060a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_write>:

void convertTicksToTime(TickType_t ticks, unsigned int *seconds, unsigned int *milliseconds);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	int i = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffc7 	bl	80005e0 <ITM_SendChar>
	for(i=0;i<len;i++){
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x16>
	}
	return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fc25 	bl	8000ec0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f837 	bl	80006e8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f8cd 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067e:	f000 f8a1 	bl	80007c4 <MX_USART2_UART_Init>

  /* definition and creation of Tasks */
  xTaskCreate(StartTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000682:	2300      	movs	r3, #0
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2303      	movs	r3, #3
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	490f      	ldr	r1, [pc, #60]	; (80006cc <main+0x60>)
 8000690:	480f      	ldr	r0, [pc, #60]	; (80006d0 <main+0x64>)
 8000692:	f002 fb78 	bl	8002d86 <xTaskCreate>
  xTaskCreate(StartTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	490c      	ldr	r1, [pc, #48]	; (80006d4 <main+0x68>)
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <main+0x6c>)
 80006a6:	f002 fb6e 	bl	8002d86 <xTaskCreate>
  xTaskCreate(StartTask3, "Task3", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80006aa:	2300      	movs	r3, #0
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <main+0x70>)
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <main+0x74>)
 80006ba:	f002 fb64 	bl	8002d86 <xTaskCreate>

  /* Start scheduler */
  printf(" Start scheduling... \n");
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0x78>)
 80006c0:	f003 fd34 	bl	800412c <puts>
  vTaskStartScheduler();
 80006c4:	f002 fcdc 	bl	8003080 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    osErrorOS;
 80006c8:	e7fe      	b.n	80006c8 <main+0x5c>
 80006ca:	bf00      	nop
 80006cc:	08004e18 	.word	0x08004e18
 80006d0:	0800094d 	.word	0x0800094d
 80006d4:	08004e20 	.word	0x08004e20
 80006d8:	080009dd 	.word	0x080009dd
 80006dc:	08004e28 	.word	0x08004e28
 80006e0:	08000a6d 	.word	0x08000a6d
 80006e4:	08004e30 	.word	0x08004e30

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fdf8 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <SystemClock_Config+0xd4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a29      	ldr	r2, [pc, #164]	; (80007bc <SystemClock_Config+0xd4>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SystemClock_Config+0xd8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SystemClock_Config+0xd8>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800075c:	2310      	movs	r3, #16
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000760:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000764:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000766:	2304      	movs	r3, #4
 8000768:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f9f0 	bl	8001b5c <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000782:	f000 f9cd 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fe5e 	bl	8001464 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ae:	f000 f9b7 	bl	8000b20 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 feee 	bl	80025dc <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f98b 	bl	8000b20 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200002dc 	.word	0x200002dc
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a1e      	ldr	r2, [pc, #120]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <MX_GPIO_Init+0xd0>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_GPIO_Init+0xd4>)
 80008a4:	f000 fdc4 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_GPIO_Init+0xd8>)
 80008c0:	f000 fc22 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0xd4>)
 80008dc:	f000 fc14 	bl	8001108 <HAL_GPIO_Init>
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800

080008f4 <convertTicksToTime>:


/* function to convert tick in time */
void convertTicksToTime(TickType_t ticks, unsigned int *seconds, unsigned int *milliseconds) {
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    //total time in milliseconds
    uint32_t totalMilliseconds = (ticks * 1000) / TICKS_PER_SECOND;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <convertTicksToTime+0x54>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	099b      	lsrs	r3, r3, #6
 8000912:	617b      	str	r3, [r7, #20]
    //seconds and milliseconds
    *seconds = totalMilliseconds / 1000;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <convertTicksToTime+0x54>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	099a      	lsrs	r2, r3, #6
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	601a      	str	r2, [r3, #0]
    *milliseconds = totalMilliseconds % 1000;
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <convertTicksToTime+0x54>)
 8000926:	fba3 1302 	umull	r1, r3, r3, r2
 800092a:	099b      	lsrs	r3, r3, #6
 800092c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000930:	fb01 f303 	mul.w	r3, r1, r3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	10624dd3 	.word	0x10624dd3

0800094c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	TickType_t xLastRestTime;
	for(;;)
	{
		/*Initialize xLastWakeTime with the current ticks number */
		xLastWakeTime = xTaskGetTickCount();
 8000954:	f002 fc90 	bl	8003278 <xTaskGetTickCount>
 8000958:	6138      	str	r0, [r7, #16]
		convertTicksToTime(xLastWakeTime, &seconds, &milliseconds);
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <StartTask1+0x7c>)
 800095c:	491b      	ldr	r1, [pc, #108]	; (80009cc <StartTask1+0x80>)
 800095e:	6938      	ldr	r0, [r7, #16]
 8000960:	f7ff ffc8 	bl	80008f4 <convertTicksToTime>

		printf(" Start Task 1... ");
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <StartTask1+0x84>)
 8000966:	f003 fb7b 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <StartTask1+0x80>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <StartTask1+0x7c>)
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	4619      	mov	r1, r3
 8000974:	4817      	ldr	r0, [pc, #92]	; (80009d4 <StartTask1+0x88>)
 8000976:	f003 fb73 	bl	8004060 <iprintf>

		const TickType_t xFrequency = pdMS_TO_TICKS(2000); //2000 ms
 800097a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800097e:	60fb      	str	r3, [r7, #12]

		TickType_t time = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 8000984:	e002      	b.n	800098c <StartTask1+0x40>
		{
			/* code to run for 2 seconds */
			time = xTaskGetTickCount();
 8000986:	f002 fc77 	bl	8003278 <xTaskGetTickCount>
 800098a:	6178      	str	r0, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4413      	add	r3, r2
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	429a      	cmp	r2, r3
 8000996:	d1f6      	bne.n	8000986 <StartTask1+0x3a>
		}
		/*Initialize xLastWakeTime with the current ticks number */
		xLastRestTime = time;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	60bb      	str	r3, [r7, #8]
		convertTicksToTime(xLastRestTime, &seconds, &milliseconds);
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <StartTask1+0x7c>)
 800099e:	490b      	ldr	r1, [pc, #44]	; (80009cc <StartTask1+0x80>)
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f7ff ffa7 	bl	80008f4 <convertTicksToTime>
		printf(" End Task 1... ");
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <StartTask1+0x8c>)
 80009a8:	f003 fb5a 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <StartTask1+0x80>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <StartTask1+0x7c>)
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <StartTask1+0x88>)
 80009b8:	f003 fb52 	bl	8004060 <iprintf>
		vTaskDelay(pdMS_TO_TICKS(4000)); //4000 ms
 80009bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009c0:	f002 fb0a 	bl	8002fd8 <vTaskDelay>
	{
 80009c4:	e7c6      	b.n	8000954 <StartTask1+0x8>
 80009c6:	bf00      	nop
 80009c8:	20000328 	.word	0x20000328
 80009cc:	20000324 	.word	0x20000324
 80009d0:	08004e48 	.word	0x08004e48
 80009d4:	08004e5c 	.word	0x08004e5c
 80009d8:	08004e7c 	.word	0x08004e7c

080009dc <StartTask2>:
	}
}

/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	TickType_t xLastRestTime;
	for(;;)
	{
		xLastWakeTime = xTaskGetTickCount();
 80009e4:	f002 fc48 	bl	8003278 <xTaskGetTickCount>
 80009e8:	6138      	str	r0, [r7, #16]
		convertTicksToTime(xLastWakeTime, &seconds, &milliseconds);
 80009ea:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <StartTask2+0x7c>)
 80009ec:	491b      	ldr	r1, [pc, #108]	; (8000a5c <StartTask2+0x80>)
 80009ee:	6938      	ldr	r0, [r7, #16]
 80009f0:	f7ff ff80 	bl	80008f4 <convertTicksToTime>

		printf(" Start Task 2... ");
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <StartTask2+0x84>)
 80009f6:	f003 fb33 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <StartTask2+0x80>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <StartTask2+0x7c>)
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4817      	ldr	r0, [pc, #92]	; (8000a64 <StartTask2+0x88>)
 8000a06:	f003 fb2b 	bl	8004060 <iprintf>

		const TickType_t xFrequency = pdMS_TO_TICKS(1000); // 1000 ms
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	60fb      	str	r3, [r7, #12]

		TickType_t time = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 8000a14:	e002      	b.n	8000a1c <StartTask2+0x40>
		{
			time = xTaskGetTickCount();
 8000a16:	f002 fc2f 	bl	8003278 <xTaskGetTickCount>
 8000a1a:	6178      	str	r0, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d1f6      	bne.n	8000a16 <StartTask2+0x3a>
		}
		xLastRestTime = time;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	60bb      	str	r3, [r7, #8]
		convertTicksToTime(xLastRestTime, &seconds, &milliseconds);
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <StartTask2+0x7c>)
 8000a2e:	490b      	ldr	r1, [pc, #44]	; (8000a5c <StartTask2+0x80>)
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	f7ff ff5f 	bl	80008f4 <convertTicksToTime>
		printf(" End Task 2... ");
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <StartTask2+0x8c>)
 8000a38:	f003 fb12 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <StartTask2+0x80>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <StartTask2+0x7c>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <StartTask2+0x88>)
 8000a48:	f003 fb0a 	bl	8004060 <iprintf>
		vTaskDelay(pdMS_TO_TICKS(2000)); //2000 ms
 8000a4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a50:	f002 fac2 	bl	8002fd8 <vTaskDelay>
	{
 8000a54:	e7c6      	b.n	80009e4 <StartTask2+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000328 	.word	0x20000328
 8000a5c:	20000324 	.word	0x20000324
 8000a60:	08004e8c 	.word	0x08004e8c
 8000a64:	08004e5c 	.word	0x08004e5c
 8000a68:	08004ea0 	.word	0x08004ea0

08000a6c <StartTask3>:
	}
}

/* USER CODE END Header_StartTask3 */
void StartTask3(void const * argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	TickType_t xLastRestTime;
	for(;;)
	{
		xLastWakeTime = xTaskGetTickCount();
 8000a74:	f002 fc00 	bl	8003278 <xTaskGetTickCount>
 8000a78:	6138      	str	r0, [r7, #16]
		convertTicksToTime(xLastWakeTime, &seconds, &milliseconds);
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <StartTask3+0x7c>)
 8000a7c:	491b      	ldr	r1, [pc, #108]	; (8000aec <StartTask3+0x80>)
 8000a7e:	6938      	ldr	r0, [r7, #16]
 8000a80:	f7ff ff38 	bl	80008f4 <convertTicksToTime>
		printf(" Start Task 3... ");
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <StartTask3+0x84>)
 8000a86:	f003 faeb 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <StartTask3+0x80>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <StartTask3+0x7c>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <StartTask3+0x88>)
 8000a96:	f003 fae3 	bl	8004060 <iprintf>
		const TickType_t xFrequency = pdMS_TO_TICKS(500); // 500 ms
 8000a9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a9e:	60fb      	str	r3, [r7, #12]

		TickType_t time = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 8000aa4:	e002      	b.n	8000aac <StartTask3+0x40>
		{
			time = xTaskGetTickCount();
 8000aa6:	f002 fbe7 	bl	8003278 <xTaskGetTickCount>
 8000aaa:	6178      	str	r0, [r7, #20]
		while (time != xLastWakeTime+xFrequency)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d1f6      	bne.n	8000aa6 <StartTask3+0x3a>
		}
		xLastRestTime = time;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	60bb      	str	r3, [r7, #8]
		convertTicksToTime(xLastRestTime, &seconds, &milliseconds);
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <StartTask3+0x7c>)
 8000abe:	490b      	ldr	r1, [pc, #44]	; (8000aec <StartTask3+0x80>)
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff ff17 	bl	80008f4 <convertTicksToTime>
		printf(" End Task 3... ");
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <StartTask3+0x8c>)
 8000ac8:	f003 faca 	bl	8004060 <iprintf>
		printf(" %u seconds, %u milliseconds\n", seconds, milliseconds);
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <StartTask3+0x80>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <StartTask3+0x7c>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <StartTask3+0x88>)
 8000ad8:	f003 fac2 	bl	8004060 <iprintf>
		vTaskDelay(pdMS_TO_TICKS(500)); //500 ms
 8000adc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae0:	f002 fa7a 	bl	8002fd8 <vTaskDelay>
	{
 8000ae4:	e7c6      	b.n	8000a74 <StartTask3+0x8>
 8000ae6:	bf00      	nop
 8000ae8:	20000328 	.word	0x20000328
 8000aec:	20000324 	.word	0x20000324
 8000af0:	08004eb0 	.word	0x08004eb0
 8000af4:	08004e5c 	.word	0x08004e5c
 8000af8:	08004ec4 	.word	0x08004ec4

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f000 f9f9 	bl	8000f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40010000 	.word	0x40010000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  osErrorOS;
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x54>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_MspInit+0x54>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_MspInit+0x54>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_MspInit+0x54>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	f06f 0001 	mvn.w	r0, #1
 8000b72:	f000 fa9f 	bl	80010b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000bfa:	f000 fa85 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <HAL_InitTick+0xd0>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <HAL_InitTick+0xd0>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <HAL_InitTick+0xd0>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c40:	f107 020c 	add.w	r2, r7, #12
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fd24 	bl	8001698 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c50:	f000 fd0e 	bl	8001670 <HAL_RCC_GetPCLK2Freq>
 8000c54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <HAL_InitTick+0xd4>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9b      	lsrs	r3, r3, #18
 8000c60:	3b01      	subs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_InitTick+0xd8>)
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_InitTick+0xdc>)
 8000c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_InitTick+0xd8>)
 8000c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c72:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <HAL_InitTick+0xd8>)
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_InitTick+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_InitTick+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_InitTick+0xd8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <HAL_InitTick+0xd8>)
 8000c8c:	f001 fa04 	bl	8002098 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d11b      	bne.n	8000cd6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c9e:	4813      	ldr	r0, [pc, #76]	; (8000cec <HAL_InitTick+0xd8>)
 8000ca0:	f001 fa54 	bl	800214c <HAL_TIM_Base_Start_IT>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d111      	bne.n	8000cd6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cb2:	2019      	movs	r0, #25
 8000cb4:	f000 fa1a 	bl	80010ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d808      	bhi.n	8000cd0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	2019      	movs	r0, #25
 8000cc4:	f000 f9f6 	bl	80010b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0xe0>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e002      	b.n	8000cd6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	2000032c 	.word	0x2000032c
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d2a:	f001 fa7f 	bl	800222c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000032c 	.word	0x2000032c

08000d38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e00a      	b.n	8000d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4a:	f3af 8000 	nop.w
 8000d4e:	4601      	mov	r1, r0
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf0      	blt.n	8000d4a <_read+0x12>
  }

  return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fabc 	bl	8004388 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000374 	.word	0x20000374
 8000e44:	20004220 	.word	0x20004220

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 fa7b 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fbe5 	bl	800066c <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000eb0:	08004f38 	.word	0x08004f38
  ldr r2, =_sbss
 8000eb4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000eb8:	2000421c 	.word	0x2000421c

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f8d8 	bl	800109e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f7ff fe90 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe1a 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000378 	.word	0x20000378

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000378 	.word	0x20000378

08000f44 <__NVIC_SetPriorityGrouping>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff4c 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c6:	f7ff ff61 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6978      	ldr	r0, [r7, #20]
 80010d2:	f7ff ffb1 	bl	8001038 <NVIC_EncodePriority>
 80010d6:	4602      	mov	r2, r0
 80010d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff80 	bl	8000fe4 <__NVIC_SetPriority>
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff54 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e165      	b.n	80013f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8154 	bne.w	80013ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80ae 	beq.w	80013ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <HAL_GPIO_Init+0x300>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_GPIO_Init+0x304>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x308>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_GPIO_Init+0x30c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x216>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x310>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x212>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x20e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x20a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x206>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <HAL_GPIO_Init+0x320>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x202>
 8001306:	2306      	movs	r3, #6
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800130a:	2307      	movs	r3, #7
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x21c>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x304>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_GPIO_Init+0x324>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_GPIO_Init+0x324>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x324>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_GPIO_Init+0x324>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_GPIO_Init+0x324>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_GPIO_Init+0x324>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_GPIO_Init+0x324>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_GPIO_Init+0x324>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae96 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0cc      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90c      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b65      	ldr	r3, [pc, #404]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b8      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	494d      	ldr	r1, [pc, #308]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d044      	beq.n	8001584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d119      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d003      	beq.n	8001522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	2b03      	cmp	r3, #3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e067      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b37      	ldr	r3, [pc, #220]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4934      	ldr	r1, [pc, #208]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff fcea 	bl	8000f2c <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff fce6 	bl	8000f2c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e04f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d20c      	bcs.n	80015ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e032      	b.n	8001612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4916      	ldr	r1, [pc, #88]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 f887 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fb02 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00
 8001620:	40023800 	.word	0x40023800
 8001624:	08004edc 	.word	0x08004edc
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_GetHCLKFreq+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800164c:	f7ff fff0 	bl	8001630 <HAL_RCC_GetHCLKFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	4903      	ldr	r1, [pc, #12]	; (800166c <HAL_RCC_GetPCLK1Freq+0x24>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	08004eec 	.word	0x08004eec

08001670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001674:	f7ff ffdc 	bl	8001630 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	0b5b      	lsrs	r3, r3, #13
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4903      	ldr	r1, [pc, #12]	; (8001694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800
 8001694:	08004eec 	.word	0x08004eec

08001698 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	220f      	movs	r2, #15
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_GetClockConfig+0x5c>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_RCC_GetClockConfig+0x5c>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_RCC_GetClockConfig+0x5c>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_GetClockConfig+0x5c>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_RCC_GetClockConfig+0x60>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	601a      	str	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001700:	b0ae      	sub	sp, #184	; 0xb8
 8001702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001722:	4bcb      	ldr	r3, [pc, #812]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b0c      	cmp	r3, #12
 800172c:	f200 8206 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x440>
 8001730:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	0800176d 	.word	0x0800176d
 800173c:	08001b3d 	.word	0x08001b3d
 8001740:	08001b3d 	.word	0x08001b3d
 8001744:	08001b3d 	.word	0x08001b3d
 8001748:	08001775 	.word	0x08001775
 800174c:	08001b3d 	.word	0x08001b3d
 8001750:	08001b3d 	.word	0x08001b3d
 8001754:	08001b3d 	.word	0x08001b3d
 8001758:	0800177d 	.word	0x0800177d
 800175c:	08001b3d 	.word	0x08001b3d
 8001760:	08001b3d 	.word	0x08001b3d
 8001764:	08001b3d 	.word	0x08001b3d
 8001768:	0800196d 	.word	0x0800196d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4bb9      	ldr	r3, [pc, #740]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x358>)
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001772:	e1e7      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4bb8      	ldr	r3, [pc, #736]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800177a:	e1e3      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4bb4      	ldr	r3, [pc, #720]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4bb1      	ldr	r3, [pc, #708]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d071      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017ba:	4622      	mov	r2, r4
 80017bc:	462b      	mov	r3, r5
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0159      	lsls	r1, r3, #5
 80017c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017cc:	0150      	lsls	r0, r2, #5
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4621      	mov	r1, r4
 80017d4:	1a51      	subs	r1, r2, r1
 80017d6:	6439      	str	r1, [r7, #64]	; 0x40
 80017d8:	4629      	mov	r1, r5
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017ec:	4649      	mov	r1, r9
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	4641      	mov	r1, r8
 80017f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f6:	4641      	mov	r1, r8
 80017f8:	018a      	lsls	r2, r1, #6
 80017fa:	4641      	mov	r1, r8
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001800:	4649      	mov	r1, r9
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001814:	4649      	mov	r1, r9
 8001816:	00cb      	lsls	r3, r1, #3
 8001818:	4641      	mov	r1, r8
 800181a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800181e:	4641      	mov	r1, r8
 8001820:	00ca      	lsls	r2, r1, #3
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	4603      	mov	r3, r0
 8001828:	4622      	mov	r2, r4
 800182a:	189b      	adds	r3, r3, r2
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
 800182e:	462b      	mov	r3, r5
 8001830:	460a      	mov	r2, r1
 8001832:	eb42 0303 	adc.w	r3, r2, r3
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001844:	4629      	mov	r1, r5
 8001846:	024b      	lsls	r3, r1, #9
 8001848:	4621      	mov	r1, r4
 800184a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800184e:	4621      	mov	r1, r4
 8001850:	024a      	lsls	r2, r1, #9
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800185a:	2200      	movs	r2, #0
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001864:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001868:	f7fe fd22 	bl	80002b0 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001876:	e067      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4b75      	ldr	r3, [pc, #468]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2200      	movs	r2, #0
 8001880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001884:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001890:	67bb      	str	r3, [r7, #120]	; 0x78
 8001892:	2300      	movs	r3, #0
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001896:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800189a:	4622      	mov	r2, r4
 800189c:	462b      	mov	r3, r5
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	0159      	lsls	r1, r3, #5
 80018a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ac:	0150      	lsls	r0, r2, #5
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4621      	mov	r1, r4
 80018b4:	1a51      	subs	r1, r2, r1
 80018b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80018b8:	4629      	mov	r1, r5
 80018ba:	eb63 0301 	sbc.w	r3, r3, r1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018cc:	4649      	mov	r1, r9
 80018ce:	018b      	lsls	r3, r1, #6
 80018d0:	4641      	mov	r1, r8
 80018d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d6:	4641      	mov	r1, r8
 80018d8:	018a      	lsls	r2, r1, #6
 80018da:	4641      	mov	r1, r8
 80018dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80018e0:	4649      	mov	r1, r9
 80018e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018fa:	4692      	mov	sl, r2
 80018fc:	469b      	mov	fp, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	eb1a 0303 	adds.w	r3, sl, r3
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	462b      	mov	r3, r5
 8001908:	eb4b 0303 	adc.w	r3, fp, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800191a:	4629      	mov	r1, r5
 800191c:	028b      	lsls	r3, r1, #10
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001924:	4621      	mov	r1, r4
 8001926:	028a      	lsls	r2, r1, #10
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001930:	2200      	movs	r2, #0
 8001932:	673b      	str	r3, [r7, #112]	; 0x70
 8001934:	677a      	str	r2, [r7, #116]	; 0x74
 8001936:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800193a:	f7fe fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4613      	mov	r3, r2
 8001944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001948:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	3301      	adds	r3, #1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800195a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800195e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800196a:	e0eb      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d06b      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	2200      	movs	r2, #0
 800198c:	66bb      	str	r3, [r7, #104]	; 0x68
 800198e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001996:	663b      	str	r3, [r7, #96]	; 0x60
 8001998:	2300      	movs	r3, #0
 800199a:	667b      	str	r3, [r7, #100]	; 0x64
 800199c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019a0:	4622      	mov	r2, r4
 80019a2:	462b      	mov	r3, r5
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0159      	lsls	r1, r3, #5
 80019ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b2:	0150      	lsls	r0, r2, #5
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4621      	mov	r1, r4
 80019ba:	1a51      	subs	r1, r2, r1
 80019bc:	61b9      	str	r1, [r7, #24]
 80019be:	4629      	mov	r1, r5
 80019c0:	eb63 0301 	sbc.w	r3, r3, r1
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019d2:	4659      	mov	r1, fp
 80019d4:	018b      	lsls	r3, r1, #6
 80019d6:	4651      	mov	r1, sl
 80019d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019dc:	4651      	mov	r1, sl
 80019de:	018a      	lsls	r2, r1, #6
 80019e0:	4651      	mov	r1, sl
 80019e2:	ebb2 0801 	subs.w	r8, r2, r1
 80019e6:	4659      	mov	r1, fp
 80019e8:	eb63 0901 	sbc.w	r9, r3, r1
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a00:	4690      	mov	r8, r2
 8001a02:	4699      	mov	r9, r3
 8001a04:	4623      	mov	r3, r4
 8001a06:	eb18 0303 	adds.w	r3, r8, r3
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	eb49 0303 	adc.w	r3, r9, r3
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a20:	4629      	mov	r1, r5
 8001a22:	024b      	lsls	r3, r1, #9
 8001a24:	4621      	mov	r1, r4
 8001a26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	024a      	lsls	r2, r1, #9
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a36:	2200      	movs	r2, #0
 8001a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a40:	f7fe fc36 	bl	80002b0 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a4e:	e065      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x420>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	4611      	mov	r1, r2
 8001a68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a6e:	2300      	movs	r3, #0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
 8001a72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a76:	4642      	mov	r2, r8
 8001a78:	464b      	mov	r3, r9
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	0159      	lsls	r1, r3, #5
 8001a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a88:	0150      	lsls	r0, r2, #5
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4641      	mov	r1, r8
 8001a90:	1a51      	subs	r1, r2, r1
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	4649      	mov	r1, r9
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	018b      	lsls	r3, r1, #6
 8001aac:	4651      	mov	r1, sl
 8001aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	018a      	lsls	r2, r1, #6
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	1a54      	subs	r4, r2, r1
 8001aba:	4659      	mov	r1, fp
 8001abc:	eb63 0501 	sbc.w	r5, r3, r1
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00eb      	lsls	r3, r5, #3
 8001aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	18e3      	adds	r3, r4, r3
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	464b      	mov	r3, r9
 8001adc:	eb45 0303 	adc.w	r3, r5, r3
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b04:	2200      	movs	r2, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b0e:	f7fe fbcf 	bl	80002b0 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4613      	mov	r3, r2
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0f1b      	lsrs	r3, r3, #28
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b3a:	e003      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	37b8      	adds	r7, #184	; 0xb8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400

08001b5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e28d      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8083 	beq.w	8001c82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b7c:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d019      	beq.n	8001bbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b88:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b94:	4b8e      	ldr	r3, [pc, #568]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x124>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d157      	bne.n	8001c80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e25a      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x90>
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7b      	ldr	r2, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xcc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0xb4>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a72      	ldr	r2, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xcc>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6b      	ldr	r2, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f97c 	bl	8000f2c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f978 	bl	8000f2c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e21f      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xdc>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f968 	bl	8000f2c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f964 	bl	8000f2c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e20b      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x104>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d06f      	beq.n	8001d6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x186>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1d3      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x278>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f911 	bl	8000f2c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f90d 	bl	8000f2c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1b4      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x278>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f8f0 	bl	8000f2c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8ec 	bl	8000f2c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e193      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d036      	beq.n	8001de8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8d0 	bl	8000f2c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8cc 	bl	8000f2c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e173      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x234>
 8001dae:	e01b      	b.n	8001de8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff f8b9 	bl	8000f2c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e00e      	b.n	8001ddc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f8b5 	bl	8000f2c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d907      	bls.n	8001ddc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e15c      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	42470000 	.word	0x42470000
 8001dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ea      	bne.n	8001dbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8097 	beq.w	8001f24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b79      	ldr	r3, [pc, #484]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f875 	bl	8000f2c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff f871 	bl	8000f2c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e118      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x31e>
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e01c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x358>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x340>
 8001e82:	4b61      	ldr	r3, [pc, #388]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a60      	ldr	r2, [pc, #384]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x358>
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a59      	ldr	r2, [pc, #356]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f836 	bl	8000f2c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f832 	bl	8000f2c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0d7      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ee      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x368>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f820 	bl	8000f2c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f81c 	bl	8000f2c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0c1      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ee      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80ad 	beq.w	8002088 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d060      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d145      	bne.n	8001fce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fff0 	bl	8000f2c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe ffec 	bl	8000f2c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e093      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	071b      	lsls	r3, r3, #28
 8001f9a:	491b      	ldr	r1, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ffc1 	bl	8000f2c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe ffbd 	bl	8000f2c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e064      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x452>
 8001fcc:	e05c      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ffaa 	bl	8000f2c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe ffa6 	bl	8000f2c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e04d      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x480>
 8001ffa:	e045      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e040      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000
 8002010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x538>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d030      	beq.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d129      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d122      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800204c:	4293      	cmp	r3, r2
 800204e:	d119      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	3b01      	subs	r3, #1
 800205e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d10f      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e041      	b.n	800212e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f839 	bl	8002136 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 f9c0 	bl	800245c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e04e      	b.n	8002202 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a23      	ldr	r2, [pc, #140]	; (8002210 <HAL_TIM_Base_Start_IT+0xc4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d01d      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_TIM_Base_Start_IT+0xc8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_TIM_Base_Start_IT+0xcc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_TIM_Base_Start_IT+0xd0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_TIM_Base_Start_IT+0xd4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_Base_Start_IT+0xd8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0x80>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_TIM_Base_Start_IT+0xdc>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d010      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ee:	e007      	b.n	8002200 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40001800 	.word	0x40001800

0800222c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d020      	beq.n	8002290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0202 	mvn.w	r2, #2
 8002260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8d2 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8c4 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f8d5 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0204 	mvn.w	r2, #4
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8ac 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f89e 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8af 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f886 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f878 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f889 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01b      	beq.n	8002374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0210 	mvn.w	r2, #16
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2208      	movs	r2, #8
 800234a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f860 	bl	8002420 <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f852 	bl	800240c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f863 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0201 	mvn.w	r2, #1
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fbb2 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f906 	bl	80025c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f834 	bl	8002448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8d8 	bl	80025b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a46      	ldr	r2, [pc, #280]	; (8002588 <TIM_Base_SetConfig+0x12c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d00f      	beq.n	800249c <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a43      	ldr	r2, [pc, #268]	; (800258c <TIM_Base_SetConfig+0x130>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00b      	beq.n	800249c <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a42      	ldr	r2, [pc, #264]	; (8002590 <TIM_Base_SetConfig+0x134>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <TIM_Base_SetConfig+0x138>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <TIM_Base_SetConfig+0x40>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <TIM_Base_SetConfig+0x13c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d108      	bne.n	80024ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a35      	ldr	r2, [pc, #212]	; (8002588 <TIM_Base_SetConfig+0x12c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d027      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a32      	ldr	r2, [pc, #200]	; (800258c <TIM_Base_SetConfig+0x130>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d023      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <TIM_Base_SetConfig+0x134>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a30      	ldr	r2, [pc, #192]	; (8002594 <TIM_Base_SetConfig+0x138>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01b      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <TIM_Base_SetConfig+0x13c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d017      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2e      	ldr	r2, [pc, #184]	; (800259c <TIM_Base_SetConfig+0x140>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2d      	ldr	r2, [pc, #180]	; (80025a0 <TIM_Base_SetConfig+0x144>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00f      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <TIM_Base_SetConfig+0x148>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00b      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <TIM_Base_SetConfig+0x14c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <TIM_Base_SetConfig+0x150>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <TIM_Base_SetConfig+0x154>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d108      	bne.n	8002520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <TIM_Base_SetConfig+0x12c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d003      	beq.n	8002554 <TIM_Base_SetConfig+0xf8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <TIM_Base_SetConfig+0x13c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d103      	bne.n	800255c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f023 0201 	bic.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
  }
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40010000 	.word	0x40010000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40010400 	.word	0x40010400
 800259c:	40014000 	.word	0x40014000
 80025a0:	40014400 	.word	0x40014400
 80025a4:	40014800 	.word	0x40014800
 80025a8:	40001800 	.word	0x40001800
 80025ac:	40001c00 	.word	0x40001c00
 80025b0:	40002000 	.word	0x40002000

080025b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e042      	b.n	8002674 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fabe 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f82b 	bl	800267c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800267c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002680:	b0c0      	sub	sp, #256	; 0x100
 8002682:	af00      	add	r7, sp, #0
 8002684:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	ea40 0301 	orr.w	r3, r0, r1
 80026a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026d4:	f021 010c 	bic.w	r1, r1, #12
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026e2:	430b      	orrs	r3, r1
 80026e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f6:	6999      	ldr	r1, [r3, #24]
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	ea40 0301 	orr.w	r3, r0, r1
 8002702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <UART_SetConfig+0x2cc>)
 800270c:	429a      	cmp	r2, r3
 800270e:	d005      	beq.n	800271c <UART_SetConfig+0xa0>
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b8d      	ldr	r3, [pc, #564]	; (800294c <UART_SetConfig+0x2d0>)
 8002718:	429a      	cmp	r2, r3
 800271a:	d104      	bne.n	8002726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800271c:	f7fe ffa8 	bl	8001670 <HAL_RCC_GetPCLK2Freq>
 8002720:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002724:	e003      	b.n	800272e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002726:	f7fe ff8f 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 800272a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	f040 810c 	bne.w	8002954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800273c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002746:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800274a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	1891      	adds	r1, r2, r2
 8002754:	65b9      	str	r1, [r7, #88]	; 0x58
 8002756:	415b      	adcs	r3, r3
 8002758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800275a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800275e:	4621      	mov	r1, r4
 8002760:	eb12 0801 	adds.w	r8, r2, r1
 8002764:	4629      	mov	r1, r5
 8002766:	eb43 0901 	adc.w	r9, r3, r1
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
 8002782:	4623      	mov	r3, r4
 8002784:	eb18 0303 	adds.w	r3, r8, r3
 8002788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800278c:	462b      	mov	r3, r5
 800278e:	eb49 0303 	adc.w	r3, r9, r3
 8002792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027aa:	460b      	mov	r3, r1
 80027ac:	18db      	adds	r3, r3, r3
 80027ae:	653b      	str	r3, [r7, #80]	; 0x50
 80027b0:	4613      	mov	r3, r2
 80027b2:	eb42 0303 	adc.w	r3, r2, r3
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
 80027b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027c0:	f7fd fd76 	bl	80002b0 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4b61      	ldr	r3, [pc, #388]	; (8002950 <UART_SetConfig+0x2d4>)
 80027ca:	fba3 2302 	umull	r2, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	011c      	lsls	r4, r3, #4
 80027d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	1891      	adds	r1, r2, r2
 80027ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80027ec:	415b      	adcs	r3, r3
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027f4:	4641      	mov	r1, r8
 80027f6:	eb12 0a01 	adds.w	sl, r2, r1
 80027fa:	4649      	mov	r1, r9
 80027fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800280c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002814:	4692      	mov	sl, r2
 8002816:	469b      	mov	fp, r3
 8002818:	4643      	mov	r3, r8
 800281a:	eb1a 0303 	adds.w	r3, sl, r3
 800281e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002822:	464b      	mov	r3, r9
 8002824:	eb4b 0303 	adc.w	r3, fp, r3
 8002828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002838:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800283c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002840:	460b      	mov	r3, r1
 8002842:	18db      	adds	r3, r3, r3
 8002844:	643b      	str	r3, [r7, #64]	; 0x40
 8002846:	4613      	mov	r3, r2
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002856:	f7fd fd2b 	bl	80002b0 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4611      	mov	r1, r2
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <UART_SetConfig+0x2d4>)
 8002862:	fba3 2301 	umull	r2, r3, r3, r1
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2264      	movs	r2, #100	; 0x64
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <UART_SetConfig+0x2d4>)
 8002878:	fba3 2302 	umull	r2, r3, r3, r2
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002884:	441c      	add	r4, r3
 8002886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002890:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002898:	4642      	mov	r2, r8
 800289a:	464b      	mov	r3, r9
 800289c:	1891      	adds	r1, r2, r2
 800289e:	63b9      	str	r1, [r7, #56]	; 0x38
 80028a0:	415b      	adcs	r3, r3
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028a8:	4641      	mov	r1, r8
 80028aa:	1851      	adds	r1, r2, r1
 80028ac:	6339      	str	r1, [r7, #48]	; 0x30
 80028ae:	4649      	mov	r1, r9
 80028b0:	414b      	adcs	r3, r1
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028c0:	4659      	mov	r1, fp
 80028c2:	00cb      	lsls	r3, r1, #3
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ca:	4651      	mov	r1, sl
 80028cc:	00ca      	lsls	r2, r1, #3
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	4642      	mov	r2, r8
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028dc:	464b      	mov	r3, r9
 80028de:	460a      	mov	r2, r1
 80028e0:	eb42 0303 	adc.w	r3, r2, r3
 80028e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028fc:	460b      	mov	r3, r1
 80028fe:	18db      	adds	r3, r3, r3
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
 8002902:	4613      	mov	r3, r2
 8002904:	eb42 0303 	adc.w	r3, r2, r3
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800290e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002912:	f7fd fccd 	bl	80002b0 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <UART_SetConfig+0x2d4>)
 800291c:	fba3 1302 	umull	r1, r3, r3, r2
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	2164      	movs	r1, #100	; 0x64
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3332      	adds	r3, #50	; 0x32
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <UART_SetConfig+0x2d4>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	f003 0207 	and.w	r2, r3, #7
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4422      	add	r2, r4
 8002942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002944:	e106      	b.n	8002b54 <UART_SetConfig+0x4d8>
 8002946:	bf00      	nop
 8002948:	40011000 	.word	0x40011000
 800294c:	40011400 	.word	0x40011400
 8002950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800295e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002966:	4642      	mov	r2, r8
 8002968:	464b      	mov	r3, r9
 800296a:	1891      	adds	r1, r2, r2
 800296c:	6239      	str	r1, [r7, #32]
 800296e:	415b      	adcs	r3, r3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002976:	4641      	mov	r1, r8
 8002978:	1854      	adds	r4, r2, r1
 800297a:	4649      	mov	r1, r9
 800297c:	eb43 0501 	adc.w	r5, r3, r1
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	00eb      	lsls	r3, r5, #3
 800298a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	4643      	mov	r3, r8
 8002996:	18e3      	adds	r3, r4, r3
 8002998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800299c:	464b      	mov	r3, r9
 800299e:	eb45 0303 	adc.w	r3, r5, r3
 80029a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029c2:	4629      	mov	r1, r5
 80029c4:	008b      	lsls	r3, r1, #2
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029cc:	4621      	mov	r1, r4
 80029ce:	008a      	lsls	r2, r1, #2
 80029d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029d4:	f7fd fc6c 	bl	80002b0 <__aeabi_uldivmod>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4b60      	ldr	r3, [pc, #384]	; (8002b60 <UART_SetConfig+0x4e4>)
 80029de:	fba3 2302 	umull	r2, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	011c      	lsls	r4, r3, #4
 80029e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	1891      	adds	r1, r2, r2
 80029fe:	61b9      	str	r1, [r7, #24]
 8002a00:	415b      	adcs	r3, r3
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a08:	4641      	mov	r1, r8
 8002a0a:	1851      	adds	r1, r2, r1
 8002a0c:	6139      	str	r1, [r7, #16]
 8002a0e:	4649      	mov	r1, r9
 8002a10:	414b      	adcs	r3, r1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a20:	4659      	mov	r1, fp
 8002a22:	00cb      	lsls	r3, r1, #3
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	00ca      	lsls	r2, r1, #3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	4642      	mov	r2, r8
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	460a      	mov	r2, r1
 8002a40:	eb42 0303 	adc.w	r3, r2, r3
 8002a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a60:	4649      	mov	r1, r9
 8002a62:	008b      	lsls	r3, r1, #2
 8002a64:	4641      	mov	r1, r8
 8002a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	008a      	lsls	r2, r1, #2
 8002a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a72:	f7fd fc1d 	bl	80002b0 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <UART_SetConfig+0x4e4>)
 8002a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2264      	movs	r2, #100	; 0x64
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	1acb      	subs	r3, r1, r3
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <UART_SetConfig+0x4e4>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9c:	441c      	add	r4, r3
 8002a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa6:	677a      	str	r2, [r7, #116]	; 0x74
 8002aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	1891      	adds	r1, r2, r2
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	415b      	adcs	r3, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002abc:	4641      	mov	r1, r8
 8002abe:	1851      	adds	r1, r2, r1
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	414b      	adcs	r3, r1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	00cb      	lsls	r3, r1, #3
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ade:	4651      	mov	r1, sl
 8002ae0:	00ca      	lsls	r2, r1, #3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4642      	mov	r2, r8
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aee:	464b      	mov	r3, r9
 8002af0:	460a      	mov	r2, r1
 8002af2:	eb42 0303 	adc.w	r3, r2, r3
 8002af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	663b      	str	r3, [r7, #96]	; 0x60
 8002b02:	667a      	str	r2, [r7, #100]	; 0x64
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b10:	4649      	mov	r1, r9
 8002b12:	008b      	lsls	r3, r1, #2
 8002b14:	4641      	mov	r1, r8
 8002b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	008a      	lsls	r2, r1, #2
 8002b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b22:	f7fd fbc5 	bl	80002b0 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <UART_SetConfig+0x4e4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	; 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <UART_SetConfig+0x4e4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 020f 	and.w	r2, r3, #15
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4422      	add	r2, r4
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	bf00      	nop
 8002b56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b60:	51eb851f 	.word	0x51eb851f

08002b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f103 0208 	add.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f103 0208 	add.w	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0208 	add.w	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d103      	bne.n	8002c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e00c      	b.n	8002c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3308      	adds	r3, #8
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e002      	b.n	8002c34 <vListInsert+0x2e>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d2f6      	bcs.n	8002c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6892      	ldr	r2, [r2, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6852      	ldr	r2, [r2, #4]
 8002c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d103      	bne.n	8002cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d12:	2354      	movs	r3, #84	; 0x54
 8002d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b54      	cmp	r3, #84	; 0x54
 8002d1a:	d00a      	beq.n	8002d32 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01e      	beq.n	8002d78 <xTaskCreateStatic+0xac>
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d52:	2300      	movs	r3, #0
 8002d54:	9303      	str	r3, [sp, #12]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f850 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d72:	f000 f8d5 	bl	8002f20 <prvAddNewTaskToReadyList>
 8002d76:	e001      	b.n	8002d7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d7c:	697b      	ldr	r3, [r7, #20]
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08c      	sub	sp, #48	; 0x30
 8002d8a:	af04      	add	r7, sp, #16
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 feb4 	bl	8003b08 <pvPortMalloc>
 8002da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002da8:	2054      	movs	r0, #84	; 0x54
 8002daa:	f000 fead 	bl	8003b08 <pvPortMalloc>
 8002dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbc:	e005      	b.n	8002dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f000 ff6e 	bl	8003ca0 <vPortFree>
 8002dc4:	e001      	b.n	8002dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9303      	str	r3, [sp, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	9302      	str	r3, [sp, #8]
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f80e 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df4:	69f8      	ldr	r0, [r7, #28]
 8002df6:	f000 f893 	bl	8002f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e002      	b.n	8002e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e06:	69bb      	ldr	r3, [r7, #24]
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	617b      	str	r3, [r7, #20]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01f      	beq.n	8002e9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e012      	b.n	8002e8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	7819      	ldrb	r1, [r3, #0]
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	3334      	adds	r3, #52	; 0x34
 8002e74:	460a      	mov	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d9e9      	bls.n	8002e64 <prvInitialiseNewTask+0x54>
 8002e90:	e000      	b.n	8002e94 <prvInitialiseNewTask+0x84>
			{
				break;
 8002e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e9c:	e003      	b.n	8002ea6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d901      	bls.n	8002eb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eac:	2306      	movs	r3, #6
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fe6c 	bl	8002ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	3318      	adds	r3, #24
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fe67 	bl	8002ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	f1c3 0207 	rsb	r2, r3, #7
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	69b8      	ldr	r0, [r7, #24]
 8002f00:	f000 fbf2 	bl	80036e8 <pxPortInitialiseStack>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f16:	bf00      	nop
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f28:	f000 fd0c 	bl	8003944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <prvAddNewTaskToReadyList+0xa0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <prvAddNewTaskToReadyList+0xa0>)
 8002f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <prvAddNewTaskToReadyList+0xa4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <prvAddNewTaskToReadyList+0xa4>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <prvAddNewTaskToReadyList+0xa0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d110      	bne.n	8002f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f4c:	f000 faa8 	bl	80034a0 <prvInitialiseTaskLists>
 8002f50:	e00d      	b.n	8002f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <prvAddNewTaskToReadyList+0xa8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <prvAddNewTaskToReadyList+0xa4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d802      	bhi.n	8002f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f68:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <prvAddNewTaskToReadyList+0xa4>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <prvAddNewTaskToReadyList+0xac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <prvAddNewTaskToReadyList+0xac>)
 8002f76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <prvAddNewTaskToReadyList+0xb0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <prvAddNewTaskToReadyList+0xb0>)
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <prvAddNewTaskToReadyList+0xb4>)
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7ff fe0c 	bl	8002bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fa6:	f000 fcfd 	bl	80039a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <prvAddNewTaskToReadyList+0xa8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <prvAddNewTaskToReadyList+0xa4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000047c 	.word	0x2000047c
 8002fc4:	2000037c 	.word	0x2000037c
 8002fc8:	20000488 	.word	0x20000488
 8002fcc:	20000498 	.word	0x20000498
 8002fd0:	20000484 	.word	0x20000484
 8002fd4:	20000380 	.word	0x20000380

08002fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
		BaseType_t xAlreadyYielded = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]

		/******************** here starts the modification *********************************/

		TickType_t xCurrentTime = xTaskGetTickCount(); //current time
 8002fe4:	f000 f948 	bl	8003278 <xTaskGetTickCount>
 8002fe8:	61b8      	str	r0, [r7, #24]
		TickType_t xCurrentTaskUnblockTime;
		TCB_t *pxTCB;

		//Initial control: two tasks in the block list
	    if (listCURRENT_LIST_LENGTH(pxDelayedTaskList) >= 2)
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <vTaskDelay+0x98>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d911      	bls.n	8003018 <vTaskDelay+0x40>
	    {
	        //get the first element of the list
	        ( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <vTaskDelay+0x98>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	617b      	str	r3, [r7, #20]

	        //get the remaining ticks of the delay time of the first element of the block list
	        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <vTaskDelay+0x9c>)
 8003004:	6013      	str	r3, [r2, #0]

	        xCurrentTaskUnblockTime = xCurrentTime + xTicksToDelay;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
	        //compare the delay ticks of the current task with the delay ticks of the first element
	        if(xCurrentTaskUnblockTime <= xNextTaskUnblockTime)
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <vTaskDelay+0x9c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d926      	bls.n	8003066 <vTaskDelay+0x8e>
	    }

	/******************** here ends the modification ***********************************************/

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <vTaskDelay+0x76>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <vTaskDelay+0xa0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <vTaskDelay+0x64>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60fb      	str	r3, [r7, #12]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <vTaskDelay+0x62>
			vTaskSuspendAll();
 800303c:	f000 f880 	bl	8003140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003040:	2100      	movs	r1, #0
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 faea 	bl	800361c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003048:	f000 f888 	bl	800315c <xTaskResumeAll>
 800304c:	61f8      	str	r0, [r7, #28]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <vTaskDelay+0x90>
		{
			portYIELD_WITHIN_API();
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <vTaskDelay+0xa4>)
 8003056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	e000      	b.n	8003068 <vTaskDelay+0x90>
	        	return;
 8003066:	bf00      	nop
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000434 	.word	0x20000434
 8003074:	2000049c 	.word	0x2000049c
 8003078:	200004a4 	.word	0x200004a4
 800307c:	e000ed04 	.word	0xe000ed04

08003080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800308e:	463a      	mov	r2, r7
 8003090:	1d39      	adds	r1, r7, #4
 8003092:	f107 0308 	add.w	r3, r7, #8
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa88 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	9202      	str	r2, [sp, #8]
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	460a      	mov	r2, r1
 80030ae:	491e      	ldr	r1, [pc, #120]	; (8003128 <vTaskStartScheduler+0xa8>)
 80030b0:	481e      	ldr	r0, [pc, #120]	; (800312c <vTaskStartScheduler+0xac>)
 80030b2:	f7ff fe0b 	bl	8002ccc <xTaskCreateStatic>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <vTaskStartScheduler+0xb0>)
 80030ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <vTaskStartScheduler+0xb0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030c4:	2301      	movs	r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e001      	b.n	80030ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d116      	bne.n	8003102 <vTaskStartScheduler+0x82>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	613b      	str	r3, [r7, #16]
}
 80030e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <vTaskStartScheduler+0xb4>)
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295
 80030ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <vTaskStartScheduler+0xb8>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <vTaskStartScheduler+0xbc>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030fc:	f000 fb80 	bl	8003800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003100:	e00e      	b.n	8003120 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d10a      	bne.n	8003120 <vTaskStartScheduler+0xa0>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60fb      	str	r3, [r7, #12]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <vTaskStartScheduler+0x9e>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08004ed4 	.word	0x08004ed4
 800312c:	0800347d 	.word	0x0800347d
 8003130:	200004a0 	.word	0x200004a0
 8003134:	2000049c 	.word	0x2000049c
 8003138:	20000488 	.word	0x20000488
 800313c:	20000480 	.word	0x20000480

08003140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <vTaskSuspendAll+0x18>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a03      	ldr	r2, [pc, #12]	; (8003158 <vTaskSuspendAll+0x18>)
 800314c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	200004a4 	.word	0x200004a4

0800315c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <xTaskResumeAll+0xfc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xTaskResumeAll+0x2c>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	603b      	str	r3, [r7, #0]
}
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003188:	f000 fbdc 	bl	8003944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <xTaskResumeAll+0xfc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <xTaskResumeAll+0xfc>)
 8003194:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b30      	ldr	r3, [pc, #192]	; (8003258 <xTaskResumeAll+0xfc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d155      	bne.n	800324a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <xTaskResumeAll+0x100>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d051      	beq.n	800324a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a6:	e02e      	b.n	8003206 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <xTaskResumeAll+0x104>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3318      	adds	r3, #24
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fd5f 	bl	8002c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3304      	adds	r3, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fd5a 	bl	8002c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <xTaskResumeAll+0x108>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <xTaskResumeAll+0x108>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a21      	ldr	r2, [pc, #132]	; (8003268 <xTaskResumeAll+0x10c>)
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7ff fce6 	bl	8002bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <xTaskResumeAll+0x110>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <xTaskResumeAll+0x114>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <xTaskResumeAll+0x104>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1cc      	bne.n	80031a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003214:	f000 f9e2 	bl	80035dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <xTaskResumeAll+0x118>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003224:	f000 f838 	bl	8003298 <xTaskIncrementTick>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <xTaskResumeAll+0x114>)
 8003230:	2201      	movs	r2, #1
 8003232:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f1      	bne.n	8003224 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <xTaskResumeAll+0x118>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <xTaskResumeAll+0x114>)
 8003248:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800324a:	f000 fbab 	bl	80039a4 <vPortExitCritical>

	return xAlreadyYielded;
 800324e:	687b      	ldr	r3, [r7, #4]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200004a4 	.word	0x200004a4
 800325c:	2000047c 	.word	0x2000047c
 8003260:	2000043c 	.word	0x2000043c
 8003264:	20000484 	.word	0x20000484
 8003268:	20000380 	.word	0x20000380
 800326c:	2000037c 	.word	0x2000037c
 8003270:	20000490 	.word	0x20000490
 8003274:	2000048c 	.word	0x2000048c

08003278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <xTaskGetTickCount+0x1c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003284:	687b      	ldr	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000480 	.word	0x20000480

08003298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <xTaskIncrementTick+0x108>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d16f      	bne.n	800338a <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <xTaskIncrementTick+0x10c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3301      	adds	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032b2:	4a3c      	ldr	r2, [pc, #240]	; (80033a4 <xTaskIncrementTick+0x10c>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d120      	bne.n	8003300 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <xTaskIncrementTick+0x110>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <xTaskIncrementTick+0x46>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	603b      	str	r3, [r7, #0]
}
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xTaskIncrementTick+0x44>
 80032de:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <xTaskIncrementTick+0x110>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <xTaskIncrementTick+0x114>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <xTaskIncrementTick+0x110>)
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <xTaskIncrementTick+0x114>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <xTaskIncrementTick+0x118>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <xTaskIncrementTick+0x118>)
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	f000 f96e 	bl	80035dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <xTaskIncrementTick+0x11c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d344      	bcc.n	8003394 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <xTaskIncrementTick+0x110>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <xTaskIncrementTick+0x11c>)
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	601a      	str	r2, [r3, #0]
					break;
 800331c:	e03a      	b.n	8003394 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <xTaskIncrementTick+0x110>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d203      	bcs.n	800333e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <xTaskIncrementTick+0x11c>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800333c:	e02a      	b.n	8003394 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fc98 	bl	8002c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3318      	adds	r3, #24
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fc8f 	bl	8002c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <xTaskIncrementTick+0x120>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <xTaskIncrementTick+0x120>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4a10      	ldr	r2, [pc, #64]	; (80033bc <xTaskIncrementTick+0x124>)
 800337a:	441a      	add	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7ff fc1b 	bl	8002bbe <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003388:	e7bf      	b.n	800330a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <xTaskIncrementTick+0x128>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <xTaskIncrementTick+0x128>)
 8003392:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200004a4 	.word	0x200004a4
 80033a4:	20000480 	.word	0x20000480
 80033a8:	20000434 	.word	0x20000434
 80033ac:	20000438 	.word	0x20000438
 80033b0:	20000494 	.word	0x20000494
 80033b4:	2000049c 	.word	0x2000049c
 80033b8:	20000484 	.word	0x20000484
 80033bc:	20000380 	.word	0x20000380
 80033c0:	2000048c 	.word	0x2000048c

080033c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <vTaskSwitchContext+0xa4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <vTaskSwitchContext+0xa8>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033d8:	e03f      	b.n	800345a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <vTaskSwitchContext+0xa8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <vTaskSwitchContext+0xac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f1c3 031f 	rsb	r3, r3, #31
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	491f      	ldr	r1, [pc, #124]	; (8003474 <vTaskSwitchContext+0xb0>)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <vTaskSwitchContext+0x5c>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskSwitchContext+0x5a>
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <vTaskSwitchContext+0xb0>)
 800342c:	4413      	add	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3308      	adds	r3, #8
 8003442:	429a      	cmp	r2, r3
 8003444:	d104      	bne.n	8003450 <vTaskSwitchContext+0x8c>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <vTaskSwitchContext+0xb4>)
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	200004a4 	.word	0x200004a4
 800346c:	20000490 	.word	0x20000490
 8003470:	20000484 	.word	0x20000484
 8003474:	20000380 	.word	0x20000380
 8003478:	2000037c 	.word	0x2000037c

0800347c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003484:	f000 f84c 	bl	8003520 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <prvIdleTask+0x20>)
 800348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003498:	e7f4      	b.n	8003484 <prvIdleTask+0x8>
 800349a:	bf00      	nop
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	e00c      	b.n	80034c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <prvInitialiseTaskLists+0x60>)
 80034b8:	4413      	add	r3, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fb52 	bl	8002b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3301      	adds	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b06      	cmp	r3, #6
 80034ca:	d9ef      	bls.n	80034ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <prvInitialiseTaskLists+0x64>)
 80034ce:	f7ff fb49 	bl	8002b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034d2:	480d      	ldr	r0, [pc, #52]	; (8003508 <prvInitialiseTaskLists+0x68>)
 80034d4:	f7ff fb46 	bl	8002b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <prvInitialiseTaskLists+0x6c>)
 80034da:	f7ff fb43 	bl	8002b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034de:	480c      	ldr	r0, [pc, #48]	; (8003510 <prvInitialiseTaskLists+0x70>)
 80034e0:	f7ff fb40 	bl	8002b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034e4:	480b      	ldr	r0, [pc, #44]	; (8003514 <prvInitialiseTaskLists+0x74>)
 80034e6:	f7ff fb3d 	bl	8002b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <prvInitialiseTaskLists+0x78>)
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <prvInitialiseTaskLists+0x64>)
 80034ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <prvInitialiseTaskLists+0x7c>)
 80034f2:	4a05      	ldr	r2, [pc, #20]	; (8003508 <prvInitialiseTaskLists+0x68>)
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000380 	.word	0x20000380
 8003504:	2000040c 	.word	0x2000040c
 8003508:	20000420 	.word	0x20000420
 800350c:	2000043c 	.word	0x2000043c
 8003510:	20000450 	.word	0x20000450
 8003514:	20000468 	.word	0x20000468
 8003518:	20000434 	.word	0x20000434
 800351c:	20000438 	.word	0x20000438

08003520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003526:	e019      	b.n	800355c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003528:	f000 fa0c 	bl	8003944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <prvCheckTasksWaitingTermination+0x50>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fb9d 	bl	8002c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <prvCheckTasksWaitingTermination+0x54>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <prvCheckTasksWaitingTermination+0x54>)
 8003546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <prvCheckTasksWaitingTermination+0x58>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3b01      	subs	r3, #1
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <prvCheckTasksWaitingTermination+0x58>)
 8003550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003552:	f000 fa27 	bl	80039a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f810 	bl	800357c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvCheckTasksWaitingTermination+0x58>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e1      	bne.n	8003528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000450 	.word	0x20000450
 8003574:	2000047c 	.word	0x2000047c
 8003578:	20000464 	.word	0x20000464

0800357c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358a:	2b00      	cmp	r3, #0
 800358c:	d108      	bne.n	80035a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fb84 	bl	8003ca0 <vPortFree>
				vPortFree( pxTCB );
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fb81 	bl	8003ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800359e:	e018      	b.n	80035d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d103      	bne.n	80035b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fb78 	bl	8003ca0 <vPortFree>
	}
 80035b0:	e00f      	b.n	80035d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d00a      	beq.n	80035d2 <prvDeleteTCB+0x56>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <prvDeleteTCB+0x54>
	}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <prvResetNextTaskUnblockTime+0x38>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <prvResetNextTaskUnblockTime+0x3c>)
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295
 80035f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035f4:	e008      	b.n	8003608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <prvResetNextTaskUnblockTime+0x38>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <prvResetNextTaskUnblockTime+0x3c>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	20000434 	.word	0x20000434
 8003618:	2000049c 	.word	0x2000049c

0800361c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003626:	4b29      	ldr	r3, [pc, #164]	; (80036cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3304      	adds	r3, #4
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fb20 	bl	8002c78 <uxListRemove>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2201      	movs	r2, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43da      	mvns	r2, r3
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4013      	ands	r3, r2
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003654:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d10a      	bne.n	8003674 <prvAddCurrentTaskToDelayedList+0x58>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3304      	adds	r3, #4
 800366a:	4619      	mov	r1, r3
 800366c:	481a      	ldr	r0, [pc, #104]	; (80036d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800366e:	f7ff faa6 	bl	8002bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003672:	e026      	b.n	80036c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d209      	bcs.n	80036a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7ff fab4 	bl	8002c06 <vListInsert>
}
 800369e:	e010      	b.n	80036c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7ff faaa 	bl	8002c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d202      	bcs.n	80036c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036bc:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6013      	str	r3, [r2, #0]
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000480 	.word	0x20000480
 80036d0:	2000037c 	.word	0x2000037c
 80036d4:	20000484 	.word	0x20000484
 80036d8:	20000468 	.word	0x20000468
 80036dc:	20000438 	.word	0x20000438
 80036e0:	20000434 	.word	0x20000434
 80036e4:	2000049c 	.word	0x2000049c

080036e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b04      	subs	r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b04      	subs	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0201 	bic.w	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b04      	subs	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003718:	4a0c      	ldr	r2, [pc, #48]	; (800374c <pxPortInitialiseStack+0x64>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b14      	subs	r3, #20
 8003722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b04      	subs	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f06f 0202 	mvn.w	r2, #2
 8003736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3b20      	subs	r3, #32
 800373c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800373e:	68fb      	ldr	r3, [r7, #12]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	08003751 	.word	0x08003751

08003750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <prvTaskExitError+0x54>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d00a      	beq.n	800377a <prvTaskExitError+0x2a>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <prvTaskExitError+0x28>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	60bb      	str	r3, [r7, #8]
}
 800378c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800378e:	bf00      	nop
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0fc      	beq.n	8003790 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	2000000c 	.word	0x2000000c
	...

080037b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <pxCurrentTCBConst2>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	6808      	ldr	r0, [r1, #0]
 80037b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ba:	f380 8809 	msr	PSP, r0
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	4770      	bx	lr
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst2>:
 80037d0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <prvPortStartFirstTask+0x24>)
 80037da:	6800      	ldr	r0, [r0, #0]
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f380 8808 	msr	MSP, r0
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f380 8814 	msr	CONTROL, r0
 80037ea:	b662      	cpsie	i
 80037ec:	b661      	cpsie	f
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	df00      	svc	0
 80037f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037fa:	bf00      	nop
 80037fc:	e000ed08 	.word	0xe000ed08

08003800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <xPortStartScheduler+0x120>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a46      	ldr	r2, [pc, #280]	; (8003924 <xPortStartScheduler+0x124>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10a      	bne.n	8003826 <xPortStartScheduler+0x26>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003826:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <xPortStartScheduler+0x120>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <xPortStartScheduler+0x128>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10a      	bne.n	8003846 <xPortStartScheduler+0x46>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60fb      	str	r3, [r7, #12]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <xPortStartScheduler+0x12c>)
 8003848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	22ff      	movs	r2, #255	; 0xff
 8003856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <xPortStartScheduler+0x130>)
 800386c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <xPortStartScheduler+0x134>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003874:	e009      	b.n	800388a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <xPortStartScheduler+0x134>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3b01      	subs	r3, #1
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <xPortStartScheduler+0x134>)
 800387e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d0ef      	beq.n	8003876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <xPortStartScheduler+0x134>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00a      	beq.n	80038b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	60bb      	str	r3, [r7, #8]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <xPortStartScheduler+0x134>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <xPortStartScheduler+0x134>)
 80038c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <xPortStartScheduler+0x134>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <xPortStartScheduler+0x134>)
 80038cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <xPortStartScheduler+0x138>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <xPortStartScheduler+0x138>)
 80038dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <xPortStartScheduler+0x138>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <xPortStartScheduler+0x138>)
 80038e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038ee:	f000 f8dd 	bl	8003aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <xPortStartScheduler+0x13c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038f8:	f000 f8fc 	bl	8003af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <xPortStartScheduler+0x140>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <xPortStartScheduler+0x140>)
 8003902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003908:	f7ff ff66 	bl	80037d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800390c:	f7ff fd5a 	bl	80033c4 <vTaskSwitchContext>
	prvTaskExitError();
 8003910:	f7ff ff1e 	bl	8003750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00
 8003924:	410fc271 	.word	0x410fc271
 8003928:	410fc270 	.word	0x410fc270
 800392c:	e000e400 	.word	0xe000e400
 8003930:	200004a8 	.word	0x200004a8
 8003934:	200004ac 	.word	0x200004ac
 8003938:	e000ed20 	.word	0xe000ed20
 800393c:	2000000c 	.word	0x2000000c
 8003940:	e000ef34 	.word	0xe000ef34

08003944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	607b      	str	r3, [r7, #4]
}
 800395c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <vPortEnterCritical+0x58>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <vPortEnterCritical+0x58>)
 8003966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <vPortEnterCritical+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10f      	bne.n	8003990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <vPortEnterCritical+0x5c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <vPortEnterCritical+0x4c>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	603b      	str	r3, [r7, #0]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vPortEnterCritical+0x4a>
	}
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <vPortExitCritical+0x50>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <vPortExitCritical+0x24>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	607b      	str	r3, [r7, #4]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <vPortExitCritical+0x50>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <vPortExitCritical+0x50>)
 80039d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <vPortExitCritical+0x50>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <vPortExitCritical+0x42>
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
	...

08003a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a00:	f3ef 8009 	mrs	r0, PSP
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <pxCurrentTCBConst>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f01e 0f10 	tst.w	lr, #16
 8003a10:	bf08      	it	eq
 8003a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1a:	6010      	str	r0, [r2, #0]
 8003a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a24:	f380 8811 	msr	BASEPRI, r0
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f7ff fcc8 	bl	80033c4 <vTaskSwitchContext>
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f380 8811 	msr	BASEPRI, r0
 8003a3c:	bc09      	pop	{r0, r3}
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6808      	ldr	r0, [r1, #0]
 8003a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a46:	f01e 0f10 	tst.w	lr, #16
 8003a4a:	bf08      	it	eq
 8003a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a50:	f380 8809 	msr	PSP, r0
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	f3af 8000 	nop.w

08003a60 <pxCurrentTCBConst>:
 8003a60:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	607b      	str	r3, [r7, #4]
}
 8003a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a82:	f7ff fc09 	bl	8003298 <xTaskIncrementTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <SysTick_Handler+0x40>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f383 8811 	msr	BASEPRI, r3
}
 8003a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <vPortSetupTimerInterrupt+0x34>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <vPortSetupTimerInterrupt+0x38>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <vPortSetupTimerInterrupt+0x3c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <vPortSetupTimerInterrupt+0x40>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <vPortSetupTimerInterrupt+0x44>)
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <vPortSetupTimerInterrupt+0x34>)
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e010 	.word	0xe000e010
 8003ae4:	e000e018 	.word	0xe000e018
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	10624dd3 	.word	0x10624dd3
 8003af0:	e000e014 	.word	0xe000e014

08003af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b04 <vPortEnableVFP+0x10>
 8003af8:	6801      	ldr	r1, [r0, #0]
 8003afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003afe:	6001      	str	r1, [r0, #0]
 8003b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b02:	bf00      	nop
 8003b04:	e000ed88 	.word	0xe000ed88

08003b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b14:	f7ff fb14 	bl	8003140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <pvPortMalloc+0x180>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b20:	f000 f920 	bl	8003d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <pvPortMalloc+0x184>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01d      	beq.n	8003b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b38:	2208      	movs	r2, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d014      	beq.n	8003b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f023 0307 	bic.w	r3, r3, #7
 8003b50:	3308      	adds	r3, #8
 8003b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <pvPortMalloc+0x6c>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	617b      	str	r3, [r7, #20]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d06e      	beq.n	8003c58 <pvPortMalloc+0x150>
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <pvPortMalloc+0x188>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d869      	bhi.n	8003c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <pvPortMalloc+0x18c>)
 8003b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b88:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <pvPortMalloc+0x18c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8e:	e004      	b.n	8003b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d903      	bls.n	8003bac <pvPortMalloc+0xa4>
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f1      	bne.n	8003b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <pvPortMalloc+0x180>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d050      	beq.n	8003c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	4413      	add	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad2      	subs	r2, r2, r3
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d91f      	bls.n	8003c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <pvPortMalloc+0xf8>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	613b      	str	r3, [r7, #16]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f000 f908 	bl	8003e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <pvPortMalloc+0x188>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <pvPortMalloc+0x188>)
 8003c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <pvPortMalloc+0x188>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <pvPortMalloc+0x190>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d203      	bcs.n	8003c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <pvPortMalloc+0x188>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <pvPortMalloc+0x190>)
 8003c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <pvPortMalloc+0x184>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <pvPortMalloc+0x194>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <pvPortMalloc+0x194>)
 8003c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c58:	f7ff fa80 	bl	800315c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <pvPortMalloc+0x174>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <pvPortMalloc+0x172>
	return pvReturn;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3728      	adds	r7, #40	; 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200040b8 	.word	0x200040b8
 8003c8c:	200040cc 	.word	0x200040cc
 8003c90:	200040bc 	.word	0x200040bc
 8003c94:	200040b0 	.word	0x200040b0
 8003c98:	200040c0 	.word	0x200040c0
 8003c9c:	200040c4 	.word	0x200040c4

08003ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d04d      	beq.n	8003d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <vPortFree+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <vPortFree+0x44>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <vPortFree+0x62>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60bb      	str	r3, [r7, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <vPortFree+0xb8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01e      	beq.n	8003d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11a      	bne.n	8003d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <vPortFree+0xb8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d28:	f7ff fa0a 	bl	8003140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <vPortFree+0xbc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <vPortFree+0xbc>)
 8003d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d3a:	6938      	ldr	r0, [r7, #16]
 8003d3c:	f000 f874 	bl	8003e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <vPortFree+0xc0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <vPortFree+0xc0>)
 8003d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d4a:	f7ff fa07 	bl	800315c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200040cc 	.word	0x200040cc
 8003d5c:	200040bc 	.word	0x200040bc
 8003d60:	200040c8 	.word	0x200040c8

08003d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <prvHeapInit+0xac>)
 8003d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3307      	adds	r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <prvHeapInit+0xac>)
 8003d94:	4413      	add	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <prvHeapInit+0xb0>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <prvHeapInit+0xb0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003db0:	2208      	movs	r2, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <prvHeapInit+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <prvHeapInit+0xb4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <prvHeapInit+0xb4>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <prvHeapInit+0xb8>)
 8003df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <prvHeapInit+0xbc>)
 8003dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <prvHeapInit+0xc0>)
 8003dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	200004b0 	.word	0x200004b0
 8003e14:	200040b0 	.word	0x200040b0
 8003e18:	200040b8 	.word	0x200040b8
 8003e1c:	200040c0 	.word	0x200040c0
 8003e20:	200040bc 	.word	0x200040bc
 8003e24:	200040cc 	.word	0x200040cc

08003e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <prvInsertBlockIntoFreeList+0xac>)
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e002      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x14>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d8f7      	bhi.n	8003e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d108      	bne.n	8003e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d118      	bne.n	8003eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00d      	beq.n	8003ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e008      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d002      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200040b0 	.word	0x200040b0
 8003ed8:	200040b8 	.word	0x200040b8

08003edc <std>:
 8003edc:	2300      	movs	r3, #0
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eea:	6083      	str	r3, [r0, #8]
 8003eec:	8181      	strh	r1, [r0, #12]
 8003eee:	6643      	str	r3, [r0, #100]	; 0x64
 8003ef0:	81c2      	strh	r2, [r0, #14]
 8003ef2:	6183      	str	r3, [r0, #24]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	305c      	adds	r0, #92	; 0x5c
 8003efa:	f000 f9f7 	bl	80042ec <memset>
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <std+0x58>)
 8003f00:	6263      	str	r3, [r4, #36]	; 0x24
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <std+0x5c>)
 8003f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <std+0x60>)
 8003f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <std+0x64>)
 8003f0c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <std+0x68>)
 8003f10:	6224      	str	r4, [r4, #32]
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d006      	beq.n	8003f24 <std+0x48>
 8003f16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f1a:	4294      	cmp	r4, r2
 8003f1c:	d002      	beq.n	8003f24 <std+0x48>
 8003f1e:	33d0      	adds	r3, #208	; 0xd0
 8003f20:	429c      	cmp	r4, r3
 8003f22:	d105      	bne.n	8003f30 <std+0x54>
 8003f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f000 ba56 	b.w	80043dc <__retarget_lock_init_recursive>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	bf00      	nop
 8003f34:	0800413d 	.word	0x0800413d
 8003f38:	0800415f 	.word	0x0800415f
 8003f3c:	08004197 	.word	0x08004197
 8003f40:	080041bb 	.word	0x080041bb
 8003f44:	200040d0 	.word	0x200040d0

08003f48 <stdio_exit_handler>:
 8003f48:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <stdio_exit_handler+0xc>)
 8003f4a:	4903      	ldr	r1, [pc, #12]	; (8003f58 <stdio_exit_handler+0x10>)
 8003f4c:	4803      	ldr	r0, [pc, #12]	; (8003f5c <stdio_exit_handler+0x14>)
 8003f4e:	f000 b869 	b.w	8004024 <_fwalk_sglue>
 8003f52:	bf00      	nop
 8003f54:	20000010 	.word	0x20000010
 8003f58:	08004c89 	.word	0x08004c89
 8003f5c:	2000001c 	.word	0x2000001c

08003f60 <cleanup_stdio>:
 8003f60:	6841      	ldr	r1, [r0, #4]
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <cleanup_stdio+0x34>)
 8003f64:	4299      	cmp	r1, r3
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	d001      	beq.n	8003f70 <cleanup_stdio+0x10>
 8003f6c:	f000 fe8c 	bl	8004c88 <_fflush_r>
 8003f70:	68a1      	ldr	r1, [r4, #8]
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <cleanup_stdio+0x38>)
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d002      	beq.n	8003f7e <cleanup_stdio+0x1e>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 fe85 	bl	8004c88 <_fflush_r>
 8003f7e:	68e1      	ldr	r1, [r4, #12]
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <cleanup_stdio+0x3c>)
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d004      	beq.n	8003f90 <cleanup_stdio+0x30>
 8003f86:	4620      	mov	r0, r4
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f000 be7c 	b.w	8004c88 <_fflush_r>
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	200040d0 	.word	0x200040d0
 8003f98:	20004138 	.word	0x20004138
 8003f9c:	200041a0 	.word	0x200041a0

08003fa0 <global_stdio_init.part.0>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <global_stdio_init.part.0+0x30>)
 8003fa4:	4c0b      	ldr	r4, [pc, #44]	; (8003fd4 <global_stdio_init.part.0+0x34>)
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <global_stdio_init.part.0+0x38>)
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4620      	mov	r0, r4
 8003fac:	2200      	movs	r2, #0
 8003fae:	2104      	movs	r1, #4
 8003fb0:	f7ff ff94 	bl	8003edc <std>
 8003fb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003fb8:	2201      	movs	r2, #1
 8003fba:	2109      	movs	r1, #9
 8003fbc:	f7ff ff8e 	bl	8003edc <std>
 8003fc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fca:	2112      	movs	r1, #18
 8003fcc:	f7ff bf86 	b.w	8003edc <std>
 8003fd0:	20004208 	.word	0x20004208
 8003fd4:	200040d0 	.word	0x200040d0
 8003fd8:	08003f49 	.word	0x08003f49

08003fdc <__sfp_lock_acquire>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__sfp_lock_acquire+0x8>)
 8003fde:	f000 b9fe 	b.w	80043de <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20004211 	.word	0x20004211

08003fe8 <__sfp_lock_release>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__sfp_lock_release+0x8>)
 8003fea:	f000 b9f9 	b.w	80043e0 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	20004211 	.word	0x20004211

08003ff4 <__sinit>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	f7ff fff0 	bl	8003fdc <__sfp_lock_acquire>
 8003ffc:	6a23      	ldr	r3, [r4, #32]
 8003ffe:	b11b      	cbz	r3, 8004008 <__sinit+0x14>
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	f7ff bff0 	b.w	8003fe8 <__sfp_lock_release>
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__sinit+0x28>)
 800400a:	6223      	str	r3, [r4, #32]
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <__sinit+0x2c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f5      	bne.n	8004000 <__sinit+0xc>
 8004014:	f7ff ffc4 	bl	8003fa0 <global_stdio_init.part.0>
 8004018:	e7f2      	b.n	8004000 <__sinit+0xc>
 800401a:	bf00      	nop
 800401c:	08003f61 	.word	0x08003f61
 8004020:	20004208 	.word	0x20004208

08004024 <_fwalk_sglue>:
 8004024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004028:	4607      	mov	r7, r0
 800402a:	4688      	mov	r8, r1
 800402c:	4614      	mov	r4, r2
 800402e:	2600      	movs	r6, #0
 8004030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004034:	f1b9 0901 	subs.w	r9, r9, #1
 8004038:	d505      	bpl.n	8004046 <_fwalk_sglue+0x22>
 800403a:	6824      	ldr	r4, [r4, #0]
 800403c:	2c00      	cmp	r4, #0
 800403e:	d1f7      	bne.n	8004030 <_fwalk_sglue+0xc>
 8004040:	4630      	mov	r0, r6
 8004042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004046:	89ab      	ldrh	r3, [r5, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d907      	bls.n	800405c <_fwalk_sglue+0x38>
 800404c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004050:	3301      	adds	r3, #1
 8004052:	d003      	beq.n	800405c <_fwalk_sglue+0x38>
 8004054:	4629      	mov	r1, r5
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	4306      	orrs	r6, r0
 800405c:	3568      	adds	r5, #104	; 0x68
 800405e:	e7e9      	b.n	8004034 <_fwalk_sglue+0x10>

08004060 <iprintf>:
 8004060:	b40f      	push	{r0, r1, r2, r3}
 8004062:	b507      	push	{r0, r1, r2, lr}
 8004064:	4906      	ldr	r1, [pc, #24]	; (8004080 <iprintf+0x20>)
 8004066:	ab04      	add	r3, sp, #16
 8004068:	6808      	ldr	r0, [r1, #0]
 800406a:	f853 2b04 	ldr.w	r2, [r3], #4
 800406e:	6881      	ldr	r1, [r0, #8]
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	f000 fad9 	bl	8004628 <_vfiprintf_r>
 8004076:	b003      	add	sp, #12
 8004078:	f85d eb04 	ldr.w	lr, [sp], #4
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	20000068 	.word	0x20000068

08004084 <_puts_r>:
 8004084:	6a03      	ldr	r3, [r0, #32]
 8004086:	b570      	push	{r4, r5, r6, lr}
 8004088:	6884      	ldr	r4, [r0, #8]
 800408a:	4605      	mov	r5, r0
 800408c:	460e      	mov	r6, r1
 800408e:	b90b      	cbnz	r3, 8004094 <_puts_r+0x10>
 8004090:	f7ff ffb0 	bl	8003ff4 <__sinit>
 8004094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004096:	07db      	lsls	r3, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_puts_r+0x22>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	0598      	lsls	r0, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_puts_r+0x22>
 80040a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a2:	f000 f99c 	bl	80043de <__retarget_lock_acquire_recursive>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	0719      	lsls	r1, r3, #28
 80040aa:	d513      	bpl.n	80040d4 <_puts_r+0x50>
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	b18b      	cbz	r3, 80040d4 <_puts_r+0x50>
 80040b0:	3e01      	subs	r6, #1
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040b8:	3b01      	subs	r3, #1
 80040ba:	60a3      	str	r3, [r4, #8]
 80040bc:	b9e9      	cbnz	r1, 80040fa <_puts_r+0x76>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da2e      	bge.n	8004120 <_puts_r+0x9c>
 80040c2:	4622      	mov	r2, r4
 80040c4:	210a      	movs	r1, #10
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 f87b 	bl	80041c2 <__swbuf_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d007      	beq.n	80040e0 <_puts_r+0x5c>
 80040d0:	250a      	movs	r5, #10
 80040d2:	e007      	b.n	80040e4 <_puts_r+0x60>
 80040d4:	4621      	mov	r1, r4
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 f8b0 	bl	800423c <__swsetup_r>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d0e7      	beq.n	80040b0 <_puts_r+0x2c>
 80040e0:	f04f 35ff 	mov.w	r5, #4294967295
 80040e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e6:	07da      	lsls	r2, r3, #31
 80040e8:	d405      	bmi.n	80040f6 <_puts_r+0x72>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	059b      	lsls	r3, r3, #22
 80040ee:	d402      	bmi.n	80040f6 <_puts_r+0x72>
 80040f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f2:	f000 f975 	bl	80043e0 <__retarget_lock_release_recursive>
 80040f6:	4628      	mov	r0, r5
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da04      	bge.n	8004108 <_puts_r+0x84>
 80040fe:	69a2      	ldr	r2, [r4, #24]
 8004100:	429a      	cmp	r2, r3
 8004102:	dc06      	bgt.n	8004112 <_puts_r+0x8e>
 8004104:	290a      	cmp	r1, #10
 8004106:	d004      	beq.n	8004112 <_puts_r+0x8e>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	6022      	str	r2, [r4, #0]
 800410e:	7019      	strb	r1, [r3, #0]
 8004110:	e7cf      	b.n	80040b2 <_puts_r+0x2e>
 8004112:	4622      	mov	r2, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 f854 	bl	80041c2 <__swbuf_r>
 800411a:	3001      	adds	r0, #1
 800411c:	d1c9      	bne.n	80040b2 <_puts_r+0x2e>
 800411e:	e7df      	b.n	80040e0 <_puts_r+0x5c>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	250a      	movs	r5, #10
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	6022      	str	r2, [r4, #0]
 8004128:	701d      	strb	r5, [r3, #0]
 800412a:	e7db      	b.n	80040e4 <_puts_r+0x60>

0800412c <puts>:
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <puts+0xc>)
 800412e:	4601      	mov	r1, r0
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f7ff bfa7 	b.w	8004084 <_puts_r>
 8004136:	bf00      	nop
 8004138:	20000068 	.word	0x20000068

0800413c <__sread>:
 800413c:	b510      	push	{r4, lr}
 800413e:	460c      	mov	r4, r1
 8004140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004144:	f000 f8fc 	bl	8004340 <_read_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	bfab      	itete	ge
 800414c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800414e:	89a3      	ldrhlt	r3, [r4, #12]
 8004150:	181b      	addge	r3, r3, r0
 8004152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004156:	bfac      	ite	ge
 8004158:	6563      	strge	r3, [r4, #84]	; 0x54
 800415a:	81a3      	strhlt	r3, [r4, #12]
 800415c:	bd10      	pop	{r4, pc}

0800415e <__swrite>:
 800415e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	461f      	mov	r7, r3
 8004164:	898b      	ldrh	r3, [r1, #12]
 8004166:	05db      	lsls	r3, r3, #23
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4616      	mov	r6, r2
 800416e:	d505      	bpl.n	800417c <__swrite+0x1e>
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	2302      	movs	r3, #2
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f8d0 	bl	800431c <_lseek_r>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	4632      	mov	r2, r6
 800418a:	463b      	mov	r3, r7
 800418c:	4628      	mov	r0, r5
 800418e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	f000 b8e7 	b.w	8004364 <_write_r>

08004196 <__sseek>:
 8004196:	b510      	push	{r4, lr}
 8004198:	460c      	mov	r4, r1
 800419a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419e:	f000 f8bd 	bl	800431c <_lseek_r>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	bf15      	itete	ne
 80041a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80041aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041b2:	81a3      	strheq	r3, [r4, #12]
 80041b4:	bf18      	it	ne
 80041b6:	81a3      	strhne	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__sclose>:
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 b89d 	b.w	80042fc <_close_r>

080041c2 <__swbuf_r>:
 80041c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c4:	460e      	mov	r6, r1
 80041c6:	4614      	mov	r4, r2
 80041c8:	4605      	mov	r5, r0
 80041ca:	b118      	cbz	r0, 80041d4 <__swbuf_r+0x12>
 80041cc:	6a03      	ldr	r3, [r0, #32]
 80041ce:	b90b      	cbnz	r3, 80041d4 <__swbuf_r+0x12>
 80041d0:	f7ff ff10 	bl	8003ff4 <__sinit>
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	071a      	lsls	r2, r3, #28
 80041dc:	d525      	bpl.n	800422a <__swbuf_r+0x68>
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	b31b      	cbz	r3, 800422a <__swbuf_r+0x68>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	6922      	ldr	r2, [r4, #16]
 80041e6:	1a98      	subs	r0, r3, r2
 80041e8:	6963      	ldr	r3, [r4, #20]
 80041ea:	b2f6      	uxtb	r6, r6
 80041ec:	4283      	cmp	r3, r0
 80041ee:	4637      	mov	r7, r6
 80041f0:	dc04      	bgt.n	80041fc <__swbuf_r+0x3a>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 fd47 	bl	8004c88 <_fflush_r>
 80041fa:	b9e0      	cbnz	r0, 8004236 <__swbuf_r+0x74>
 80041fc:	68a3      	ldr	r3, [r4, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60a3      	str	r3, [r4, #8]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	6022      	str	r2, [r4, #0]
 8004208:	701e      	strb	r6, [r3, #0]
 800420a:	6962      	ldr	r2, [r4, #20]
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	429a      	cmp	r2, r3
 8004210:	d004      	beq.n	800421c <__swbuf_r+0x5a>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	07db      	lsls	r3, r3, #31
 8004216:	d506      	bpl.n	8004226 <__swbuf_r+0x64>
 8004218:	2e0a      	cmp	r6, #10
 800421a:	d104      	bne.n	8004226 <__swbuf_r+0x64>
 800421c:	4621      	mov	r1, r4
 800421e:	4628      	mov	r0, r5
 8004220:	f000 fd32 	bl	8004c88 <_fflush_r>
 8004224:	b938      	cbnz	r0, 8004236 <__swbuf_r+0x74>
 8004226:	4638      	mov	r0, r7
 8004228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 f805 	bl	800423c <__swsetup_r>
 8004232:	2800      	cmp	r0, #0
 8004234:	d0d5      	beq.n	80041e2 <__swbuf_r+0x20>
 8004236:	f04f 37ff 	mov.w	r7, #4294967295
 800423a:	e7f4      	b.n	8004226 <__swbuf_r+0x64>

0800423c <__swsetup_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <__swsetup_r+0xac>)
 8004240:	4605      	mov	r5, r0
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	460c      	mov	r4, r1
 8004246:	b118      	cbz	r0, 8004250 <__swsetup_r+0x14>
 8004248:	6a03      	ldr	r3, [r0, #32]
 800424a:	b90b      	cbnz	r3, 8004250 <__swsetup_r+0x14>
 800424c:	f7ff fed2 	bl	8003ff4 <__sinit>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004256:	0718      	lsls	r0, r3, #28
 8004258:	d422      	bmi.n	80042a0 <__swsetup_r+0x64>
 800425a:	06d9      	lsls	r1, r3, #27
 800425c:	d407      	bmi.n	800426e <__swsetup_r+0x32>
 800425e:	2309      	movs	r3, #9
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	e034      	b.n	80042d8 <__swsetup_r+0x9c>
 800426e:	0758      	lsls	r0, r3, #29
 8004270:	d512      	bpl.n	8004298 <__swsetup_r+0x5c>
 8004272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004274:	b141      	cbz	r1, 8004288 <__swsetup_r+0x4c>
 8004276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800427a:	4299      	cmp	r1, r3
 800427c:	d002      	beq.n	8004284 <__swsetup_r+0x48>
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f8b0 	bl	80043e4 <_free_r>
 8004284:	2300      	movs	r3, #0
 8004286:	6363      	str	r3, [r4, #52]	; 0x34
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800428e:	81a3      	strh	r3, [r4, #12]
 8004290:	2300      	movs	r3, #0
 8004292:	6063      	str	r3, [r4, #4]
 8004294:	6923      	ldr	r3, [r4, #16]
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f043 0308 	orr.w	r3, r3, #8
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	b94b      	cbnz	r3, 80042b8 <__swsetup_r+0x7c>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ae:	d003      	beq.n	80042b8 <__swsetup_r+0x7c>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	f000 fd36 	bl	8004d24 <__smakebuf_r>
 80042b8:	89a0      	ldrh	r0, [r4, #12]
 80042ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042be:	f010 0301 	ands.w	r3, r0, #1
 80042c2:	d00a      	beq.n	80042da <__swsetup_r+0x9e>
 80042c4:	2300      	movs	r3, #0
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	6963      	ldr	r3, [r4, #20]
 80042ca:	425b      	negs	r3, r3
 80042cc:	61a3      	str	r3, [r4, #24]
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	b943      	cbnz	r3, 80042e4 <__swsetup_r+0xa8>
 80042d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042d6:	d1c4      	bne.n	8004262 <__swsetup_r+0x26>
 80042d8:	bd38      	pop	{r3, r4, r5, pc}
 80042da:	0781      	lsls	r1, r0, #30
 80042dc:	bf58      	it	pl
 80042de:	6963      	ldrpl	r3, [r4, #20]
 80042e0:	60a3      	str	r3, [r4, #8]
 80042e2:	e7f4      	b.n	80042ce <__swsetup_r+0x92>
 80042e4:	2000      	movs	r0, #0
 80042e6:	e7f7      	b.n	80042d8 <__swsetup_r+0x9c>
 80042e8:	20000068 	.word	0x20000068

080042ec <memset>:
 80042ec:	4402      	add	r2, r0
 80042ee:	4603      	mov	r3, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <_close_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d06      	ldr	r5, [pc, #24]	; (8004318 <_close_r+0x1c>)
 8004300:	2300      	movs	r3, #0
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc fd33 	bl	8000d72 <_close>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_close_r+0x1a>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_close_r+0x1a>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	2000420c 	.word	0x2000420c

0800431c <_lseek_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d07      	ldr	r5, [pc, #28]	; (800433c <_lseek_r+0x20>)
 8004320:	4604      	mov	r4, r0
 8004322:	4608      	mov	r0, r1
 8004324:	4611      	mov	r1, r2
 8004326:	2200      	movs	r2, #0
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fc fd48 	bl	8000dc0 <_lseek>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_lseek_r+0x1e>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_lseek_r+0x1e>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	2000420c 	.word	0x2000420c

08004340 <_read_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d07      	ldr	r5, [pc, #28]	; (8004360 <_read_r+0x20>)
 8004344:	4604      	mov	r4, r0
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	2200      	movs	r2, #0
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fc fcf2 	bl	8000d38 <_read>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_read_r+0x1e>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_read_r+0x1e>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	2000420c 	.word	0x2000420c

08004364 <_write_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d07      	ldr	r5, [pc, #28]	; (8004384 <_write_r+0x20>)
 8004368:	4604      	mov	r4, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fc f95b 	bl	800062e <_write>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_write_r+0x1e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	b103      	cbz	r3, 8004382 <_write_r+0x1e>
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	2000420c 	.word	0x2000420c

08004388 <__errno>:
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <__errno+0x8>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000068 	.word	0x20000068

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	; (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	; (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	; (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 fd2a 	bl	8004e00 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004f30 	.word	0x08004f30
 80043d0:	08004f30 	.word	0x08004f30
 80043d4:	08004f30 	.word	0x08004f30
 80043d8:	08004f34 	.word	0x08004f34

080043dc <__retarget_lock_init_recursive>:
 80043dc:	4770      	bx	lr

080043de <__retarget_lock_acquire_recursive>:
 80043de:	4770      	bx	lr

080043e0 <__retarget_lock_release_recursive>:
 80043e0:	4770      	bx	lr
	...

080043e4 <_free_r>:
 80043e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d044      	beq.n	8004474 <_free_r+0x90>
 80043ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ee:	9001      	str	r0, [sp, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f1a1 0404 	sub.w	r4, r1, #4
 80043f6:	bfb8      	it	lt
 80043f8:	18e4      	addlt	r4, r4, r3
 80043fa:	f000 f8df 	bl	80045bc <__malloc_lock>
 80043fe:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <_free_r+0x94>)
 8004400:	9801      	ldr	r0, [sp, #4]
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	b933      	cbnz	r3, 8004414 <_free_r+0x30>
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6014      	str	r4, [r2, #0]
 800440a:	b003      	add	sp, #12
 800440c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004410:	f000 b8da 	b.w	80045c8 <__malloc_unlock>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d908      	bls.n	800442a <_free_r+0x46>
 8004418:	6825      	ldr	r5, [r4, #0]
 800441a:	1961      	adds	r1, r4, r5
 800441c:	428b      	cmp	r3, r1
 800441e:	bf01      	itttt	eq
 8004420:	6819      	ldreq	r1, [r3, #0]
 8004422:	685b      	ldreq	r3, [r3, #4]
 8004424:	1949      	addeq	r1, r1, r5
 8004426:	6021      	streq	r1, [r4, #0]
 8004428:	e7ed      	b.n	8004406 <_free_r+0x22>
 800442a:	461a      	mov	r2, r3
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b10b      	cbz	r3, 8004434 <_free_r+0x50>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d9fa      	bls.n	800442a <_free_r+0x46>
 8004434:	6811      	ldr	r1, [r2, #0]
 8004436:	1855      	adds	r5, r2, r1
 8004438:	42a5      	cmp	r5, r4
 800443a:	d10b      	bne.n	8004454 <_free_r+0x70>
 800443c:	6824      	ldr	r4, [r4, #0]
 800443e:	4421      	add	r1, r4
 8004440:	1854      	adds	r4, r2, r1
 8004442:	42a3      	cmp	r3, r4
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	d1e0      	bne.n	800440a <_free_r+0x26>
 8004448:	681c      	ldr	r4, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	6053      	str	r3, [r2, #4]
 800444e:	440c      	add	r4, r1
 8004450:	6014      	str	r4, [r2, #0]
 8004452:	e7da      	b.n	800440a <_free_r+0x26>
 8004454:	d902      	bls.n	800445c <_free_r+0x78>
 8004456:	230c      	movs	r3, #12
 8004458:	6003      	str	r3, [r0, #0]
 800445a:	e7d6      	b.n	800440a <_free_r+0x26>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	1961      	adds	r1, r4, r5
 8004460:	428b      	cmp	r3, r1
 8004462:	bf04      	itt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	6063      	str	r3, [r4, #4]
 800446a:	bf04      	itt	eq
 800446c:	1949      	addeq	r1, r1, r5
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	6054      	str	r4, [r2, #4]
 8004472:	e7ca      	b.n	800440a <_free_r+0x26>
 8004474:	b003      	add	sp, #12
 8004476:	bd30      	pop	{r4, r5, pc}
 8004478:	20004214 	.word	0x20004214

0800447c <sbrk_aligned>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4e0e      	ldr	r6, [pc, #56]	; (80044b8 <sbrk_aligned+0x3c>)
 8004480:	460c      	mov	r4, r1
 8004482:	6831      	ldr	r1, [r6, #0]
 8004484:	4605      	mov	r5, r0
 8004486:	b911      	cbnz	r1, 800448e <sbrk_aligned+0x12>
 8004488:	f000 fcaa 	bl	8004de0 <_sbrk_r>
 800448c:	6030      	str	r0, [r6, #0]
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 fca5 	bl	8004de0 <_sbrk_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d00a      	beq.n	80044b0 <sbrk_aligned+0x34>
 800449a:	1cc4      	adds	r4, r0, #3
 800449c:	f024 0403 	bic.w	r4, r4, #3
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	d007      	beq.n	80044b4 <sbrk_aligned+0x38>
 80044a4:	1a21      	subs	r1, r4, r0
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 fc9a 	bl	8004de0 <_sbrk_r>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d101      	bne.n	80044b4 <sbrk_aligned+0x38>
 80044b0:	f04f 34ff 	mov.w	r4, #4294967295
 80044b4:	4620      	mov	r0, r4
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	20004218 	.word	0x20004218

080044bc <_malloc_r>:
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	1ccd      	adds	r5, r1, #3
 80044c2:	f025 0503 	bic.w	r5, r5, #3
 80044c6:	3508      	adds	r5, #8
 80044c8:	2d0c      	cmp	r5, #12
 80044ca:	bf38      	it	cc
 80044cc:	250c      	movcc	r5, #12
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	4607      	mov	r7, r0
 80044d2:	db01      	blt.n	80044d8 <_malloc_r+0x1c>
 80044d4:	42a9      	cmp	r1, r5
 80044d6:	d905      	bls.n	80044e4 <_malloc_r+0x28>
 80044d8:	230c      	movs	r3, #12
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	2600      	movs	r6, #0
 80044de:	4630      	mov	r0, r6
 80044e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80045b8 <_malloc_r+0xfc>
 80044e8:	f000 f868 	bl	80045bc <__malloc_lock>
 80044ec:	f8d8 3000 	ldr.w	r3, [r8]
 80044f0:	461c      	mov	r4, r3
 80044f2:	bb5c      	cbnz	r4, 800454c <_malloc_r+0x90>
 80044f4:	4629      	mov	r1, r5
 80044f6:	4638      	mov	r0, r7
 80044f8:	f7ff ffc0 	bl	800447c <sbrk_aligned>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	4604      	mov	r4, r0
 8004500:	d155      	bne.n	80045ae <_malloc_r+0xf2>
 8004502:	f8d8 4000 	ldr.w	r4, [r8]
 8004506:	4626      	mov	r6, r4
 8004508:	2e00      	cmp	r6, #0
 800450a:	d145      	bne.n	8004598 <_malloc_r+0xdc>
 800450c:	2c00      	cmp	r4, #0
 800450e:	d048      	beq.n	80045a2 <_malloc_r+0xe6>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	4631      	mov	r1, r6
 8004514:	4638      	mov	r0, r7
 8004516:	eb04 0903 	add.w	r9, r4, r3
 800451a:	f000 fc61 	bl	8004de0 <_sbrk_r>
 800451e:	4581      	cmp	r9, r0
 8004520:	d13f      	bne.n	80045a2 <_malloc_r+0xe6>
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	1a6d      	subs	r5, r5, r1
 8004526:	4629      	mov	r1, r5
 8004528:	4638      	mov	r0, r7
 800452a:	f7ff ffa7 	bl	800447c <sbrk_aligned>
 800452e:	3001      	adds	r0, #1
 8004530:	d037      	beq.n	80045a2 <_malloc_r+0xe6>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	442b      	add	r3, r5
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	f8d8 3000 	ldr.w	r3, [r8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d038      	beq.n	80045b2 <_malloc_r+0xf6>
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	42a2      	cmp	r2, r4
 8004544:	d12b      	bne.n	800459e <_malloc_r+0xe2>
 8004546:	2200      	movs	r2, #0
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e00f      	b.n	800456c <_malloc_r+0xb0>
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	1b52      	subs	r2, r2, r5
 8004550:	d41f      	bmi.n	8004592 <_malloc_r+0xd6>
 8004552:	2a0b      	cmp	r2, #11
 8004554:	d917      	bls.n	8004586 <_malloc_r+0xca>
 8004556:	1961      	adds	r1, r4, r5
 8004558:	42a3      	cmp	r3, r4
 800455a:	6025      	str	r5, [r4, #0]
 800455c:	bf18      	it	ne
 800455e:	6059      	strne	r1, [r3, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	bf08      	it	eq
 8004564:	f8c8 1000 	streq.w	r1, [r8]
 8004568:	5162      	str	r2, [r4, r5]
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	4638      	mov	r0, r7
 800456e:	f104 060b 	add.w	r6, r4, #11
 8004572:	f000 f829 	bl	80045c8 <__malloc_unlock>
 8004576:	f026 0607 	bic.w	r6, r6, #7
 800457a:	1d23      	adds	r3, r4, #4
 800457c:	1af2      	subs	r2, r6, r3
 800457e:	d0ae      	beq.n	80044de <_malloc_r+0x22>
 8004580:	1b9b      	subs	r3, r3, r6
 8004582:	50a3      	str	r3, [r4, r2]
 8004584:	e7ab      	b.n	80044de <_malloc_r+0x22>
 8004586:	42a3      	cmp	r3, r4
 8004588:	6862      	ldr	r2, [r4, #4]
 800458a:	d1dd      	bne.n	8004548 <_malloc_r+0x8c>
 800458c:	f8c8 2000 	str.w	r2, [r8]
 8004590:	e7ec      	b.n	800456c <_malloc_r+0xb0>
 8004592:	4623      	mov	r3, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7ac      	b.n	80044f2 <_malloc_r+0x36>
 8004598:	4634      	mov	r4, r6
 800459a:	6876      	ldr	r6, [r6, #4]
 800459c:	e7b4      	b.n	8004508 <_malloc_r+0x4c>
 800459e:	4613      	mov	r3, r2
 80045a0:	e7cc      	b.n	800453c <_malloc_r+0x80>
 80045a2:	230c      	movs	r3, #12
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4638      	mov	r0, r7
 80045a8:	f000 f80e 	bl	80045c8 <__malloc_unlock>
 80045ac:	e797      	b.n	80044de <_malloc_r+0x22>
 80045ae:	6025      	str	r5, [r4, #0]
 80045b0:	e7dc      	b.n	800456c <_malloc_r+0xb0>
 80045b2:	605b      	str	r3, [r3, #4]
 80045b4:	deff      	udf	#255	; 0xff
 80045b6:	bf00      	nop
 80045b8:	20004214 	.word	0x20004214

080045bc <__malloc_lock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_lock+0x8>)
 80045be:	f7ff bf0e 	b.w	80043de <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	20004210 	.word	0x20004210

080045c8 <__malloc_unlock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_unlock+0x8>)
 80045ca:	f7ff bf09 	b.w	80043e0 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	20004210 	.word	0x20004210

080045d4 <__sfputc_r>:
 80045d4:	6893      	ldr	r3, [r2, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	b410      	push	{r4}
 80045dc:	6093      	str	r3, [r2, #8]
 80045de:	da08      	bge.n	80045f2 <__sfputc_r+0x1e>
 80045e0:	6994      	ldr	r4, [r2, #24]
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	db01      	blt.n	80045ea <__sfputc_r+0x16>
 80045e6:	290a      	cmp	r1, #10
 80045e8:	d103      	bne.n	80045f2 <__sfputc_r+0x1e>
 80045ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ee:	f7ff bde8 	b.w	80041c2 <__swbuf_r>
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	1c58      	adds	r0, r3, #1
 80045f6:	6010      	str	r0, [r2, #0]
 80045f8:	7019      	strb	r1, [r3, #0]
 80045fa:	4608      	mov	r0, r1
 80045fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004600:	4770      	bx	lr

08004602 <__sfputs_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	4614      	mov	r4, r2
 800460a:	18d5      	adds	r5, r2, r3
 800460c:	42ac      	cmp	r4, r5
 800460e:	d101      	bne.n	8004614 <__sfputs_r+0x12>
 8004610:	2000      	movs	r0, #0
 8004612:	e007      	b.n	8004624 <__sfputs_r+0x22>
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	463a      	mov	r2, r7
 800461a:	4630      	mov	r0, r6
 800461c:	f7ff ffda 	bl	80045d4 <__sfputc_r>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d1f3      	bne.n	800460c <__sfputs_r+0xa>
 8004624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004628 <_vfiprintf_r>:
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	460d      	mov	r5, r1
 800462e:	b09d      	sub	sp, #116	; 0x74
 8004630:	4614      	mov	r4, r2
 8004632:	4698      	mov	r8, r3
 8004634:	4606      	mov	r6, r0
 8004636:	b118      	cbz	r0, 8004640 <_vfiprintf_r+0x18>
 8004638:	6a03      	ldr	r3, [r0, #32]
 800463a:	b90b      	cbnz	r3, 8004640 <_vfiprintf_r+0x18>
 800463c:	f7ff fcda 	bl	8003ff4 <__sinit>
 8004640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004642:	07d9      	lsls	r1, r3, #31
 8004644:	d405      	bmi.n	8004652 <_vfiprintf_r+0x2a>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	059a      	lsls	r2, r3, #22
 800464a:	d402      	bmi.n	8004652 <_vfiprintf_r+0x2a>
 800464c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800464e:	f7ff fec6 	bl	80043de <__retarget_lock_acquire_recursive>
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	d501      	bpl.n	800465c <_vfiprintf_r+0x34>
 8004658:	692b      	ldr	r3, [r5, #16]
 800465a:	b99b      	cbnz	r3, 8004684 <_vfiprintf_r+0x5c>
 800465c:	4629      	mov	r1, r5
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff fdec 	bl	800423c <__swsetup_r>
 8004664:	b170      	cbz	r0, 8004684 <_vfiprintf_r+0x5c>
 8004666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004668:	07dc      	lsls	r4, r3, #31
 800466a:	d504      	bpl.n	8004676 <_vfiprintf_r+0x4e>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	b01d      	add	sp, #116	; 0x74
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	0598      	lsls	r0, r3, #22
 800467a:	d4f7      	bmi.n	800466c <_vfiprintf_r+0x44>
 800467c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800467e:	f7ff feaf 	bl	80043e0 <__retarget_lock_release_recursive>
 8004682:	e7f3      	b.n	800466c <_vfiprintf_r+0x44>
 8004684:	2300      	movs	r3, #0
 8004686:	9309      	str	r3, [sp, #36]	; 0x24
 8004688:	2320      	movs	r3, #32
 800468a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800468e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004692:	2330      	movs	r3, #48	; 0x30
 8004694:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004848 <_vfiprintf_r+0x220>
 8004698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469c:	f04f 0901 	mov.w	r9, #1
 80046a0:	4623      	mov	r3, r4
 80046a2:	469a      	mov	sl, r3
 80046a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a8:	b10a      	cbz	r2, 80046ae <_vfiprintf_r+0x86>
 80046aa:	2a25      	cmp	r2, #37	; 0x25
 80046ac:	d1f9      	bne.n	80046a2 <_vfiprintf_r+0x7a>
 80046ae:	ebba 0b04 	subs.w	fp, sl, r4
 80046b2:	d00b      	beq.n	80046cc <_vfiprintf_r+0xa4>
 80046b4:	465b      	mov	r3, fp
 80046b6:	4622      	mov	r2, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffa1 	bl	8004602 <__sfputs_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	f000 80a9 	beq.w	8004818 <_vfiprintf_r+0x1f0>
 80046c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c8:	445a      	add	r2, fp
 80046ca:	9209      	str	r2, [sp, #36]	; 0x24
 80046cc:	f89a 3000 	ldrb.w	r3, [sl]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a1 	beq.w	8004818 <_vfiprintf_r+0x1f0>
 80046d6:	2300      	movs	r3, #0
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e0:	f10a 0a01 	add.w	sl, sl, #1
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ec:	931a      	str	r3, [sp, #104]	; 0x68
 80046ee:	4654      	mov	r4, sl
 80046f0:	2205      	movs	r2, #5
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	4854      	ldr	r0, [pc, #336]	; (8004848 <_vfiprintf_r+0x220>)
 80046f8:	f7fb fd8a 	bl	8000210 <memchr>
 80046fc:	9a04      	ldr	r2, [sp, #16]
 80046fe:	b9d8      	cbnz	r0, 8004738 <_vfiprintf_r+0x110>
 8004700:	06d1      	lsls	r1, r2, #27
 8004702:	bf44      	itt	mi
 8004704:	2320      	movmi	r3, #32
 8004706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470a:	0713      	lsls	r3, r2, #28
 800470c:	bf44      	itt	mi
 800470e:	232b      	movmi	r3, #43	; 0x2b
 8004710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004714:	f89a 3000 	ldrb.w	r3, [sl]
 8004718:	2b2a      	cmp	r3, #42	; 0x2a
 800471a:	d015      	beq.n	8004748 <_vfiprintf_r+0x120>
 800471c:	9a07      	ldr	r2, [sp, #28]
 800471e:	4654      	mov	r4, sl
 8004720:	2000      	movs	r0, #0
 8004722:	f04f 0c0a 	mov.w	ip, #10
 8004726:	4621      	mov	r1, r4
 8004728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472c:	3b30      	subs	r3, #48	; 0x30
 800472e:	2b09      	cmp	r3, #9
 8004730:	d94d      	bls.n	80047ce <_vfiprintf_r+0x1a6>
 8004732:	b1b0      	cbz	r0, 8004762 <_vfiprintf_r+0x13a>
 8004734:	9207      	str	r2, [sp, #28]
 8004736:	e014      	b.n	8004762 <_vfiprintf_r+0x13a>
 8004738:	eba0 0308 	sub.w	r3, r0, r8
 800473c:	fa09 f303 	lsl.w	r3, r9, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	9304      	str	r3, [sp, #16]
 8004744:	46a2      	mov	sl, r4
 8004746:	e7d2      	b.n	80046ee <_vfiprintf_r+0xc6>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	1d19      	adds	r1, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9103      	str	r1, [sp, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	bfbb      	ittet	lt
 8004754:	425b      	neglt	r3, r3
 8004756:	f042 0202 	orrlt.w	r2, r2, #2
 800475a:	9307      	strge	r3, [sp, #28]
 800475c:	9307      	strlt	r3, [sp, #28]
 800475e:	bfb8      	it	lt
 8004760:	9204      	strlt	r2, [sp, #16]
 8004762:	7823      	ldrb	r3, [r4, #0]
 8004764:	2b2e      	cmp	r3, #46	; 0x2e
 8004766:	d10c      	bne.n	8004782 <_vfiprintf_r+0x15a>
 8004768:	7863      	ldrb	r3, [r4, #1]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d134      	bne.n	80047d8 <_vfiprintf_r+0x1b0>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9203      	str	r2, [sp, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	f04f 33ff 	movlt.w	r3, #4294967295
 800477e:	3402      	adds	r4, #2
 8004780:	9305      	str	r3, [sp, #20]
 8004782:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004858 <_vfiprintf_r+0x230>
 8004786:	7821      	ldrb	r1, [r4, #0]
 8004788:	2203      	movs	r2, #3
 800478a:	4650      	mov	r0, sl
 800478c:	f7fb fd40 	bl	8000210 <memchr>
 8004790:	b138      	cbz	r0, 80047a2 <_vfiprintf_r+0x17a>
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	eba0 000a 	sub.w	r0, r0, sl
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	4082      	lsls	r2, r0
 800479c:	4313      	orrs	r3, r2
 800479e:	3401      	adds	r4, #1
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a6:	4829      	ldr	r0, [pc, #164]	; (800484c <_vfiprintf_r+0x224>)
 80047a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ac:	2206      	movs	r2, #6
 80047ae:	f7fb fd2f 	bl	8000210 <memchr>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d03f      	beq.n	8004836 <_vfiprintf_r+0x20e>
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <_vfiprintf_r+0x228>)
 80047b8:	bb1b      	cbnz	r3, 8004802 <_vfiprintf_r+0x1da>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	3307      	adds	r3, #7
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	3308      	adds	r3, #8
 80047c4:	9303      	str	r3, [sp, #12]
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	443b      	add	r3, r7
 80047ca:	9309      	str	r3, [sp, #36]	; 0x24
 80047cc:	e768      	b.n	80046a0 <_vfiprintf_r+0x78>
 80047ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d2:	460c      	mov	r4, r1
 80047d4:	2001      	movs	r0, #1
 80047d6:	e7a6      	b.n	8004726 <_vfiprintf_r+0xfe>
 80047d8:	2300      	movs	r3, #0
 80047da:	3401      	adds	r4, #1
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	4619      	mov	r1, r3
 80047e0:	f04f 0c0a 	mov.w	ip, #10
 80047e4:	4620      	mov	r0, r4
 80047e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ea:	3a30      	subs	r2, #48	; 0x30
 80047ec:	2a09      	cmp	r2, #9
 80047ee:	d903      	bls.n	80047f8 <_vfiprintf_r+0x1d0>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0c6      	beq.n	8004782 <_vfiprintf_r+0x15a>
 80047f4:	9105      	str	r1, [sp, #20]
 80047f6:	e7c4      	b.n	8004782 <_vfiprintf_r+0x15a>
 80047f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fc:	4604      	mov	r4, r0
 80047fe:	2301      	movs	r3, #1
 8004800:	e7f0      	b.n	80047e4 <_vfiprintf_r+0x1bc>
 8004802:	ab03      	add	r3, sp, #12
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	462a      	mov	r2, r5
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <_vfiprintf_r+0x22c>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	4630      	mov	r0, r6
 800480e:	f3af 8000 	nop.w
 8004812:	4607      	mov	r7, r0
 8004814:	1c78      	adds	r0, r7, #1
 8004816:	d1d6      	bne.n	80047c6 <_vfiprintf_r+0x19e>
 8004818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d405      	bmi.n	800482a <_vfiprintf_r+0x202>
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	059a      	lsls	r2, r3, #22
 8004822:	d402      	bmi.n	800482a <_vfiprintf_r+0x202>
 8004824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004826:	f7ff fddb 	bl	80043e0 <__retarget_lock_release_recursive>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	065b      	lsls	r3, r3, #25
 800482e:	f53f af1d 	bmi.w	800466c <_vfiprintf_r+0x44>
 8004832:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004834:	e71c      	b.n	8004670 <_vfiprintf_r+0x48>
 8004836:	ab03      	add	r3, sp, #12
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	462a      	mov	r2, r5
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <_vfiprintf_r+0x22c>)
 800483e:	a904      	add	r1, sp, #16
 8004840:	4630      	mov	r0, r6
 8004842:	f000 f879 	bl	8004938 <_printf_i>
 8004846:	e7e4      	b.n	8004812 <_vfiprintf_r+0x1ea>
 8004848:	08004ef4 	.word	0x08004ef4
 800484c:	08004efe 	.word	0x08004efe
 8004850:	00000000 	.word	0x00000000
 8004854:	08004603 	.word	0x08004603
 8004858:	08004efa 	.word	0x08004efa

0800485c <_printf_common>:
 800485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	4616      	mov	r6, r2
 8004862:	4699      	mov	r9, r3
 8004864:	688a      	ldr	r2, [r1, #8]
 8004866:	690b      	ldr	r3, [r1, #16]
 8004868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800486c:	4293      	cmp	r3, r2
 800486e:	bfb8      	it	lt
 8004870:	4613      	movlt	r3, r2
 8004872:	6033      	str	r3, [r6, #0]
 8004874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004878:	4607      	mov	r7, r0
 800487a:	460c      	mov	r4, r1
 800487c:	b10a      	cbz	r2, 8004882 <_printf_common+0x26>
 800487e:	3301      	adds	r3, #1
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	0699      	lsls	r1, r3, #26
 8004886:	bf42      	ittt	mi
 8004888:	6833      	ldrmi	r3, [r6, #0]
 800488a:	3302      	addmi	r3, #2
 800488c:	6033      	strmi	r3, [r6, #0]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	f015 0506 	ands.w	r5, r5, #6
 8004894:	d106      	bne.n	80048a4 <_printf_common+0x48>
 8004896:	f104 0a19 	add.w	sl, r4, #25
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	6832      	ldr	r2, [r6, #0]
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	dc26      	bgt.n	80048f2 <_printf_common+0x96>
 80048a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048a8:	1e13      	subs	r3, r2, #0
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	0692      	lsls	r2, r2, #26
 80048b2:	d42b      	bmi.n	800490c <_printf_common+0xb0>
 80048b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b8:	4649      	mov	r1, r9
 80048ba:	4638      	mov	r0, r7
 80048bc:	47c0      	blx	r8
 80048be:	3001      	adds	r0, #1
 80048c0:	d01e      	beq.n	8004900 <_printf_common+0xa4>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	f003 0306 	and.w	r3, r3, #6
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	bf02      	ittt	eq
 80048ce:	68e5      	ldreq	r5, [r4, #12]
 80048d0:	6833      	ldreq	r3, [r6, #0]
 80048d2:	1aed      	subeq	r5, r5, r3
 80048d4:	68a3      	ldr	r3, [r4, #8]
 80048d6:	bf0c      	ite	eq
 80048d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048dc:	2500      	movne	r5, #0
 80048de:	4293      	cmp	r3, r2
 80048e0:	bfc4      	itt	gt
 80048e2:	1a9b      	subgt	r3, r3, r2
 80048e4:	18ed      	addgt	r5, r5, r3
 80048e6:	2600      	movs	r6, #0
 80048e8:	341a      	adds	r4, #26
 80048ea:	42b5      	cmp	r5, r6
 80048ec:	d11a      	bne.n	8004924 <_printf_common+0xc8>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e008      	b.n	8004904 <_printf_common+0xa8>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4652      	mov	r2, sl
 80048f6:	4649      	mov	r1, r9
 80048f8:	4638      	mov	r0, r7
 80048fa:	47c0      	blx	r8
 80048fc:	3001      	adds	r0, #1
 80048fe:	d103      	bne.n	8004908 <_printf_common+0xac>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004908:	3501      	adds	r5, #1
 800490a:	e7c6      	b.n	800489a <_printf_common+0x3e>
 800490c:	18e1      	adds	r1, r4, r3
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	2030      	movs	r0, #48	; 0x30
 8004912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004916:	4422      	add	r2, r4
 8004918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800491c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004920:	3302      	adds	r3, #2
 8004922:	e7c7      	b.n	80048b4 <_printf_common+0x58>
 8004924:	2301      	movs	r3, #1
 8004926:	4622      	mov	r2, r4
 8004928:	4649      	mov	r1, r9
 800492a:	4638      	mov	r0, r7
 800492c:	47c0      	blx	r8
 800492e:	3001      	adds	r0, #1
 8004930:	d0e6      	beq.n	8004900 <_printf_common+0xa4>
 8004932:	3601      	adds	r6, #1
 8004934:	e7d9      	b.n	80048ea <_printf_common+0x8e>
	...

08004938 <_printf_i>:
 8004938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	7e0f      	ldrb	r7, [r1, #24]
 800493e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004940:	2f78      	cmp	r7, #120	; 0x78
 8004942:	4691      	mov	r9, r2
 8004944:	4680      	mov	r8, r0
 8004946:	460c      	mov	r4, r1
 8004948:	469a      	mov	sl, r3
 800494a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800494e:	d807      	bhi.n	8004960 <_printf_i+0x28>
 8004950:	2f62      	cmp	r7, #98	; 0x62
 8004952:	d80a      	bhi.n	800496a <_printf_i+0x32>
 8004954:	2f00      	cmp	r7, #0
 8004956:	f000 80d4 	beq.w	8004b02 <_printf_i+0x1ca>
 800495a:	2f58      	cmp	r7, #88	; 0x58
 800495c:	f000 80c0 	beq.w	8004ae0 <_printf_i+0x1a8>
 8004960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004968:	e03a      	b.n	80049e0 <_printf_i+0xa8>
 800496a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800496e:	2b15      	cmp	r3, #21
 8004970:	d8f6      	bhi.n	8004960 <_printf_i+0x28>
 8004972:	a101      	add	r1, pc, #4	; (adr r1, 8004978 <_printf_i+0x40>)
 8004974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004978:	080049d1 	.word	0x080049d1
 800497c:	080049e5 	.word	0x080049e5
 8004980:	08004961 	.word	0x08004961
 8004984:	08004961 	.word	0x08004961
 8004988:	08004961 	.word	0x08004961
 800498c:	08004961 	.word	0x08004961
 8004990:	080049e5 	.word	0x080049e5
 8004994:	08004961 	.word	0x08004961
 8004998:	08004961 	.word	0x08004961
 800499c:	08004961 	.word	0x08004961
 80049a0:	08004961 	.word	0x08004961
 80049a4:	08004ae9 	.word	0x08004ae9
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	08004aa3 	.word	0x08004aa3
 80049b0:	08004961 	.word	0x08004961
 80049b4:	08004961 	.word	0x08004961
 80049b8:	08004b0b 	.word	0x08004b0b
 80049bc:	08004961 	.word	0x08004961
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004961 	.word	0x08004961
 80049c8:	08004961 	.word	0x08004961
 80049cc:	08004aab 	.word	0x08004aab
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	1d1a      	adds	r2, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	602a      	str	r2, [r5, #0]
 80049d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e0:	2301      	movs	r3, #1
 80049e2:	e09f      	b.n	8004b24 <_printf_i+0x1ec>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	0607      	lsls	r7, r0, #24
 80049ea:	f103 0104 	add.w	r1, r3, #4
 80049ee:	6029      	str	r1, [r5, #0]
 80049f0:	d501      	bpl.n	80049f6 <_printf_i+0xbe>
 80049f2:	681e      	ldr	r6, [r3, #0]
 80049f4:	e003      	b.n	80049fe <_printf_i+0xc6>
 80049f6:	0646      	lsls	r6, r0, #25
 80049f8:	d5fb      	bpl.n	80049f2 <_printf_i+0xba>
 80049fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	da03      	bge.n	8004a0a <_printf_i+0xd2>
 8004a02:	232d      	movs	r3, #45	; 0x2d
 8004a04:	4276      	negs	r6, r6
 8004a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a0a:	485a      	ldr	r0, [pc, #360]	; (8004b74 <_printf_i+0x23c>)
 8004a0c:	230a      	movs	r3, #10
 8004a0e:	e012      	b.n	8004a36 <_printf_i+0xfe>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	1d19      	adds	r1, r3, #4
 8004a16:	6029      	str	r1, [r5, #0]
 8004a18:	0605      	lsls	r5, r0, #24
 8004a1a:	d501      	bpl.n	8004a20 <_printf_i+0xe8>
 8004a1c:	681e      	ldr	r6, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <_printf_i+0xee>
 8004a20:	0641      	lsls	r1, r0, #25
 8004a22:	d5fb      	bpl.n	8004a1c <_printf_i+0xe4>
 8004a24:	881e      	ldrh	r6, [r3, #0]
 8004a26:	4853      	ldr	r0, [pc, #332]	; (8004b74 <_printf_i+0x23c>)
 8004a28:	2f6f      	cmp	r7, #111	; 0x6f
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2308      	moveq	r3, #8
 8004a2e:	230a      	movne	r3, #10
 8004a30:	2100      	movs	r1, #0
 8004a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a36:	6865      	ldr	r5, [r4, #4]
 8004a38:	60a5      	str	r5, [r4, #8]
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	bfa2      	ittt	ge
 8004a3e:	6821      	ldrge	r1, [r4, #0]
 8004a40:	f021 0104 	bicge.w	r1, r1, #4
 8004a44:	6021      	strge	r1, [r4, #0]
 8004a46:	b90e      	cbnz	r6, 8004a4c <_printf_i+0x114>
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	d04b      	beq.n	8004ae4 <_printf_i+0x1ac>
 8004a4c:	4615      	mov	r5, r2
 8004a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a52:	fb03 6711 	mls	r7, r3, r1, r6
 8004a56:	5dc7      	ldrb	r7, [r0, r7]
 8004a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a5c:	4637      	mov	r7, r6
 8004a5e:	42bb      	cmp	r3, r7
 8004a60:	460e      	mov	r6, r1
 8004a62:	d9f4      	bls.n	8004a4e <_printf_i+0x116>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d10b      	bne.n	8004a80 <_printf_i+0x148>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07de      	lsls	r6, r3, #31
 8004a6c:	d508      	bpl.n	8004a80 <_printf_i+0x148>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6861      	ldr	r1, [r4, #4]
 8004a72:	4299      	cmp	r1, r3
 8004a74:	bfde      	ittt	le
 8004a76:	2330      	movle	r3, #48	; 0x30
 8004a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a80:	1b52      	subs	r2, r2, r5
 8004a82:	6122      	str	r2, [r4, #16]
 8004a84:	f8cd a000 	str.w	sl, [sp]
 8004a88:	464b      	mov	r3, r9
 8004a8a:	aa03      	add	r2, sp, #12
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff fee4 	bl	800485c <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d14a      	bne.n	8004b2e <_printf_i+0x1f6>
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	b004      	add	sp, #16
 8004a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f043 0320 	orr.w	r3, r3, #32
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	4833      	ldr	r0, [pc, #204]	; (8004b78 <_printf_i+0x240>)
 8004aac:	2778      	movs	r7, #120	; 0x78
 8004aae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	6829      	ldr	r1, [r5, #0]
 8004ab6:	061f      	lsls	r7, r3, #24
 8004ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004abc:	d402      	bmi.n	8004ac4 <_printf_i+0x18c>
 8004abe:	065f      	lsls	r7, r3, #25
 8004ac0:	bf48      	it	mi
 8004ac2:	b2b6      	uxthmi	r6, r6
 8004ac4:	07df      	lsls	r7, r3, #31
 8004ac6:	bf48      	it	mi
 8004ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8004acc:	6029      	str	r1, [r5, #0]
 8004ace:	bf48      	it	mi
 8004ad0:	6023      	strmi	r3, [r4, #0]
 8004ad2:	b91e      	cbnz	r6, 8004adc <_printf_i+0x1a4>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	2310      	movs	r3, #16
 8004ade:	e7a7      	b.n	8004a30 <_printf_i+0xf8>
 8004ae0:	4824      	ldr	r0, [pc, #144]	; (8004b74 <_printf_i+0x23c>)
 8004ae2:	e7e4      	b.n	8004aae <_printf_i+0x176>
 8004ae4:	4615      	mov	r5, r2
 8004ae6:	e7bd      	b.n	8004a64 <_printf_i+0x12c>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	6826      	ldr	r6, [r4, #0]
 8004aec:	6961      	ldr	r1, [r4, #20]
 8004aee:	1d18      	adds	r0, r3, #4
 8004af0:	6028      	str	r0, [r5, #0]
 8004af2:	0635      	lsls	r5, r6, #24
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	d501      	bpl.n	8004afc <_printf_i+0x1c4>
 8004af8:	6019      	str	r1, [r3, #0]
 8004afa:	e002      	b.n	8004b02 <_printf_i+0x1ca>
 8004afc:	0670      	lsls	r0, r6, #25
 8004afe:	d5fb      	bpl.n	8004af8 <_printf_i+0x1c0>
 8004b00:	8019      	strh	r1, [r3, #0]
 8004b02:	2300      	movs	r3, #0
 8004b04:	6123      	str	r3, [r4, #16]
 8004b06:	4615      	mov	r5, r2
 8004b08:	e7bc      	b.n	8004a84 <_printf_i+0x14c>
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	602a      	str	r2, [r5, #0]
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	6862      	ldr	r2, [r4, #4]
 8004b14:	2100      	movs	r1, #0
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7fb fb7a 	bl	8000210 <memchr>
 8004b1c:	b108      	cbz	r0, 8004b22 <_printf_i+0x1ea>
 8004b1e:	1b40      	subs	r0, r0, r5
 8004b20:	6060      	str	r0, [r4, #4]
 8004b22:	6863      	ldr	r3, [r4, #4]
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	2300      	movs	r3, #0
 8004b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2c:	e7aa      	b.n	8004a84 <_printf_i+0x14c>
 8004b2e:	6923      	ldr	r3, [r4, #16]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4649      	mov	r1, r9
 8004b34:	4640      	mov	r0, r8
 8004b36:	47d0      	blx	sl
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d0ad      	beq.n	8004a98 <_printf_i+0x160>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	079b      	lsls	r3, r3, #30
 8004b40:	d413      	bmi.n	8004b6a <_printf_i+0x232>
 8004b42:	68e0      	ldr	r0, [r4, #12]
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	4298      	cmp	r0, r3
 8004b48:	bfb8      	it	lt
 8004b4a:	4618      	movlt	r0, r3
 8004b4c:	e7a6      	b.n	8004a9c <_printf_i+0x164>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4632      	mov	r2, r6
 8004b52:	4649      	mov	r1, r9
 8004b54:	4640      	mov	r0, r8
 8004b56:	47d0      	blx	sl
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d09d      	beq.n	8004a98 <_printf_i+0x160>
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	9903      	ldr	r1, [sp, #12]
 8004b62:	1a5b      	subs	r3, r3, r1
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	dcf2      	bgt.n	8004b4e <_printf_i+0x216>
 8004b68:	e7eb      	b.n	8004b42 <_printf_i+0x20a>
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	f104 0619 	add.w	r6, r4, #25
 8004b70:	e7f5      	b.n	8004b5e <_printf_i+0x226>
 8004b72:	bf00      	nop
 8004b74:	08004f05 	.word	0x08004f05
 8004b78:	08004f16 	.word	0x08004f16

08004b7c <__sflush_r>:
 8004b7c:	898a      	ldrh	r2, [r1, #12]
 8004b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b82:	4605      	mov	r5, r0
 8004b84:	0710      	lsls	r0, r2, #28
 8004b86:	460c      	mov	r4, r1
 8004b88:	d458      	bmi.n	8004c3c <__sflush_r+0xc0>
 8004b8a:	684b      	ldr	r3, [r1, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dc05      	bgt.n	8004b9c <__sflush_r+0x20>
 8004b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dc02      	bgt.n	8004b9c <__sflush_r+0x20>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b9e:	2e00      	cmp	r6, #0
 8004ba0:	d0f9      	beq.n	8004b96 <__sflush_r+0x1a>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ba8:	682f      	ldr	r7, [r5, #0]
 8004baa:	6a21      	ldr	r1, [r4, #32]
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	d032      	beq.n	8004c16 <__sflush_r+0x9a>
 8004bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	075a      	lsls	r2, r3, #29
 8004bb6:	d505      	bpl.n	8004bc4 <__sflush_r+0x48>
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	1ac0      	subs	r0, r0, r3
 8004bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bbe:	b10b      	cbz	r3, 8004bc4 <__sflush_r+0x48>
 8004bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bc2:	1ac0      	subs	r0, r0, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bca:	6a21      	ldr	r1, [r4, #32]
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b0      	blx	r6
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	d106      	bne.n	8004be4 <__sflush_r+0x68>
 8004bd6:	6829      	ldr	r1, [r5, #0]
 8004bd8:	291d      	cmp	r1, #29
 8004bda:	d82b      	bhi.n	8004c34 <__sflush_r+0xb8>
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <__sflush_r+0x108>)
 8004bde:	410a      	asrs	r2, r1
 8004be0:	07d6      	lsls	r6, r2, #31
 8004be2:	d427      	bmi.n	8004c34 <__sflush_r+0xb8>
 8004be4:	2200      	movs	r2, #0
 8004be6:	6062      	str	r2, [r4, #4]
 8004be8:	04d9      	lsls	r1, r3, #19
 8004bea:	6922      	ldr	r2, [r4, #16]
 8004bec:	6022      	str	r2, [r4, #0]
 8004bee:	d504      	bpl.n	8004bfa <__sflush_r+0x7e>
 8004bf0:	1c42      	adds	r2, r0, #1
 8004bf2:	d101      	bne.n	8004bf8 <__sflush_r+0x7c>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b903      	cbnz	r3, 8004bfa <__sflush_r+0x7e>
 8004bf8:	6560      	str	r0, [r4, #84]	; 0x54
 8004bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bfc:	602f      	str	r7, [r5, #0]
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	d0c9      	beq.n	8004b96 <__sflush_r+0x1a>
 8004c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d002      	beq.n	8004c10 <__sflush_r+0x94>
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fbea 	bl	80043e4 <_free_r>
 8004c10:	2000      	movs	r0, #0
 8004c12:	6360      	str	r0, [r4, #52]	; 0x34
 8004c14:	e7c0      	b.n	8004b98 <__sflush_r+0x1c>
 8004c16:	2301      	movs	r3, #1
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b0      	blx	r6
 8004c1c:	1c41      	adds	r1, r0, #1
 8004c1e:	d1c8      	bne.n	8004bb2 <__sflush_r+0x36>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0c5      	beq.n	8004bb2 <__sflush_r+0x36>
 8004c26:	2b1d      	cmp	r3, #29
 8004c28:	d001      	beq.n	8004c2e <__sflush_r+0xb2>
 8004c2a:	2b16      	cmp	r3, #22
 8004c2c:	d101      	bne.n	8004c32 <__sflush_r+0xb6>
 8004c2e:	602f      	str	r7, [r5, #0]
 8004c30:	e7b1      	b.n	8004b96 <__sflush_r+0x1a>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	e7ad      	b.n	8004b98 <__sflush_r+0x1c>
 8004c3c:	690f      	ldr	r7, [r1, #16]
 8004c3e:	2f00      	cmp	r7, #0
 8004c40:	d0a9      	beq.n	8004b96 <__sflush_r+0x1a>
 8004c42:	0793      	lsls	r3, r2, #30
 8004c44:	680e      	ldr	r6, [r1, #0]
 8004c46:	bf08      	it	eq
 8004c48:	694b      	ldreq	r3, [r1, #20]
 8004c4a:	600f      	str	r7, [r1, #0]
 8004c4c:	bf18      	it	ne
 8004c4e:	2300      	movne	r3, #0
 8004c50:	eba6 0807 	sub.w	r8, r6, r7
 8004c54:	608b      	str	r3, [r1, #8]
 8004c56:	f1b8 0f00 	cmp.w	r8, #0
 8004c5a:	dd9c      	ble.n	8004b96 <__sflush_r+0x1a>
 8004c5c:	6a21      	ldr	r1, [r4, #32]
 8004c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c60:	4643      	mov	r3, r8
 8004c62:	463a      	mov	r2, r7
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b0      	blx	r6
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	dc06      	bgt.n	8004c7a <__sflush_r+0xfe>
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e78e      	b.n	8004b98 <__sflush_r+0x1c>
 8004c7a:	4407      	add	r7, r0
 8004c7c:	eba8 0800 	sub.w	r8, r8, r0
 8004c80:	e7e9      	b.n	8004c56 <__sflush_r+0xda>
 8004c82:	bf00      	nop
 8004c84:	dfbffffe 	.word	0xdfbffffe

08004c88 <_fflush_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	690b      	ldr	r3, [r1, #16]
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	b913      	cbnz	r3, 8004c98 <_fflush_r+0x10>
 8004c92:	2500      	movs	r5, #0
 8004c94:	4628      	mov	r0, r5
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	b118      	cbz	r0, 8004ca2 <_fflush_r+0x1a>
 8004c9a:	6a03      	ldr	r3, [r0, #32]
 8004c9c:	b90b      	cbnz	r3, 8004ca2 <_fflush_r+0x1a>
 8004c9e:	f7ff f9a9 	bl	8003ff4 <__sinit>
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f3      	beq.n	8004c92 <_fflush_r+0xa>
 8004caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cac:	07d0      	lsls	r0, r2, #31
 8004cae:	d404      	bmi.n	8004cba <_fflush_r+0x32>
 8004cb0:	0599      	lsls	r1, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_fflush_r+0x32>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb6:	f7ff fb92 	bl	80043de <__retarget_lock_acquire_recursive>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7ff ff5d 	bl	8004b7c <__sflush_r>
 8004cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc4:	07da      	lsls	r2, r3, #31
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	d4e4      	bmi.n	8004c94 <_fflush_r+0xc>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d4e1      	bmi.n	8004c94 <_fflush_r+0xc>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f7ff fb85 	bl	80043e0 <__retarget_lock_release_recursive>
 8004cd6:	e7dd      	b.n	8004c94 <_fflush_r+0xc>

08004cd8 <__swhatbuf_r>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	460c      	mov	r4, r1
 8004cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	b096      	sub	sp, #88	; 0x58
 8004ce4:	4615      	mov	r5, r2
 8004ce6:	461e      	mov	r6, r3
 8004ce8:	da0d      	bge.n	8004d06 <__swhatbuf_r+0x2e>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	bf0c      	ite	eq
 8004cf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004cfa:	2340      	movne	r3, #64	; 0x40
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	6031      	str	r1, [r6, #0]
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	b016      	add	sp, #88	; 0x58
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	466a      	mov	r2, sp
 8004d08:	f000 f848 	bl	8004d9c <_fstat_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	dbec      	blt.n	8004cea <__swhatbuf_r+0x12>
 8004d10:	9901      	ldr	r1, [sp, #4]
 8004d12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d1a:	4259      	negs	r1, r3
 8004d1c:	4159      	adcs	r1, r3
 8004d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d22:	e7eb      	b.n	8004cfc <__swhatbuf_r+0x24>

08004d24 <__smakebuf_r>:
 8004d24:	898b      	ldrh	r3, [r1, #12]
 8004d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d28:	079d      	lsls	r5, r3, #30
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	d507      	bpl.n	8004d40 <__smakebuf_r+0x1c>
 8004d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	6163      	str	r3, [r4, #20]
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	ab01      	add	r3, sp, #4
 8004d42:	466a      	mov	r2, sp
 8004d44:	f7ff ffc8 	bl	8004cd8 <__swhatbuf_r>
 8004d48:	9900      	ldr	r1, [sp, #0]
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f7ff fbb5 	bl	80044bc <_malloc_r>
 8004d52:	b948      	cbnz	r0, 8004d68 <__smakebuf_r+0x44>
 8004d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d58:	059a      	lsls	r2, r3, #22
 8004d5a:	d4ef      	bmi.n	8004d3c <__smakebuf_r+0x18>
 8004d5c:	f023 0303 	bic.w	r3, r3, #3
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	e7e3      	b.n	8004d30 <__smakebuf_r+0xc>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	6020      	str	r0, [r4, #0]
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	9b00      	ldr	r3, [sp, #0]
 8004d74:	6163      	str	r3, [r4, #20]
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	6120      	str	r0, [r4, #16]
 8004d7a:	b15b      	cbz	r3, 8004d94 <__smakebuf_r+0x70>
 8004d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f81d 	bl	8004dc0 <_isatty_r>
 8004d86:	b128      	cbz	r0, 8004d94 <__smakebuf_r+0x70>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	431d      	orrs	r5, r3
 8004d98:	81a5      	strh	r5, [r4, #12]
 8004d9a:	e7cf      	b.n	8004d3c <__smakebuf_r+0x18>

08004d9c <_fstat_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d07      	ldr	r5, [pc, #28]	; (8004dbc <_fstat_r+0x20>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	f7fb ffee 	bl	8000d8a <_fstat>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d102      	bne.n	8004db8 <_fstat_r+0x1c>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	b103      	cbz	r3, 8004db8 <_fstat_r+0x1c>
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000420c 	.word	0x2000420c

08004dc0 <_isatty_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d06      	ldr	r5, [pc, #24]	; (8004ddc <_isatty_r+0x1c>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	f7fb ffed 	bl	8000daa <_isatty>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_isatty_r+0x1a>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_isatty_r+0x1a>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	2000420c 	.word	0x2000420c

08004de0 <_sbrk_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d06      	ldr	r5, [pc, #24]	; (8004dfc <_sbrk_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	f7fb fff6 	bl	8000ddc <_sbrk>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_sbrk_r+0x1a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_sbrk_r+0x1a>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	2000420c 	.word	0x2000420c

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
