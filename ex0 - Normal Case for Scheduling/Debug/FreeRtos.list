
FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f58  08005f58  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f60  08005f60  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b1c  2000006c  08005fd4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08005fd4  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ee6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030fc  00000000  00000000  00033fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e70  00000000  00000000  00038398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000475d  00000000  00000000  00039208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ebe  00000000  00000000  0003d965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8ea  00000000  00000000  00052823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055f0  00000000  00000000  0012d110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00132700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e18 	.word	0x08005e18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005e18 	.word	0x08005e18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb2e 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f83c 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f89a 	bl	80006f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f001 fe60 	bl	8002280 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x58>)
 80005c2:	f001 ff3f 	bl	8002444 <osMutexNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <main+0x5c>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80005cc:	4a0f      	ldr	r2, [pc, #60]	; (800060c <main+0x60>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <main+0x64>)
 80005d2:	f001 fe9f 	bl	8002314 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <main+0x68>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <main+0x6c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0x70>)
 80005e2:	f001 fe97 	bl	8002314 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <main+0x74>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <main+0x78>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0x7c>)
 80005f2:	f001 fe8f 	bl	8002314 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <main+0x80>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f001 fe64 	bl	80022c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x54>
 8000602:	bf00      	nop
 8000604:	08005efc 	.word	0x08005efc
 8000608:	20000094 	.word	0x20000094
 800060c:	08005e90 	.word	0x08005e90
 8000610:	080007b1 	.word	0x080007b1
 8000614:	20000088 	.word	0x20000088
 8000618:	08005eb4 	.word	0x08005eb4
 800061c:	080007e1 	.word	0x080007e1
 8000620:	2000008c 	.word	0x2000008c
 8000624:	08005ed8 	.word	0x08005ed8
 8000628:	08000811 	.word	0x08000811
 800062c:	20000090 	.word	0x20000090

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fdbb 	bl	80051ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xb8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xbc>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f867 	bl	8001778 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 f8d8 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd70 	bl	80011b4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 f8c3 	bl	8000864 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xb4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xb4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xb4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0xb8>)
 8000760:	f000 fd0e 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xbc>)
 800077a:	f000 fb6d 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077e:	2320      	movs	r3, #32
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xb8>)
 8000796:	f000 fb5f 	bl	8000e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800

080007b0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  int c;
	  	    	 	 c = Task1_Profiler++;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <StartTask1+0x28>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	b2d1      	uxtb	r1, r2
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <StartTask1+0x28>)
 80007c2:	7011      	strb	r1, [r2, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
	  	    	 	 printf("Task-1 %d \n", c);
 80007c6:	68f9      	ldr	r1, [r7, #12]
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <StartTask1+0x2c>)
 80007ca:	f004 fca1 	bl	8005110 <iprintf>
	  	    	 	if (c >= 3) {
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	ddf1      	ble.n	80007b8 <StartTask1+0x8>
	  	    	 		  osThreadExit();
 80007d4:	f001 fe30 	bl	8002438 <osThreadExit>
 80007d8:	20000098 	.word	0x20000098
 80007dc:	08005e54 	.word	0x08005e54

080007e0 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	// Get the current time
  for(;;)
  {
	    	 int c;
	    	 	 c = Task2_Profiler++;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <StartTask2+0x28>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	b2d1      	uxtb	r1, r2
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <StartTask2+0x28>)
 80007f2:	7011      	strb	r1, [r2, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
	    	 	 printf("Task-2 %d \n", c);
 80007f6:	68f9      	ldr	r1, [r7, #12]
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <StartTask2+0x2c>)
 80007fa:	f004 fc89 	bl	8005110 <iprintf>
	    	 	if (c >= 3) {
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b02      	cmp	r3, #2
 8000802:	ddf1      	ble.n	80007e8 <StartTask2+0x8>
	    	 		  osThreadExit();
 8000804:	f001 fe18 	bl	8002438 <osThreadExit>
 8000808:	20000099 	.word	0x20000099
 800080c:	08005e60 	.word	0x08005e60

08000810 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	    	  int c;
	    	  	  c = Task3_Profiler++;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <StartTask3+0x28>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	b2d1      	uxtb	r1, r2
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <StartTask3+0x28>)
 8000822:	7011      	strb	r1, [r2, #0]
 8000824:	60fb      	str	r3, [r7, #12]
	    	  	  printf("Task-3 %d \n", c);
 8000826:	68f9      	ldr	r1, [r7, #12]
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <StartTask3+0x2c>)
 800082a:	f004 fc71 	bl	8005110 <iprintf>
	    	  	 if (c >= 3) {
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b02      	cmp	r3, #2
 8000832:	ddf1      	ble.n	8000818 <StartTask3+0x8>
	    	  		     	  osThreadExit();
 8000834:	f001 fe00 	bl	8002438 <osThreadExit>
 8000838:	2000009a 	.word	0x2000009a
 800083c:	08005e6c 	.word	0x08005e6c

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f9ff 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40001000 	.word	0x40001000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_MspInit+0x54>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x54>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_MspInit+0x54>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_MspInit+0x54>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	210f      	movs	r1, #15
 80008b2:	f06f 0001 	mvn.w	r0, #1
 80008b6:	f000 faa5 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	; 0x38
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a32      	ldr	r2, [pc, #200]	; (80009ac <HAL_InitTick+0xe4>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <HAL_InitTick+0xe4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fd5e 	bl	80013c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090e:	f000 fd43 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 8000912:	6378      	str	r0, [r7, #52]	; 0x34
 8000914:	e004      	b.n	8000920 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000916:	f000 fd3f 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 800091a:	4603      	mov	r3, r0
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <HAL_InitTick+0xe8>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9b      	lsrs	r3, r3, #18
 800092a:	3b01      	subs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <HAL_InitTick+0xec>)
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <HAL_InitTick+0xf0>)
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_InitTick+0xec>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <HAL_InitTick+0xec>)
 800093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000940:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_InitTick+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_InitTick+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <HAL_InitTick+0xec>)
 8000956:	f001 f9ad 	bl	8001cb4 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <HAL_InitTick+0xec>)
 800096a:	f001 f9fd 	bl	8001d68 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000978:	2b00      	cmp	r3, #0
 800097a:	d111      	bne.n	80009a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f000 fa5d 	bl	8000e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d808      	bhi.n	800099a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2036      	movs	r0, #54	; 0x36
 800098e:	f000 fa39 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_InitTick+0xf4>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e002      	b.n	80009a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3738      	adds	r7, #56	; 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	2000009c 	.word	0x2000009c
 80009b8:	40001000 	.word	0x40001000
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM6_DAC_IRQHandler+0x10>)
 80009f2:	f001 fa29 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000009c 	.word	0x2000009c

08000a00 <ITM_SendChar>:

#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN   *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1<<24);
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <ITM_SendChar+0x48>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <ITM_SendChar+0x48>)
 8000a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a14:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1<<0);
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <ITM_SendChar+0x4c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <ITM_SendChar+0x4c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6013      	str	r3, [r2, #0]

	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a22:	bf00      	nop
 8000a24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f8      	beq.n	8000a24 <ITM_SendChar+0x24>

	ITM_STIMULUS_PORT0 = ch;
 8000a32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	6013      	str	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000edfc 	.word	0xe000edfc
 8000a4c:	e0000e00 	.word	0xe0000e00

08000a50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffab 	bl	8000a00 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
  }
  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	605a      	str	r2, [r3, #4]
  return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f004 fb7c 	bl	8005258 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200000e4 	.word	0x200000e4
 8000b94:	20004b88 	.word	0x20004b88

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f004 fb3b 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcdd 	bl	80005ac <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c00:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 8000c04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c08:	20004b88 	.word	0x20004b88

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8d8 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f7ff fe42 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe14 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	200000e8 	.word	0x200000e8

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000e8 	.word	0x200000e8

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e165      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8154 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d130      	bne.n	8000f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ae 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_GPIO_Init+0x304>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x308>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x30c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x310>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x314>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x318>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x20a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x31c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x206>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x202>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x304>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_GPIO_Init+0x324>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a31      	ldr	r2, [pc, #196]	; (800117c <HAL_GPIO_Init+0x324>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x324>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_GPIO_Init+0x324>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_GPIO_Init+0x324>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_GPIO_Init+0x324>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae96 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0cc      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d90c      	bls.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0b8      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800122a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	494d      	ldr	r1, [pc, #308]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d044      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d119      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	2b03      	cmp	r3, #3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e067      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f023 0203 	bic.w	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4934      	ldr	r1, [pc, #208]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a4:	f7ff fcea 	bl	8000c7c <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff fce6 	bl	8000c7c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e04f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 020c 	and.w	r2, r3, #12
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d1eb      	bne.n	80012ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d20c      	bcs.n	80012fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e032      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800133a:	f000 f873 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 800133e:	4602      	mov	r2, r0
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	490a      	ldr	r1, [pc, #40]	; (8001374 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	5ccb      	ldrb	r3, [r1, r3]
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fab4 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00
 8001370:	40023800 	.word	0x40023800
 8001374:	08005f0c 	.word	0x08005f0c
 8001378:	20000000 	.word	0x20000000
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_RCC_GetHCLKFreq+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000000 	.word	0x20000000

08001398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800139c:	f7ff fff0 	bl	8001380 <HAL_RCC_GetHCLKFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4903      	ldr	r1, [pc, #12]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08005f1c 	.word	0x08005f1c

080013c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	220f      	movs	r2, #15
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RCC_GetClockConfig+0x60>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 020f 	and.w	r2, r3, #15
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001428:	b0a6      	sub	sp, #152	; 0x98
 800142a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800144a:	4bc8      	ldr	r3, [pc, #800]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b0c      	cmp	r3, #12
 8001454:	f200 817e 	bhi.w	8001754 <HAL_RCC_GetSysClockFreq+0x330>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001495 	.word	0x08001495
 8001464:	08001755 	.word	0x08001755
 8001468:	08001755 	.word	0x08001755
 800146c:	08001755 	.word	0x08001755
 8001470:	0800149d 	.word	0x0800149d
 8001474:	08001755 	.word	0x08001755
 8001478:	08001755 	.word	0x08001755
 800147c:	08001755 	.word	0x08001755
 8001480:	080014a5 	.word	0x080014a5
 8001484:	08001755 	.word	0x08001755
 8001488:	08001755 	.word	0x08001755
 800148c:	08001755 	.word	0x08001755
 8001490:	0800160f 	.word	0x0800160f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4bb6      	ldr	r3, [pc, #728]	; (8001770 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800149a:	e15f      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4bb5      	ldr	r3, [pc, #724]	; (8001774 <HAL_RCC_GetSysClockFreq+0x350>)
 800149e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80014a2:	e15b      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a4:	4bb1      	ldr	r3, [pc, #708]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	4bae      	ldr	r3, [pc, #696]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d031      	beq.n	8001520 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4bab      	ldr	r3, [pc, #684]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80014c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ce:	663b      	str	r3, [r7, #96]	; 0x60
 80014d0:	2300      	movs	r3, #0
 80014d2:	667b      	str	r3, [r7, #100]	; 0x64
 80014d4:	4ba7      	ldr	r3, [pc, #668]	; (8001774 <HAL_RCC_GetSysClockFreq+0x350>)
 80014d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80014da:	462a      	mov	r2, r5
 80014dc:	fb03 f202 	mul.w	r2, r3, r2
 80014e0:	2300      	movs	r3, #0
 80014e2:	4621      	mov	r1, r4
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	4aa2      	ldr	r2, [pc, #648]	; (8001774 <HAL_RCC_GetSysClockFreq+0x350>)
 80014ec:	4621      	mov	r1, r4
 80014ee:	fba1 1202 	umull	r1, r2, r1, r2
 80014f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80014f4:	460a      	mov	r2, r1
 80014f6:	67ba      	str	r2, [r7, #120]	; 0x78
 80014f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014fa:	4413      	add	r3, r2
 80014fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001502:	2200      	movs	r2, #0
 8001504:	65bb      	str	r3, [r7, #88]	; 0x58
 8001506:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001508:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800150c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001510:	f7fe fece 	bl	80002b0 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4613      	mov	r3, r2
 800151a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800151e:	e064      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	2200      	movs	r2, #0
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
 800152a:	657a      	str	r2, [r7, #84]	; 0x54
 800152c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800152e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
 8001534:	2300      	movs	r3, #0
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001538:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800153c:	4622      	mov	r2, r4
 800153e:	462b      	mov	r3, r5
 8001540:	f04f 0000 	mov.w	r0, #0
 8001544:	f04f 0100 	mov.w	r1, #0
 8001548:	0159      	lsls	r1, r3, #5
 800154a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800154e:	0150      	lsls	r0, r2, #5
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4621      	mov	r1, r4
 8001556:	1a51      	subs	r1, r2, r1
 8001558:	6139      	str	r1, [r7, #16]
 800155a:	4629      	mov	r1, r5
 800155c:	eb63 0301 	sbc.w	r3, r3, r1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800156e:	4659      	mov	r1, fp
 8001570:	018b      	lsls	r3, r1, #6
 8001572:	4651      	mov	r1, sl
 8001574:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001578:	4651      	mov	r1, sl
 800157a:	018a      	lsls	r2, r1, #6
 800157c:	4651      	mov	r1, sl
 800157e:	ebb2 0801 	subs.w	r8, r2, r1
 8001582:	4659      	mov	r1, fp
 8001584:	eb63 0901 	sbc.w	r9, r3, r1
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001598:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800159c:	4690      	mov	r8, r2
 800159e:	4699      	mov	r9, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	eb18 0303 	adds.w	r3, r8, r3
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	462b      	mov	r3, r5
 80015aa:	eb49 0303 	adc.w	r3, r9, r3
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015bc:	4629      	mov	r1, r5
 80015be:	028b      	lsls	r3, r1, #10
 80015c0:	4621      	mov	r1, r4
 80015c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c6:	4621      	mov	r1, r4
 80015c8:	028a      	lsls	r2, r1, #10
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d2:	2200      	movs	r2, #0
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
 80015d6:	647a      	str	r2, [r7, #68]	; 0x44
 80015d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015dc:	f7fe fe68 	bl	80002b0 <__aeabi_uldivmod>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4613      	mov	r3, r2
 80015e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	3301      	adds	r3, #1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80015fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800160c:	e0a6      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d02a      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	099b      	lsrs	r3, r3, #6
 800162c:	2200      	movs	r2, #0
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001638:	2100      	movs	r1, #0
 800163a:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_GetSysClockFreq+0x350>)
 800163c:	fb03 f201 	mul.w	r2, r3, r1
 8001640:	2300      	movs	r3, #0
 8001642:	fb00 f303 	mul.w	r3, r0, r3
 8001646:	4413      	add	r3, r2
 8001648:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_RCC_GetSysClockFreq+0x350>)
 800164a:	fba0 1202 	umull	r1, r2, r0, r2
 800164e:	677a      	str	r2, [r7, #116]	; 0x74
 8001650:	460a      	mov	r2, r1
 8001652:	673a      	str	r2, [r7, #112]	; 0x70
 8001654:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001656:	4413      	add	r3, r2
 8001658:	677b      	str	r3, [r7, #116]	; 0x74
 800165a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800165e:	2200      	movs	r2, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
 8001662:	637a      	str	r2, [r7, #52]	; 0x34
 8001664:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001668:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800166c:	f7fe fe20 	bl	80002b0 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4613      	mov	r3, r2
 8001676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800167a:	e05b      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
 8001686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001698:	4642      	mov	r2, r8
 800169a:	464b      	mov	r3, r9
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	0159      	lsls	r1, r3, #5
 80016a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016aa:	0150      	lsls	r0, r2, #5
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4641      	mov	r1, r8
 80016b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016b6:	4649      	mov	r1, r9
 80016b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016d0:	ebb2 040a 	subs.w	r4, r2, sl
 80016d4:	eb63 050b 	sbc.w	r5, r3, fp
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	00eb      	lsls	r3, r5, #3
 80016e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016e6:	00e2      	lsls	r2, r4, #3
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	4643      	mov	r3, r8
 80016ee:	18e3      	adds	r3, r4, r3
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	464b      	mov	r3, r9
 80016f4:	eb45 0303 	adc.w	r3, r5, r3
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001706:	4629      	mov	r1, r5
 8001708:	028b      	lsls	r3, r1, #10
 800170a:	4621      	mov	r1, r4
 800170c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001710:	4621      	mov	r1, r4
 8001712:	028a      	lsls	r2, r1, #10
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800171c:	2200      	movs	r2, #0
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	61fa      	str	r2, [r7, #28]
 8001722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001726:	f7fe fdc3 	bl	80002b0 <__aeabi_uldivmod>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4613      	mov	r3, r2
 8001730:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_GetSysClockFreq+0x348>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	0f1b      	lsrs	r3, r3, #28
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001742:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001752:	e003      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800175a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001760:	4618      	mov	r0, r3
 8001762:	3798      	adds	r7, #152	; 0x98
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	00f42400 	.word	0x00f42400
 8001774:	017d7840 	.word	0x017d7840

08001778 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e28d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8083 	beq.w	800189e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001798:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017a4:	4b91      	ldr	r3, [pc, #580]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017b0:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x124>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e25a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x90>
 80017fa:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7b      	ldr	r2, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xcc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0xb4>
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xcc>
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6b      	ldr	r2, [pc, #428]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fa16 	bl	8000c7c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fa12 	bl	8000c7c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e21f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xdc>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fa02 	bl	8000c7c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f9fe 	bl	8000c7c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e20b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x104>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06f      	beq.n	800198a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d017      	beq.n	80018e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018c2:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x186>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1d3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4937      	ldr	r1, [pc, #220]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f9ab 	bl	8000c7c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff f9a7 	bl	8000c7c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1b4      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4925      	ldr	r1, [pc, #148]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_OscConfig+0x278>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f98a 	bl	8000c7c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff f986 	bl	8000c7c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e193      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d036      	beq.n	8001a04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff f96a 	bl	8000c7c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff f966 	bl	8000c7c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e173      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_OscConfig+0x274>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x234>
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff f953 	bl	8000c7c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e00e      	b.n	80019f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff f94f 	bl	8000c7c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d907      	bls.n	80019f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e15c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470000 	.word	0x42470000
 80019f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ea      	bne.n	80019da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8097 	beq.w	8001b40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a7e      	ldr	r2, [pc, #504]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b7c      	ldr	r3, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f90f 	bl	8000c7c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f90b 	bl	8000c7c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e118      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x31e>
 8001a88:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x358>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x340>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x358>
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a59      	ldr	r2, [pc, #356]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f8d0 	bl	8000c7c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f8cc 	bl	8000c7c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0d7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0ee      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x368>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff f8ba 	bl	8000c7c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f8b6 	bl	8000c7c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0c1      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80ad 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d145      	bne.n	8001bea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f88a 	bl	8000c7c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f886 	bl	8000c7c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e093      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	071b      	lsls	r3, r3, #28
 8001bb6:	491b      	ldr	r1, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f85b 	bl	8000c7c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff f857 	bl	8000c7c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e064      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x452>
 8001be8:	e05c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f844 	bl	8000c7c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f840 	bl	8000c7c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x480>
 8001c16:	e045      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e040      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x538>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d129      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d122      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d119      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f839 	bl	8001d52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f9c0 	bl	8002078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e04e      	b.n	8001e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d022      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001daa:	d01d      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d018      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00e      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d111      	bne.n	8001e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d010      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	e007      	b.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40001800 	.word	0x40001800

08001e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0202 	mvn.w	r2, #2
 8001e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8d2 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8c4 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8d5 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0204 	mvn.w	r2, #4
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8ac 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f89e 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8af 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0208 	mvn.w	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f886 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f878 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f889 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d020      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0210 	mvn.w	r2, #16
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2208      	movs	r2, #8
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f860 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f852 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f863 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0201 	mvn.w	r2, #1
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fc46 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f906 	bl	80021e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f834 	bl	8002064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0220 	mvn.w	r2, #32
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8d8 	bl	80021d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <TIM_Base_SetConfig+0x12c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002096:	d00f      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a43      	ldr	r2, [pc, #268]	; (80021a8 <TIM_Base_SetConfig+0x130>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00b      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a42      	ldr	r2, [pc, #264]	; (80021ac <TIM_Base_SetConfig+0x134>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a41      	ldr	r2, [pc, #260]	; (80021b0 <TIM_Base_SetConfig+0x138>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <TIM_Base_SetConfig+0x13c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d108      	bne.n	80020ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <TIM_Base_SetConfig+0x12c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d8:	d027      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a32      	ldr	r2, [pc, #200]	; (80021a8 <TIM_Base_SetConfig+0x130>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d023      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a31      	ldr	r2, [pc, #196]	; (80021ac <TIM_Base_SetConfig+0x134>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <TIM_Base_SetConfig+0x138>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <TIM_Base_SetConfig+0x13c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d017      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <TIM_Base_SetConfig+0x140>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <TIM_Base_SetConfig+0x144>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <TIM_Base_SetConfig+0x148>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <TIM_Base_SetConfig+0x14c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <TIM_Base_SetConfig+0x150>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <TIM_Base_SetConfig+0x154>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <TIM_Base_SetConfig+0x12c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_Base_SetConfig+0xf8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <TIM_Base_SetConfig+0x13c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f023 0201 	bic.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
  }
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	40001800 	.word	0x40001800
 80021c8:	40001c00 	.word	0x40001c00
 80021cc:	40002000 	.word	0x40002000

080021d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <__NVIC_SetPriority>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Handler+0x1c>)
 8002252:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002254:	f001 fe32 	bl	8003ebc <xTaskGetSchedulerState>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800225e:	f002 fc1b 	bl	8004a98 <xPortSysTickHandler>
  }
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002270:	2100      	movs	r1, #0
 8002272:	f06f 0004 	mvn.w	r0, #4
 8002276:	f7ff ffbf 	bl	80021f8 <__NVIC_SetPriority>
#endif
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002286:	f3ef 8305 	mrs	r3, IPSR
 800228a:	603b      	str	r3, [r7, #0]
  return(result);
 800228c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002292:	f06f 0305 	mvn.w	r3, #5
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	e00c      	b.n	80022b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <osKernelInitialize+0x44>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <osKernelInitialize+0x44>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e002      	b.n	80022b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	200000ec 	.word	0x200000ec

080022c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ce:	f3ef 8305 	mrs	r3, IPSR
 80022d2:	603b      	str	r3, [r7, #0]
  return(result);
 80022d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80022da:	f06f 0305 	mvn.w	r3, #5
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	e010      	b.n	8002304 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <osKernelStart+0x48>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d109      	bne.n	80022fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022ea:	f7ff ffbf 	bl	800226c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <osKernelStart+0x48>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022f4:	f001 f99a 	bl	800362c <vTaskStartScheduler>
      stat = osOK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	e002      	b.n	8002304 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200000ec 	.word	0x200000ec

08002314 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af04      	add	r7, sp, #16
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002324:	f3ef 8305 	mrs	r3, IPSR
 8002328:	617b      	str	r3, [r7, #20]
  return(result);
 800232a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800232c:	2b00      	cmp	r3, #0
 800232e:	d17e      	bne.n	800242e <osThreadNew+0x11a>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d07b      	beq.n	800242e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800233a:	2318      	movs	r3, #24
 800233c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d045      	beq.n	80023da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <osThreadNew+0x48>
        name = attr->name;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <osThreadNew+0x6e>
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b38      	cmp	r3, #56	; 0x38
 8002374:	d805      	bhi.n	8002382 <osThreadNew+0x6e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <osThreadNew+0x72>
        return (NULL);
 8002382:	2300      	movs	r3, #0
 8002384:	e054      	b.n	8002430 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <osThreadNew+0xa8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b5b      	cmp	r3, #91	; 0x5b
 80023a4:	d90a      	bls.n	80023bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <osThreadNew+0xa8>
        mem = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e010      	b.n	80023de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <osThreadNew+0xca>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <osThreadNew+0xca>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <osThreadNew+0xca>
          mem = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e001      	b.n	80023de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d110      	bne.n	8002406 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023ec:	9202      	str	r2, [sp, #8]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6a3a      	ldr	r2, [r7, #32]
 80023f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 ff02 	bl	8003204 <xTaskCreateStatic>
 8002400:	4603      	mov	r3, r0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e013      	b.n	800242e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d110      	bne.n	800242e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	b29a      	uxth	r2, r3
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 ff4d 	bl	80032be <xTaskCreate>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <osThreadNew+0x11a>
            hTask = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800242e:	693b      	ldr	r3, [r7, #16]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800243c:	2000      	movs	r0, #0
 800243e:	f001 f883 	bl	8003548 <vTaskDelete>
#endif
  for (;;);
 8002442:	e7fe      	b.n	8002442 <osThreadExit+0xa>

08002444 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002450:	f3ef 8305 	mrs	r3, IPSR
 8002454:	60bb      	str	r3, [r7, #8]
  return(result);
 8002456:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002458:	2b00      	cmp	r3, #0
 800245a:	d174      	bne.n	8002546 <osMutexNew+0x102>
    if (attr != NULL) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <osMutexNew+0x26>
      type = attr->attr_bits;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e001      	b.n	800246e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <osMutexNew+0x3a>
      rmtx = 1U;
 8002478:	2301      	movs	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e001      	b.n	8002482 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d15c      	bne.n	8002546 <osMutexNew+0x102>
      mem = -1;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <osMutexNew+0x6a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b4f      	cmp	r3, #79	; 0x4f
 80024a6:	d902      	bls.n	80024ae <osMutexNew+0x6a>
          mem = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e00c      	b.n	80024c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <osMutexNew+0x84>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <osMutexNew+0x84>
            mem = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e001      	b.n	80024c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d112      	bne.n	80024f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4619      	mov	r1, r3
 80024da:	2004      	movs	r0, #4
 80024dc:	f000 fa8f 	bl	80029fe <xQueueCreateMutexStatic>
 80024e0:	61f8      	str	r0, [r7, #28]
 80024e2:	e016      	b.n	8002512 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4619      	mov	r1, r3
 80024ea:	2001      	movs	r0, #1
 80024ec:	f000 fa87 	bl	80029fe <xQueueCreateMutexStatic>
 80024f0:	61f8      	str	r0, [r7, #28]
 80024f2:	e00e      	b.n	8002512 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10b      	bne.n	8002512 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002500:	2004      	movs	r0, #4
 8002502:	f000 fa64 	bl	80029ce <xQueueCreateMutex>
 8002506:	61f8      	str	r0, [r7, #28]
 8002508:	e003      	b.n	8002512 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800250a:	2001      	movs	r0, #1
 800250c:	f000 fa5f 	bl	80029ce <xQueueCreateMutex>
 8002510:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00c      	beq.n	8002532 <osMutexNew+0xee>
        if (attr != NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <osMutexNew+0xe2>
          name = attr->name;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e001      	b.n	800252a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	69f8      	ldr	r0, [r7, #28]
 800252e:	f000 fe0b 	bl	8003148 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <osMutexNew+0x102>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002546:	69fb      	ldr	r3, [r7, #28]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <vApplicationGetIdleTaskMemory+0x2c>)
 8002560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <vApplicationGetIdleTaskMemory+0x30>)
 8002566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200000f0 	.word	0x200000f0
 8002580:	2000014c 	.word	0x2000014c

08002584 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002594:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <vApplicationGetTimerTaskMemory+0x30>)
 800259a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	2000034c 	.word	0x2000034c
 80025b4:	200003a8 	.word	0x200003a8

080025b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 0208 	add.w	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0208 	add.w	r2, r3, #8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f103 0208 	add.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d103      	bne.n	800267a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e00c      	b.n	8002694 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3308      	adds	r3, #8
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e002      	b.n	8002688 <vListInsert+0x2e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d2f6      	bcs.n	8002682 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6852      	ldr	r2, [r2, #4]
 80026ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d103      	bne.n	8002700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800274a:	f002 f913 	bl	8004974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	441a      	add	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	3b01      	subs	r3, #1
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	441a      	add	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d114      	bne.n	80027ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01a      	beq.n	80027de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3310      	adds	r3, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 f9c7 	bl	8003b40 <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <xQueueGenericReset+0xcc>)
 80027ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	e009      	b.n	80027de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3310      	adds	r3, #16
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fef2 	bl	80025b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3324      	adds	r3, #36	; 0x24
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff feed 	bl	80025b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027de:	f002 f8f9 	bl	80049d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08e      	sub	sp, #56	; 0x38
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <xQueueGenericCreateStatic+0x52>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <xQueueGenericCreateStatic+0x56>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericCreateStatic+0x58>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	623b      	str	r3, [r7, #32]
}
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <xQueueGenericCreateStatic+0x7e>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <xQueueGenericCreateStatic+0x82>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueGenericCreateStatic+0x84>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61fb      	str	r3, [r7, #28]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800288e:	2350      	movs	r3, #80	; 0x50
 8002890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b50      	cmp	r3, #80	; 0x50
 8002896:	d00a      	beq.n	80028ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61bb      	str	r3, [r7, #24]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f83f 	bl	8002954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueGenericCreate+0x2a>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	613b      	str	r3, [r7, #16]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3350      	adds	r3, #80	; 0x50
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f94d 	bl	8004bb8 <pvPortMalloc>
 800291e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3350      	adds	r3, #80	; 0x50
 800292e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f805 	bl	8002954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800294a:	69bb      	ldr	r3, [r7, #24]
	}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e002      	b.n	8002976 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002982:	2101      	movs	r1, #1
 8002984:	69b8      	ldr	r0, [r7, #24]
 8002986:	f7ff fecb 	bl	8002720 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80029ba:	2300      	movs	r3, #0
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f837 	bl	8002a34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6939      	ldr	r1, [r7, #16]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff7a 	bl	80028e0 <xQueueGenericCreate>
 80029ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff ffd3 	bl	800299a <prvInitialiseMutex>

		return xNewQueue;
 80029f4:	68fb      	ldr	r3, [r7, #12]
	}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b088      	sub	sp, #32
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	4603      	mov	r3, r0
 8002a06:	6039      	str	r1, [r7, #0]
 8002a08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6939      	ldr	r1, [r7, #16]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7ff fee7 	bl	80027f0 <xQueueGenericCreateStatic>
 8002a22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff ffb8 	bl	800299a <prvInitialiseMutex>

		return xNewQueue;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
	}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	; 0x38
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xQueueGenericSend+0x32>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <xQueueGenericSend+0x40>
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <xQueueGenericSend+0x44>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <xQueueGenericSend+0x46>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <xQueueGenericSend+0x60>
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d103      	bne.n	8002aa2 <xQueueGenericSend+0x6e>
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <xQueueGenericSend+0x72>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueGenericSend+0x74>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	623b      	str	r3, [r7, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac2:	f001 f9fb 	bl	8003ebc <xTaskGetSchedulerState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <xQueueGenericSend+0x9e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <xQueueGenericSend+0xa2>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericSend+0xa4>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	61fb      	str	r3, [r7, #28]
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af2:	f001 ff3f 	bl	8004974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <xQueueGenericSend+0xd4>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d129      	bne.n	8002b5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0e:	f000 fa0b 	bl	8002f28 <prvCopyDataToQueue>
 8002b12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f001 f80d 	bl	8003b40 <xTaskRemoveFromEventList>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <xQueueGenericSend+0x1f8>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	e00a      	b.n	8002b54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <xQueueGenericSend+0x1f8>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b54:	f001 ff3e 	bl	80049d4 <vPortExitCritical>
				return pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e063      	b.n	8002c24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b62:	f001 ff37 	bl	80049d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e05c      	b.n	8002c24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f847 	bl	8003c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7e:	f001 ff29 	bl	80049d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b82:	f000 fdb9 	bl	80036f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b86:	f001 fef5 	bl	8004974 <vPortEnterCritical>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <xQueueGenericSend+0x16c>
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSend+0x182>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb6:	f001 ff0d 	bl	80049d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bba:	1d3a      	adds	r2, r7, #4
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f836 	bl	8003c34 <xTaskCheckForTimeOut>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d124      	bne.n	8002c18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd0:	f000 faa2 	bl	8003118 <prvIsQueueFull>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d018      	beq.n	8002c0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	3310      	adds	r3, #16
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 ff5c 	bl	8003aa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bea:	f000 fa2d 	bl	8003048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bee:	f000 fd91 	bl	8003714 <xTaskResumeAll>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f af7c 	bne.w	8002af2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <xQueueGenericSend+0x1f8>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	e772      	b.n	8002af2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0e:	f000 fa1b 	bl	8003048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c12:	f000 fd7f 	bl	8003714 <xTaskResumeAll>
 8002c16:	e76c      	b.n	8002af2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1a:	f000 fa15 	bl	8003048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c1e:	f000 fd79 	bl	8003714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3738      	adds	r7, #56	; 0x38
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b090      	sub	sp, #64	; 0x40
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <xQueueGenericSendFromISR+0x3c>
 8002c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <xQueueGenericSendFromISR+0x40>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <xQueueGenericSendFromISR+0x42>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d103      	bne.n	8002c9a <xQueueGenericSendFromISR+0x6a>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <xQueueGenericSendFromISR+0x6e>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <xQueueGenericSendFromISR+0x70>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	623b      	str	r3, [r7, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cba:	f001 ff3d 	bl	8004b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	61fa      	str	r2, [r7, #28]
 8002cd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <xQueueGenericSendFromISR+0xbc>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d12f      	bne.n	8002d4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d02:	f000 f911 	bl	8002f28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d112      	bne.n	8002d36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	3324      	adds	r3, #36	; 0x24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 ff0f 	bl	8003b40 <xTaskRemoveFromEventList>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e007      	b.n	8002d46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	b25a      	sxtb	r2, r3
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d46:	2301      	movs	r3, #1
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d4a:	e001      	b.n	8002d50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3740      	adds	r7, #64	; 0x40
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <xQueueReceive+0x30>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	623b      	str	r3, [r7, #32]
}
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <xQueueReceive+0x3e>
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <xQueueReceive+0x42>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueReceive+0x44>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <xQueueReceive+0x5e>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	61fb      	str	r3, [r7, #28]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc6:	f001 f879 	bl	8003ebc <xTaskGetSchedulerState>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <xQueueReceive+0x6e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueReceive+0x72>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueReceive+0x74>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueReceive+0x8e>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61bb      	str	r3, [r7, #24]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df6:	f001 fdbd 	bl	8004974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01f      	beq.n	8002e46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e0a:	f000 f8f7 	bl	8002ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00f      	beq.n	8002e3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	3310      	adds	r3, #16
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fe8c 	bl	8003b40 <xTaskRemoveFromEventList>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <xQueueReceive+0x1bc>)
 8002e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e3e:	f001 fdc9 	bl	80049d4 <vPortExitCritical>
				return pdPASS;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e069      	b.n	8002f1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4c:	f001 fdc2 	bl	80049d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e062      	b.n	8002f1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fed2 	bl	8003c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e68:	f001 fdb4 	bl	80049d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6c:	f000 fc44 	bl	80036f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e70:	f001 fd80 	bl	8004974 <vPortEnterCritical>
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d103      	bne.n	8002e8a <xQueueReceive+0x122>
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <xQueueReceive+0x138>
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea0:	f001 fd98 	bl	80049d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea4:	1d3a      	adds	r2, r7, #4
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fec1 	bl	8003c34 <xTaskCheckForTimeOut>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d123      	bne.n	8002f00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eba:	f000 f917 	bl	80030ec <prvIsQueueEmpty>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d017      	beq.n	8002ef4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fde7 	bl	8003aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed4:	f000 f8b8 	bl	8003048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ed8:	f000 fc1c 	bl	8003714 <xTaskResumeAll>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d189      	bne.n	8002df6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <xQueueReceive+0x1bc>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e780      	b.n	8002df6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef6:	f000 f8a7 	bl	8003048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efa:	f000 fc0b 	bl	8003714 <xTaskResumeAll>
 8002efe:	e77a      	b.n	8002df6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f02:	f000 f8a1 	bl	8003048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f06:	f000 fc05 	bl	8003714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0c:	f000 f8ee 	bl	80030ec <prvIsQueueEmpty>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f43f af6f 	beq.w	8002df6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3730      	adds	r7, #48	; 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d14d      	bne.n	8002fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 ffd0 	bl	8003ef8 <xTaskPriorityDisinherit>
 8002f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e043      	b.n	8002fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d119      	bne.n	8002f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	f002 f99d 	bl	80052b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	441a      	add	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d32b      	bcc.n	8002fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	e026      	b.n	8002fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68d8      	ldr	r0, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	f002 f983 	bl	80052b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	425b      	negs	r3, r3
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d105      	bne.n	8002fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ff2:	697b      	ldr	r3, [r7, #20]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	441a      	add	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d303      	bcc.n	8003030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68d9      	ldr	r1, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	461a      	mov	r2, r3
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f002 f939 	bl	80052b2 <memcpy>
	}
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003050:	f001 fc90 	bl	8004974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800305c:	e011      	b.n	8003082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	; 0x24
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd68 	bl	8003b40 <xTaskRemoveFromEventList>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003076:	f000 fe3f 	bl	8003cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3b01      	subs	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	dce9      	bgt.n	800305e <prvUnlockQueue+0x16>
 800308a:	e000      	b.n	800308e <prvUnlockQueue+0x46>
					break;
 800308c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003096:	f001 fc9d 	bl	80049d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800309a:	f001 fc6b 	bl	8004974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a6:	e011      	b.n	80030cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d012      	beq.n	80030d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3310      	adds	r3, #16
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd43 	bl	8003b40 <xTaskRemoveFromEventList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030c0:	f000 fe1a 	bl	8003cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	dce9      	bgt.n	80030a8 <prvUnlockQueue+0x60>
 80030d4:	e000      	b.n	80030d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030e0:	f001 fc78 	bl	80049d4 <vPortExitCritical>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f4:	f001 fc3e 	bl	8004974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e001      	b.n	800310a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800310a:	f001 fc63 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003120:	f001 fc28 	bl	8004974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	429a      	cmp	r2, r3
 800312e:	d102      	bne.n	8003136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e001      	b.n	800313a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fc4b 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e014      	b.n	8003182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <vQueueAddToRegistry+0x50>)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003164:	490c      	ldr	r1, [pc, #48]	; (8003198 <vQueueAddToRegistry+0x50>)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <vQueueAddToRegistry+0x50>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800317a:	e006      	b.n	800318a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b07      	cmp	r3, #7
 8003186:	d9e7      	bls.n	8003158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200007a8 	.word	0x200007a8

0800319c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031ac:	f001 fbe2 	bl	8004974 <vPortEnterCritical>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d103      	bne.n	80031c6 <vQueueWaitForMessageRestricted+0x2a>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d103      	bne.n	80031dc <vQueueWaitForMessageRestricted+0x40>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031dc:	f001 fbfa 	bl	80049d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3324      	adds	r3, #36	; 0x24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fc79 	bl	8003ae8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff26 	bl	8003048 <prvUnlockQueue>
	}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af04      	add	r7, sp, #16
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	e7fe      	b.n	800322c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xTaskCreateStatic+0x46>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61fb      	str	r3, [r7, #28]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800324a:	235c      	movs	r3, #92	; 0x5c
 800324c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b5c      	cmp	r3, #92	; 0x5c
 8003252:	d00a      	beq.n	800326a <xTaskCreateStatic+0x66>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	61bb      	str	r3, [r7, #24]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800326a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01e      	beq.n	80032b0 <xTaskCreateStatic+0xac>
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800328a:	2300      	movs	r3, #0
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f850 	bl	8003348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032aa:	f000 f8dd 	bl	8003468 <prvAddNewTaskToReadyList>
 80032ae:	e001      	b.n	80032b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032b4:	697b      	ldr	r3, [r7, #20]
	}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08c      	sub	sp, #48	; 0x30
 80032c2:	af04      	add	r7, sp, #16
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fc70 	bl	8004bb8 <pvPortMalloc>
 80032d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032e0:	205c      	movs	r0, #92	; 0x5c
 80032e2:	f001 fc69 	bl	8004bb8 <pvPortMalloc>
 80032e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
 80032f4:	e005      	b.n	8003302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f001 fd2a 	bl	8004d50 <vPortFree>
 80032fc:	e001      	b.n	8003302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	2300      	movs	r3, #0
 8003314:	9303      	str	r3, [sp, #12]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f80e 	bl	8003348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800332c:	69f8      	ldr	r0, [r7, #28]
 800332e:	f000 f89b 	bl	8003468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e002      	b.n	800333e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
 800333c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800333e:	69bb      	ldr	r3, [r7, #24]
	}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	461a      	mov	r2, r3
 8003360:	21a5      	movs	r1, #165	; 0xa5
 8003362:	f001 ff2a 	bl	80051ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003370:	3b01      	subs	r3, #1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	617b      	str	r3, [r7, #20]
}
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01f      	beq.n	80033e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e012      	b.n	80033d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	7819      	ldrb	r1, [r3, #0]
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	3334      	adds	r3, #52	; 0x34
 80033bc:	460a      	mov	r2, r1
 80033be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	3301      	adds	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d9e9      	bls.n	80033ac <prvInitialiseNewTask+0x64>
 80033d8:	e000      	b.n	80033dc <prvInitialiseNewTask+0x94>
			{
				break;
 80033da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	e003      	b.n	80033ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	2b37      	cmp	r3, #55	; 0x37
 80033f2:	d901      	bls.n	80033f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033f4:	2337      	movs	r3, #55	; 0x37
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	2200      	movs	r2, #0
 8003408:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	3304      	adds	r3, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f8f2 	bl	80025f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	3318      	adds	r3, #24
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f8ed 	bl	80025f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	69b8      	ldr	r0, [r7, #24]
 8003448:	f001 f966 	bl	8004718 <pxPortInitialiseStack>
 800344c:	4602      	mov	r2, r0
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800345e:	bf00      	nop
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003470:	f001 fa80 	bl	8004974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003474:	4b2d      	ldr	r3, [pc, #180]	; (800352c <prvAddNewTaskToReadyList+0xc4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <prvAddNewTaskToReadyList+0xc4>)
 800347c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <prvAddNewTaskToReadyList+0xc8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <prvAddNewTaskToReadyList+0xc8>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <prvAddNewTaskToReadyList+0xc4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d110      	bne.n	80034b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003494:	f000 fc54 	bl	8003d40 <prvInitialiseTaskLists>
 8003498:	e00d      	b.n	80034b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <prvAddNewTaskToReadyList+0xcc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <prvAddNewTaskToReadyList+0xc8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d802      	bhi.n	80034b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <prvAddNewTaskToReadyList+0xc8>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <prvAddNewTaskToReadyList+0xd0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <prvAddNewTaskToReadyList+0xd0>)
 80034be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <prvAddNewTaskToReadyList+0xd0>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <prvAddNewTaskToReadyList+0xd4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d903      	bls.n	80034dc <prvAddNewTaskToReadyList+0x74>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <prvAddNewTaskToReadyList+0xd4>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <prvAddNewTaskToReadyList+0xd8>)
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff f88d 	bl	8002612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034f8:	f001 fa6c 	bl	80049d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <prvAddNewTaskToReadyList+0xcc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <prvAddNewTaskToReadyList+0xc8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	429a      	cmp	r2, r3
 8003510:	d207      	bcs.n	8003522 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <prvAddNewTaskToReadyList+0xdc>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000cbc 	.word	0x20000cbc
 8003530:	200007e8 	.word	0x200007e8
 8003534:	20000cc8 	.word	0x20000cc8
 8003538:	20000cd8 	.word	0x20000cd8
 800353c:	20000cc4 	.word	0x20000cc4
 8003540:	200007ec 	.word	0x200007ec
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003550:	f001 fa10 	bl	8004974 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <vTaskDelete+0x18>
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <vTaskDelete+0xc4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	e000      	b.n	8003562 <vTaskDelete+0x1a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f8af 	bl	80026cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3318      	adds	r3, #24
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f8a6 	bl	80026cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003580:	4b23      	ldr	r3, [pc, #140]	; (8003610 <vTaskDelete+0xc8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <vTaskDelete+0xc8>)
 8003588:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <vTaskDelete+0xc4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d10b      	bne.n	80035ac <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	481e      	ldr	r0, [pc, #120]	; (8003614 <vTaskDelete+0xcc>)
 800359c:	f7ff f839 	bl	8002612 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <vTaskDelete+0xd0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <vTaskDelete+0xd0>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e009      	b.n	80035c0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <vTaskDelete+0xd4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <vTaskDelete+0xd4>)
 80035b4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fc30 	bl	8003e1c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80035bc:	f000 fc5e 	bl	8003e7c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80035c0:	f001 fa08 	bl	80049d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <vTaskDelete+0xd8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <vTaskDelete+0xc4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d116      	bne.n	8003604 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <vTaskDelete+0xdc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <vTaskDelete+0xac>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	60bb      	str	r3, [r7, #8]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <vTaskDelete+0xe0>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200007e8 	.word	0x200007e8
 8003610:	20000cd8 	.word	0x20000cd8
 8003614:	20000c90 	.word	0x20000c90
 8003618:	20000ca4 	.word	0x20000ca4
 800361c:	20000cbc 	.word	0x20000cbc
 8003620:	20000cc8 	.word	0x20000cc8
 8003624:	20000ce4 	.word	0x20000ce4
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800363a:	463a      	mov	r2, r7
 800363c:	1d39      	adds	r1, r7, #4
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe ff84 	bl	8002550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	9202      	str	r2, [sp, #8]
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2300      	movs	r3, #0
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	460a      	mov	r2, r1
 800365a:	4921      	ldr	r1, [pc, #132]	; (80036e0 <vTaskStartScheduler+0xb4>)
 800365c:	4821      	ldr	r0, [pc, #132]	; (80036e4 <vTaskStartScheduler+0xb8>)
 800365e:	f7ff fdd1 	bl	8003204 <xTaskCreateStatic>
 8003662:	4603      	mov	r3, r0
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <vTaskStartScheduler+0xbc>)
 8003666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003668:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <vTaskStartScheduler+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003670:	2301      	movs	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e001      	b.n	800367a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d102      	bne.n	8003686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003680:	f000 fcfc 	bl	800407c <xTimerCreateTimerTask>
 8003684:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d116      	bne.n	80036ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	613b      	str	r3, [r7, #16]
}
 800369e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <vTaskStartScheduler+0xc0>)
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <vTaskStartScheduler+0xc4>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <vTaskStartScheduler+0xc8>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036b4:	f001 f8bc 	bl	8004830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036b8:	e00e      	b.n	80036d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d10a      	bne.n	80036d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	60fb      	str	r3, [r7, #12]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <vTaskStartScheduler+0xaa>
}
 80036d8:	bf00      	nop
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	08005e78 	.word	0x08005e78
 80036e4:	08003d11 	.word	0x08003d11
 80036e8:	20000ce0 	.word	0x20000ce0
 80036ec:	20000cdc 	.word	0x20000cdc
 80036f0:	20000cc8 	.word	0x20000cc8
 80036f4:	20000cc0 	.word	0x20000cc0

080036f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <vTaskSuspendAll+0x18>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	4a03      	ldr	r2, [pc, #12]	; (8003710 <vTaskSuspendAll+0x18>)
 8003704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20000ce4 	.word	0x20000ce4

08003714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <xTaskResumeAll+0x118>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <xTaskResumeAll+0x2c>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	603b      	str	r3, [r7, #0]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003740:	f001 f918 	bl	8004974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <xTaskResumeAll+0x118>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	4a38      	ldr	r2, [pc, #224]	; (800382c <xTaskResumeAll+0x118>)
 800374c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <xTaskResumeAll+0x118>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d162      	bne.n	800381c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <xTaskResumeAll+0x11c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d05e      	beq.n	800381c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800375e:	e02f      	b.n	80037c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <xTaskResumeAll+0x120>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3318      	adds	r3, #24
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ffad 	bl	80026cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3304      	adds	r3, #4
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe ffa8 	bl	80026cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <xTaskResumeAll+0x124>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d903      	bls.n	8003790 <xTaskResumeAll+0x7c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <xTaskResumeAll+0x124>)
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <xTaskResumeAll+0x128>)
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f7fe ff33 	bl	8002612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4b23      	ldr	r3, [pc, #140]	; (8003840 <xTaskResumeAll+0x12c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <xTaskResumeAll+0x130>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <xTaskResumeAll+0x120>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1cb      	bne.n	8003760 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ce:	f000 fb55 	bl	8003e7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <xTaskResumeAll+0x134>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d010      	beq.n	8003800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037de:	f000 f847 	bl	8003870 <xTaskIncrementTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <xTaskResumeAll+0x130>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f1      	bne.n	80037de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <xTaskResumeAll+0x134>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <xTaskResumeAll+0x130>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <xTaskResumeAll+0x138>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800381c:	f001 f8da 	bl	80049d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003820:	68bb      	ldr	r3, [r7, #8]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000ce4 	.word	0x20000ce4
 8003830:	20000cbc 	.word	0x20000cbc
 8003834:	20000c7c 	.word	0x20000c7c
 8003838:	20000cc4 	.word	0x20000cc4
 800383c:	200007ec 	.word	0x200007ec
 8003840:	200007e8 	.word	0x200007e8
 8003844:	20000cd0 	.word	0x20000cd0
 8003848:	20000ccc 	.word	0x20000ccc
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <xTaskGetTickCount+0x1c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800385c:	687b      	ldr	r3, [r7, #4]
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000cc0 	.word	0x20000cc0

08003870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387a:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <xTaskIncrementTick+0x148>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 808f 	bne.w	80039a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003884:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <xTaskIncrementTick+0x14c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800388c:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <xTaskIncrementTick+0x14c>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d120      	bne.n	80038da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003898:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <xTaskIncrementTick+0x150>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	603b      	str	r3, [r7, #0]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xTaskIncrementTick+0x46>
 80038b8:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <xTaskIncrementTick+0x150>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <xTaskIncrementTick+0x154>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a3f      	ldr	r2, [pc, #252]	; (80039c0 <xTaskIncrementTick+0x150>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <xTaskIncrementTick+0x154>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <xTaskIncrementTick+0x158>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <xTaskIncrementTick+0x158>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	f000 fad1 	bl	8003e7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038da:	4b3c      	ldr	r3, [pc, #240]	; (80039cc <xTaskIncrementTick+0x15c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d349      	bcc.n	8003978 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <xTaskIncrementTick+0x150>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <xTaskIncrementTick+0x15c>)
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295
 80038f4:	601a      	str	r2, [r3, #0]
					break;
 80038f6:	e03f      	b.n	8003978 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <xTaskIncrementTick+0x150>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	d203      	bcs.n	8003918 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003910:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <xTaskIncrementTick+0x15c>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003916:	e02f      	b.n	8003978 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fed5 	bl	80026cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3318      	adds	r3, #24
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fecc 	bl	80026cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <xTaskIncrementTick+0x160>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d903      	bls.n	8003948 <xTaskIncrementTick+0xd8>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <xTaskIncrementTick+0x160>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <xTaskIncrementTick+0x164>)
 8003956:	441a      	add	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7fe fe57 	bl	8002612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <xTaskIncrementTick+0x168>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	429a      	cmp	r2, r3
 8003970:	d3b8      	bcc.n	80038e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003976:	e7b5      	b.n	80038e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <xTaskIncrementTick+0x168>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	4915      	ldr	r1, [pc, #84]	; (80039d4 <xTaskIncrementTick+0x164>)
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d901      	bls.n	8003994 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <xTaskIncrementTick+0x16c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e004      	b.n	80039ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <xTaskIncrementTick+0x170>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3301      	adds	r3, #1
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <xTaskIncrementTick+0x170>)
 80039aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039ac:	697b      	ldr	r3, [r7, #20]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000ce4 	.word	0x20000ce4
 80039bc:	20000cc0 	.word	0x20000cc0
 80039c0:	20000c74 	.word	0x20000c74
 80039c4:	20000c78 	.word	0x20000c78
 80039c8:	20000cd4 	.word	0x20000cd4
 80039cc:	20000cdc 	.word	0x20000cdc
 80039d0:	20000cc4 	.word	0x20000cc4
 80039d4:	200007ec 	.word	0x200007ec
 80039d8:	200007e8 	.word	0x200007e8
 80039dc:	20000cd0 	.word	0x20000cd0
 80039e0:	20000ccc 	.word	0x20000ccc

080039e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <vTaskSwitchContext+0xa8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <vTaskSwitchContext+0xac>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039f8:	e041      	b.n	8003a7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80039fa:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <vTaskSwitchContext+0xac>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <vTaskSwitchContext+0xb0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e010      	b.n	8003a2a <vTaskSwitchContext+0x46>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	607b      	str	r3, [r7, #4]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <vTaskSwitchContext+0x3e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	491b      	ldr	r1, [pc, #108]	; (8003a98 <vTaskSwitchContext+0xb4>)
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0e4      	beq.n	8003a08 <vTaskSwitchContext+0x24>
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <vTaskSwitchContext+0xb4>)
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d104      	bne.n	8003a6e <vTaskSwitchContext+0x8a>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <vTaskSwitchContext+0xb8>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <vTaskSwitchContext+0xb0>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6013      	str	r3, [r2, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000ce4 	.word	0x20000ce4
 8003a90:	20000cd0 	.word	0x20000cd0
 8003a94:	20000cc4 	.word	0x20000cc4
 8003a98:	200007ec 	.word	0x200007ec
 8003a9c:	200007e8 	.word	0x200007e8

08003aa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <vTaskPlaceOnEventList+0x44>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3318      	adds	r3, #24
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe fdc3 	bl	800265a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f000 fa7c 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200007e8 	.word	0x200007e8

08003ae8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	617b      	str	r3, [r7, #20]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <vTaskPlaceOnEventListRestricted+0x54>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3318      	adds	r3, #24
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7fe fd7a 	bl	8002612 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
 8003b28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68b8      	ldr	r0, [r7, #8]
 8003b2e:	f000 fa51 	bl	8003fd4 <prvAddCurrentTaskToDelayedList>
	}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200007e8 	.word	0x200007e8

08003b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	60fb      	str	r3, [r7, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe fdab 	bl	80026cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <xTaskRemoveFromEventList+0xb0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11d      	bne.n	8003bba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fda2 	bl	80026cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <xTaskRemoveFromEventList+0xb4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d903      	bls.n	8003b9c <xTaskRemoveFromEventList+0x5c>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <xTaskRemoveFromEventList+0xb4>)
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <xTaskRemoveFromEventList+0xb8>)
 8003baa:	441a      	add	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7fe fd2d 	bl	8002612 <vListInsertEnd>
 8003bb8:	e005      	b.n	8003bc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	480e      	ldr	r0, [pc, #56]	; (8003bfc <xTaskRemoveFromEventList+0xbc>)
 8003bc2:	f7fe fd26 	bl	8002612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <xTaskRemoveFromEventList+0xc0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d905      	bls.n	8003be0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <xTaskRemoveFromEventList+0xc4>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e001      	b.n	8003be4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003be4:	697b      	ldr	r3, [r7, #20]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000ce4 	.word	0x20000ce4
 8003bf4:	20000cc4 	.word	0x20000cc4
 8003bf8:	200007ec 	.word	0x200007ec
 8003bfc:	20000c7c 	.word	0x20000c7c
 8003c00:	200007e8 	.word	0x200007e8
 8003c04:	20000cd0 	.word	0x20000cd0

08003c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <vTaskInternalSetTimeOutState+0x24>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <vTaskInternalSetTimeOutState+0x28>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	20000cd4 	.word	0x20000cd4
 8003c30:	20000cc0 	.word	0x20000cc0

08003c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	613b      	str	r3, [r7, #16]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60fb      	str	r3, [r7, #12]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c76:	f000 fe7d 	bl	8004974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <xTaskCheckForTimeOut+0xbc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d102      	bne.n	8003c9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e023      	b.n	8003ce2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <xTaskCheckForTimeOut+0xc0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d007      	beq.n	8003cb6 <xTaskCheckForTimeOut+0x82>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e015      	b.n	8003ce2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d20b      	bcs.n	8003cd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff9b 	bl	8003c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e004      	b.n	8003ce2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ce2:	f000 fe77 	bl	80049d4 <vPortExitCritical>

	return xReturn;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000cc0 	.word	0x20000cc0
 8003cf4:	20000cd4 	.word	0x20000cd4

08003cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <vTaskMissedYield+0x14>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	20000cd0 	.word	0x20000cd0

08003d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d18:	f000 f852 	bl	8003dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <prvIdleTask+0x28>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d9f9      	bls.n	8003d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <prvIdleTask+0x2c>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d34:	e7f0      	b.n	8003d18 <prvIdleTask+0x8>
 8003d36:	bf00      	nop
 8003d38:	200007ec 	.word	0x200007ec
 8003d3c:	e000ed04 	.word	0xe000ed04

08003d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e00c      	b.n	8003d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <prvInitialiseTaskLists+0x60>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fc2c 	bl	80025b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b37      	cmp	r3, #55	; 0x37
 8003d6a:	d9ef      	bls.n	8003d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d6c:	480d      	ldr	r0, [pc, #52]	; (8003da4 <prvInitialiseTaskLists+0x64>)
 8003d6e:	f7fe fc23 	bl	80025b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d72:	480d      	ldr	r0, [pc, #52]	; (8003da8 <prvInitialiseTaskLists+0x68>)
 8003d74:	f7fe fc20 	bl	80025b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d78:	480c      	ldr	r0, [pc, #48]	; (8003dac <prvInitialiseTaskLists+0x6c>)
 8003d7a:	f7fe fc1d 	bl	80025b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d7e:	480c      	ldr	r0, [pc, #48]	; (8003db0 <prvInitialiseTaskLists+0x70>)
 8003d80:	f7fe fc1a 	bl	80025b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d84:	480b      	ldr	r0, [pc, #44]	; (8003db4 <prvInitialiseTaskLists+0x74>)
 8003d86:	f7fe fc17 	bl	80025b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <prvInitialiseTaskLists+0x78>)
 8003d8c:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <prvInitialiseTaskLists+0x64>)
 8003d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvInitialiseTaskLists+0x7c>)
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <prvInitialiseTaskLists+0x68>)
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200007ec 	.word	0x200007ec
 8003da4:	20000c4c 	.word	0x20000c4c
 8003da8:	20000c60 	.word	0x20000c60
 8003dac:	20000c7c 	.word	0x20000c7c
 8003db0:	20000c90 	.word	0x20000c90
 8003db4:	20000ca8 	.word	0x20000ca8
 8003db8:	20000c74 	.word	0x20000c74
 8003dbc:	20000c78 	.word	0x20000c78

08003dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc6:	e019      	b.n	8003dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dc8:	f000 fdd4 	bl	8004974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <prvCheckTasksWaitingTermination+0x50>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fc77 	bl	80026cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <prvCheckTasksWaitingTermination+0x54>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <prvCheckTasksWaitingTermination+0x54>)
 8003de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003df2:	f000 fdef 	bl	80049d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f810 	bl	8003e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e1      	bne.n	8003dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000c90 	.word	0x20000c90
 8003e14:	20000cbc 	.word	0x20000cbc
 8003e18:	20000ca4 	.word	0x20000ca4

08003e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff8c 	bl	8004d50 <vPortFree>
				vPortFree( pxTCB );
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 ff89 	bl	8004d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e3e:	e018      	b.n	8003e72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d103      	bne.n	8003e52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 ff80 	bl	8004d50 <vPortFree>
	}
 8003e50:	e00f      	b.n	8003e72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d00a      	beq.n	8003e72 <prvDeleteTCB+0x56>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <prvDeleteTCB+0x54>
	}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <prvResetNextTaskUnblockTime+0x38>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e94:	e008      	b.n	8003ea8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <prvResetNextTaskUnblockTime+0x38>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	20000c74 	.word	0x20000c74
 8003eb8:	20000cdc 	.word	0x20000cdc

08003ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <xTaskGetSchedulerState+0x34>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e008      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <xTaskGetSchedulerState+0x38>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e001      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ee2:	687b      	ldr	r3, [r7, #4]
	}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000cc8 	.word	0x20000cc8
 8003ef4:	20000ce4 	.word	0x20000ce4

08003ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d056      	beq.n	8003fbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <xTaskPriorityDisinherit+0xd0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d00a      	beq.n	8003f2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	60fb      	str	r3, [r7, #12]
}
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60bb      	str	r3, [r7, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d02c      	beq.n	8003fbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d128      	bne.n	8003fbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fbac 	bl	80026cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <xTaskPriorityDisinherit+0xd4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d903      	bls.n	8003f9c <xTaskPriorityDisinherit+0xa4>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <xTaskPriorityDisinherit+0xd4>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <xTaskPriorityDisinherit+0xd8>)
 8003faa:	441a      	add	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fe fb2d 	bl	8002612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fbc:	697b      	ldr	r3, [r7, #20]
	}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200007e8 	.word	0x200007e8
 8003fcc:	20000cc4 	.word	0x20000cc4
 8003fd0:	200007ec 	.word	0x200007ec

08003fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fb6e 	bl	80026cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d10a      	bne.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4819      	ldr	r0, [pc, #100]	; (800406c <prvAddCurrentTaskToDelayedList+0x98>)
 8004008:	f7fe fb03 	bl	8002612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800400c:	e026      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	429a      	cmp	r2, r3
 8004024:	d209      	bcs.n	800403a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f7fe fb11 	bl	800265a <vListInsert>
}
 8004038:	e010      	b.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe fb07 	bl	800265a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d202      	bcs.n	800405c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000cc0 	.word	0x20000cc0
 8004068:	200007e8 	.word	0x200007e8
 800406c:	20000ca8 	.word	0x20000ca8
 8004070:	20000c78 	.word	0x20000c78
 8004074:	20000c74 	.word	0x20000c74
 8004078:	20000cdc 	.word	0x20000cdc

0800407c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004086:	f000 fb07 	bl	8004698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <xTimerCreateTimerTask+0x80>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d021      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0108 	add.w	r1, r7, #8
 80040a0:	f107 030c 	add.w	r3, r7, #12
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fa6d 	bl	8002584 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2302      	movs	r3, #2
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	460a      	mov	r2, r1
 80040bc:	4910      	ldr	r1, [pc, #64]	; (8004100 <xTimerCreateTimerTask+0x84>)
 80040be:	4811      	ldr	r0, [pc, #68]	; (8004104 <xTimerCreateTimerTask+0x88>)
 80040c0:	f7ff f8a0 	bl	8003204 <xTaskCreateStatic>
 80040c4:	4603      	mov	r3, r0
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <xTimerCreateTimerTask+0x8c>)
 80040c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTimerCreateTimerTask+0x8c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	613b      	str	r3, [r7, #16]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000d18 	.word	0x20000d18
 8004100:	08005e80 	.word	0x08005e80
 8004104:	08004241 	.word	0x08004241
 8004108:	20000d1c 	.word	0x20000d1c

0800410c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	623b      	str	r3, [r7, #32]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <xTimerGenericCommand+0x98>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	dc18      	bgt.n	8004186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004154:	f7ff feb2 	bl	8003ebc <xTaskGetSchedulerState>
 8004158:	4603      	mov	r3, r0
 800415a:	2b02      	cmp	r3, #2
 800415c:	d109      	bne.n	8004172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f107 0110 	add.w	r1, r7, #16
 8004166:	2300      	movs	r3, #0
 8004168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416a:	f7fe fc63 	bl	8002a34 <xQueueGenericSend>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24
 8004170:	e012      	b.n	8004198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	f107 0110 	add.w	r1, r7, #16
 800417a:	2300      	movs	r3, #0
 800417c:	2200      	movs	r2, #0
 800417e:	f7fe fc59 	bl	8002a34 <xQueueGenericSend>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24
 8004184:	e008      	b.n	8004198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <xTimerGenericCommand+0x98>)
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f107 0110 	add.w	r1, r7, #16
 800418e:	2300      	movs	r3, #0
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	f7fe fd4d 	bl	8002c30 <xQueueGenericSendFromISR>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000d18 	.word	0x20000d18

080041a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <prvProcessExpiredTimer+0x94>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fa83 	bl	80026cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d022      	beq.n	800421a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	18d1      	adds	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f000 f8d1 	bl	8004388 <prvInsertTimerInActiveList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	2100      	movs	r1, #0
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7ff ff88 	bl	800410c <xTimerGenericCommand>
 80041fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	4798      	blx	r3
}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000d10 	.word	0x20000d10

08004240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004248:	f107 0308 	add.w	r3, r7, #8
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f857 	bl	8004300 <prvGetNextExpireTime>
 8004252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f803 	bl	8004264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800425e:	f000 f8d5 	bl	800440c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004262:	e7f1      	b.n	8004248 <prvTimerTask+0x8>

08004264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800426e:	f7ff fa43 	bl	80036f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f866 	bl	8004348 <prvSampleTimeNow>
 800427c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d130      	bne.n	80042e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <prvProcessTimerOrBlockTask+0x3c>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	429a      	cmp	r2, r3
 8004290:	d806      	bhi.n	80042a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004292:	f7ff fa3f 	bl	8003714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff85 	bl	80041a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800429e:	e024      	b.n	80042ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <prvProcessTimerOrBlockTask+0x90>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <prvProcessTimerOrBlockTask+0x50>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x52>
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <prvProcessTimerOrBlockTask+0x94>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7fe ff69 	bl	800319c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042ca:	f7ff fa23 	bl	8003714 <xTaskResumeAll>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <prvProcessTimerOrBlockTask+0x98>)
 80042d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
}
 80042e4:	e001      	b.n	80042ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042e6:	f7ff fa15 	bl	8003714 <xTaskResumeAll>
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000d14 	.word	0x20000d14
 80042f8:	20000d18 	.word	0x20000d18
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <prvGetNextExpireTime+0x44>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <prvGetNextExpireTime+0x16>
 8004312:	2201      	movs	r2, #1
 8004314:	e000      	b.n	8004318 <prvGetNextExpireTime+0x18>
 8004316:	2200      	movs	r2, #0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <prvGetNextExpireTime+0x44>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e001      	b.n	8004334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000d10 	.word	0x20000d10

08004348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004350:	f7ff fa7e 	bl	8003850 <xTaskGetTickCount>
 8004354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <prvSampleTimeNow+0x3c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d205      	bcs.n	800436c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004360:	f000 f936 	bl	80045d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e002      	b.n	8004372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004372:	4a04      	ldr	r2, [pc, #16]	; (8004384 <prvSampleTimeNow+0x3c>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000d20 	.word	0x20000d20

08004388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d812      	bhi.n	80043d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e01b      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <prvInsertTimerInActiveList+0x7c>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fe f944 	bl	800265a <vListInsert>
 80043d2:	e012      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d206      	bcs.n	80043ea <prvInsertTimerInActiveList+0x62>
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e007      	b.n	80043fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <prvInsertTimerInActiveList+0x80>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7fe f930 	bl	800265a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043fa:	697b      	ldr	r3, [r7, #20]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000d14 	.word	0x20000d14
 8004408:	20000d10 	.word	0x20000d10

0800440c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004412:	e0ca      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	da18      	bge.n	800444c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	3304      	adds	r3, #4
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	61fb      	str	r3, [r7, #28]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004442:	6850      	ldr	r0, [r2, #4]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	4611      	mov	r1, r2
 800444a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f2c0 80ab 	blt.w	80045aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe f931 	bl	80026cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800446a:	463b      	mov	r3, r7
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff6b 	bl	8004348 <prvSampleTimeNow>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b09      	cmp	r3, #9
 8004478:	f200 8096 	bhi.w	80045a8 <prvProcessReceivedCommands+0x19c>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <prvProcessReceivedCommands+0x78>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044ad 	.word	0x080044ad
 8004490:	08004521 	.word	0x08004521
 8004494:	08004535 	.word	0x08004535
 8004498:	0800457f 	.word	0x0800457f
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044ad 	.word	0x080044ad
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004535 	.word	0x08004535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	18d1      	adds	r1, r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044cc:	f7ff ff5c 	bl	8004388 <prvInsertTimerInActiveList>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d069      	beq.n	80045aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05e      	beq.n	80045aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	441a      	add	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2300      	movs	r3, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f7ff fe05 	bl	800410c <xTimerGenericCommand>
 8004502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d14f      	bne.n	80045aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	61bb      	str	r3, [r7, #24]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004532:	e03a      	b.n	80045aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	617b      	str	r3, [r7, #20]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	18d1      	adds	r1, r2, r3
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004578:	f7ff ff06 	bl	8004388 <prvInsertTimerInActiveList>
					break;
 800457c:	e015      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f000 fbdf 	bl	8004d50 <vPortFree>
 8004592:	e00a      	b.n	80045aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045a6:	e000      	b.n	80045aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80045a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <prvProcessReceivedCommands+0x1c0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1d39      	adds	r1, r7, #4
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fbd8 	bl	8002d68 <xQueueReceive>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f47f af2a 	bne.w	8004414 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3730      	adds	r7, #48	; 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000d18 	.word	0x20000d18

080045d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045d6:	e048      	b.n	800466a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <prvSwitchTimerLists+0xc0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <prvSwitchTimerLists+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f86b 	bl	80026cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02e      	beq.n	800466a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	d90e      	bls.n	800463c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800462a:	4b19      	ldr	r3, [pc, #100]	; (8004690 <prvSwitchTimerLists+0xc0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe f810 	bl	800265a <vListInsert>
 800463a:	e016      	b.n	800466a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2300      	movs	r3, #0
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	2100      	movs	r1, #0
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fd60 	bl	800410c <xTimerGenericCommand>
 800464c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	603b      	str	r3, [r7, #0]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <prvSwitchTimerLists+0xc0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1b1      	bne.n	80045d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <prvSwitchTimerLists+0xc0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <prvSwitchTimerLists+0xc4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <prvSwitchTimerLists+0xc0>)
 8004680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <prvSwitchTimerLists+0xc4>)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6013      	str	r3, [r2, #0]
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000d10 	.word	0x20000d10
 8004694:	20000d14 	.word	0x20000d14

08004698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800469e:	f000 f969 	bl	8004974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d120      	bne.n	80046ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046aa:	4814      	ldr	r0, [pc, #80]	; (80046fc <prvCheckForValidListAndQueue+0x64>)
 80046ac:	f7fd ff84 	bl	80025b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046b0:	4813      	ldr	r0, [pc, #76]	; (8004700 <prvCheckForValidListAndQueue+0x68>)
 80046b2:	f7fd ff81 	bl	80025b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <prvCheckForValidListAndQueue+0x6c>)
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <prvCheckForValidListAndQueue+0x64>)
 80046ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <prvCheckForValidListAndQueue+0x70>)
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <prvCheckForValidListAndQueue+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <prvCheckForValidListAndQueue+0x74>)
 80046c8:	4a11      	ldr	r2, [pc, #68]	; (8004710 <prvCheckForValidListAndQueue+0x78>)
 80046ca:	2110      	movs	r1, #16
 80046cc:	200a      	movs	r0, #10
 80046ce:	f7fe f88f 	bl	80027f0 <xQueueGenericCreateStatic>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <prvCheckForValidListAndQueue+0x60>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	490b      	ldr	r1, [pc, #44]	; (8004714 <prvCheckForValidListAndQueue+0x7c>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fd2e 	bl	8003148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ec:	f000 f972 	bl	80049d4 <vPortExitCritical>
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000d18 	.word	0x20000d18
 80046fc:	20000ce8 	.word	0x20000ce8
 8004700:	20000cfc 	.word	0x20000cfc
 8004704:	20000d10 	.word	0x20000d10
 8004708:	20000d14 	.word	0x20000d14
 800470c:	20000dc4 	.word	0x20000dc4
 8004710:	20000d24 	.word	0x20000d24
 8004714:	08005e88 	.word	0x08005e88

08004718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b04      	subs	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3b04      	subs	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 0201 	bic.w	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b04      	subs	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <pxPortInitialiseStack+0x64>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b14      	subs	r3, #20
 8004752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3b04      	subs	r3, #4
 800475e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f06f 0202 	mvn.w	r2, #2
 8004766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b20      	subs	r3, #32
 800476c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	08004781 	.word	0x08004781

08004780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <prvTaskExitError+0x54>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d00a      	beq.n	80047aa <prvTaskExitError+0x2a>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <prvTaskExitError+0x28>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
}
 80047bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047be:	bf00      	nop
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0fc      	beq.n	80047c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	2000000c 	.word	0x2000000c
	...

080047e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <pxCurrentTCBConst2>)
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6808      	ldr	r0, [r1, #0]
 80047e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	f380 8809 	msr	PSP, r0
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f380 8811 	msr	BASEPRI, r0
 80047fa:	4770      	bx	lr
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst2>:
 8004800:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004808:	4808      	ldr	r0, [pc, #32]	; (800482c <prvPortStartFirstTask+0x24>)
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f380 8808 	msr	MSP, r0
 8004812:	f04f 0000 	mov.w	r0, #0
 8004816:	f380 8814 	msr	CONTROL, r0
 800481a:	b662      	cpsie	i
 800481c:	b661      	cpsie	f
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	df00      	svc	0
 8004828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800482a:	bf00      	nop
 800482c:	e000ed08 	.word	0xe000ed08

08004830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004836:	4b46      	ldr	r3, [pc, #280]	; (8004950 <xPortStartScheduler+0x120>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a46      	ldr	r2, [pc, #280]	; (8004954 <xPortStartScheduler+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10a      	bne.n	8004856 <xPortStartScheduler+0x26>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004856:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <xPortStartScheduler+0x120>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <xPortStartScheduler+0x128>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10a      	bne.n	8004876 <xPortStartScheduler+0x46>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60fb      	str	r3, [r7, #12]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004876:	4b39      	ldr	r3, [pc, #228]	; (800495c <xPortStartScheduler+0x12c>)
 8004878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <xPortStartScheduler+0x130>)
 800489c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <xPortStartScheduler+0x134>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a4:	e009      	b.n	80048ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <xPortStartScheduler+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <xPortStartScheduler+0x134>)
 80048ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d0ef      	beq.n	80048a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048c6:	4b27      	ldr	r3, [pc, #156]	; (8004964 <xPortStartScheduler+0x134>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1c3 0307 	rsb	r3, r3, #7
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d00a      	beq.n	80048e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60bb      	str	r3, [r7, #8]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <xPortStartScheduler+0x134>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <xPortStartScheduler+0x134>)
 80048f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <xPortStartScheduler+0x134>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048fa:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <xPortStartScheduler+0x134>)
 80048fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	b2da      	uxtb	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <xPortStartScheduler+0x138>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <xPortStartScheduler+0x138>)
 800490c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <xPortStartScheduler+0x138>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <xPortStartScheduler+0x138>)
 8004918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800491c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800491e:	f000 f8dd 	bl	8004adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <xPortStartScheduler+0x13c>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004928:	f000 f8fc 	bl	8004b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <xPortStartScheduler+0x140>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <xPortStartScheduler+0x140>)
 8004932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004938:	f7ff ff66 	bl	8004808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800493c:	f7ff f852 	bl	80039e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004940:	f7ff ff1e 	bl	8004780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000ed00 	.word	0xe000ed00
 8004954:	410fc271 	.word	0x410fc271
 8004958:	410fc270 	.word	0x410fc270
 800495c:	e000e400 	.word	0xe000e400
 8004960:	20000e14 	.word	0x20000e14
 8004964:	20000e18 	.word	0x20000e18
 8004968:	e000ed20 	.word	0xe000ed20
 800496c:	2000000c 	.word	0x2000000c
 8004970:	e000ef34 	.word	0xe000ef34

08004974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	607b      	str	r3, [r7, #4]
}
 800498c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <vPortEnterCritical+0x58>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <vPortEnterCritical+0x58>)
 8004996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <vPortEnterCritical+0x58>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10f      	bne.n	80049c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortEnterCritical+0x5c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	603b      	str	r3, [r7, #0]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortEnterCritical+0x4a>
	}
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <vPortExitCritical+0x50>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <vPortExitCritical+0x24>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	607b      	str	r3, [r7, #4]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <vPortExitCritical+0x50>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <vPortExitCritical+0x50>)
 8004a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <vPortExitCritical+0x50>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <vPortExitCritical+0x42>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f383 8811 	msr	BASEPRI, r3
}
 8004a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	2000000c 	.word	0x2000000c
	...

08004a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a30:	f3ef 8009 	mrs	r0, PSP
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <pxCurrentTCBConst>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f01e 0f10 	tst.w	lr, #16
 8004a40:	bf08      	it	eq
 8004a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4a:	6010      	str	r0, [r2, #0]
 8004a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a54:	f380 8811 	msr	BASEPRI, r0
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f7fe ffc0 	bl	80039e4 <vTaskSwitchContext>
 8004a64:	f04f 0000 	mov.w	r0, #0
 8004a68:	f380 8811 	msr	BASEPRI, r0
 8004a6c:	bc09      	pop	{r0, r3}
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	6808      	ldr	r0, [r1, #0]
 8004a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a76:	f01e 0f10 	tst.w	lr, #16
 8004a7a:	bf08      	it	eq
 8004a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a80:	f380 8809 	msr	PSP, r0
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst>:
 8004a90:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ab2:	f7fe fedd 	bl	8003870 <xTaskIncrementTick>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <xPortSysTickHandler+0x40>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f383 8811 	msr	BASEPRI, r3
}
 8004ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <vPortSetupTimerInterrupt+0x38>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortSetupTimerInterrupt+0x3c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <vPortSetupTimerInterrupt+0x40>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <vPortSetupTimerInterrupt+0x44>)
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010
 8004b14:	e000e018 	.word	0xe000e018
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	10624dd3 	.word	0x10624dd3
 8004b20:	e000e014 	.word	0xe000e014

08004b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b34 <vPortEnableVFP+0x10>
 8004b28:	6801      	ldr	r1, [r0, #0]
 8004b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b2e:	6001      	str	r1, [r0, #0]
 8004b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b32:	bf00      	nop
 8004b34:	e000ed88 	.word	0xe000ed88

08004b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b3e:	f3ef 8305 	mrs	r3, IPSR
 8004b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d914      	bls.n	8004b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <vPortValidateInterruptPriority+0x70>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <vPortValidateInterruptPriority+0x74>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	7afa      	ldrb	r2, [r7, #11]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d20a      	bcs.n	8004b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <vPortValidateInterruptPriority+0x78>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <vPortValidateInterruptPriority+0x7c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d90a      	bls.n	8004b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	603b      	str	r3, [r7, #0]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <vPortValidateInterruptPriority+0x60>
	}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	e000e3f0 	.word	0xe000e3f0
 8004bac:	20000e14 	.word	0x20000e14
 8004bb0:	e000ed0c 	.word	0xe000ed0c
 8004bb4:	20000e18 	.word	0x20000e18

08004bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bc4:	f7fe fd98 	bl	80036f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bc8:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <pvPortMalloc+0x180>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bd0:	f000 f920 	bl	8004e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <pvPortMalloc+0x184>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8093 	bne.w	8004d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01d      	beq.n	8004c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004be8:	2208      	movs	r2, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d014      	beq.n	8004c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	3308      	adds	r3, #8
 8004c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <pvPortMalloc+0x6c>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d06e      	beq.n	8004d08 <pvPortMalloc+0x150>
 8004c2a:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <pvPortMalloc+0x188>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d869      	bhi.n	8004d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c34:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <pvPortMalloc+0x18c>)
 8004c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <pvPortMalloc+0x18c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3e:	e004      	b.n	8004c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d903      	bls.n	8004c5c <pvPortMalloc+0xa4>
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f1      	bne.n	8004c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <pvPortMalloc+0x180>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d050      	beq.n	8004d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	4413      	add	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	2308      	movs	r3, #8
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d91f      	bls.n	8004cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	613b      	str	r3, [r7, #16]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f000 f908 	bl	8004ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <pvPortMalloc+0x188>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <pvPortMalloc+0x188>)
 8004cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <pvPortMalloc+0x188>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <pvPortMalloc+0x190>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d203      	bcs.n	8004cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <pvPortMalloc+0x188>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <pvPortMalloc+0x190>)
 8004ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <pvPortMalloc+0x184>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <pvPortMalloc+0x194>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a11      	ldr	r2, [pc, #68]	; (8004d4c <pvPortMalloc+0x194>)
 8004d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d08:	f7fe fd04 	bl	8003714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <pvPortMalloc+0x174>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60fb      	str	r3, [r7, #12]
}
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <pvPortMalloc+0x172>
	return pvReturn;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20004a24 	.word	0x20004a24
 8004d3c:	20004a38 	.word	0x20004a38
 8004d40:	20004a28 	.word	0x20004a28
 8004d44:	20004a1c 	.word	0x20004a1c
 8004d48:	20004a2c 	.word	0x20004a2c
 8004d4c:	20004a30 	.word	0x20004a30

08004d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04d      	beq.n	8004dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d62:	2308      	movs	r3, #8
 8004d64:	425b      	negs	r3, r3
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <vPortFree+0xb8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <vPortFree+0x44>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60fb      	str	r3, [r7, #12]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <vPortFree+0x62>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60bb      	str	r3, [r7, #8]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <vPortFree+0xb8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01e      	beq.n	8004dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11a      	bne.n	8004dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <vPortFree+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dd8:	f7fe fc8e 	bl	80036f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <vPortFree+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <vPortFree+0xbc>)
 8004de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dea:	6938      	ldr	r0, [r7, #16]
 8004dec:	f000 f874 	bl	8004ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <vPortFree+0xc0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	4a06      	ldr	r2, [pc, #24]	; (8004e10 <vPortFree+0xc0>)
 8004df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dfa:	f7fe fc8b 	bl	8003714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20004a38 	.word	0x20004a38
 8004e0c:	20004a28 	.word	0x20004a28
 8004e10:	20004a34 	.word	0x20004a34

08004e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <prvHeapInit+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <prvHeapInit+0xac>)
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e60:	2208      	movs	r2, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <prvHeapInit+0xb8>)
 8004ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <prvHeapInit+0xbc>)
 8004eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <prvHeapInit+0xc0>)
 8004eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	20000e1c 	.word	0x20000e1c
 8004ec4:	20004a1c 	.word	0x20004a1c
 8004ec8:	20004a24 	.word	0x20004a24
 8004ecc:	20004a2c 	.word	0x20004a2c
 8004ed0:	20004a28 	.word	0x20004a28
 8004ed4:	20004a38 	.word	0x20004a38

08004ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <prvInsertBlockIntoFreeList+0xac>)
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <prvInsertBlockIntoFreeList+0x14>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d8f7      	bhi.n	8004ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d108      	bne.n	8004f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d118      	bne.n	8004f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d00d      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e008      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e003      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d002      	beq.n	8004f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20004a1c 	.word	0x20004a1c
 8004f88:	20004a24 	.word	0x20004a24

08004f8c <std>:
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	4604      	mov	r4, r0
 8004f92:	e9c0 3300 	strd	r3, r3, [r0]
 8004f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f9a:	6083      	str	r3, [r0, #8]
 8004f9c:	8181      	strh	r1, [r0, #12]
 8004f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004fa0:	81c2      	strh	r2, [r0, #14]
 8004fa2:	6183      	str	r3, [r0, #24]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	305c      	adds	r0, #92	; 0x5c
 8004faa:	f000 f906 	bl	80051ba <memset>
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <std+0x58>)
 8004fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <std+0x5c>)
 8004fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <std+0x60>)
 8004fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <std+0x64>)
 8004fbc:	6323      	str	r3, [r4, #48]	; 0x30
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <std+0x68>)
 8004fc0:	6224      	str	r4, [r4, #32]
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d006      	beq.n	8004fd4 <std+0x48>
 8004fc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004fca:	4294      	cmp	r4, r2
 8004fcc:	d002      	beq.n	8004fd4 <std+0x48>
 8004fce:	33d0      	adds	r3, #208	; 0xd0
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d105      	bne.n	8004fe0 <std+0x54>
 8004fd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fdc:	f000 b966 	b.w	80052ac <__retarget_lock_init_recursive>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08005135 	.word	0x08005135
 8004fe8:	08005157 	.word	0x08005157
 8004fec:	0800518f 	.word	0x0800518f
 8004ff0:	080051b3 	.word	0x080051b3
 8004ff4:	20004a3c 	.word	0x20004a3c

08004ff8 <stdio_exit_handler>:
 8004ff8:	4a02      	ldr	r2, [pc, #8]	; (8005004 <stdio_exit_handler+0xc>)
 8004ffa:	4903      	ldr	r1, [pc, #12]	; (8005008 <stdio_exit_handler+0x10>)
 8004ffc:	4803      	ldr	r0, [pc, #12]	; (800500c <stdio_exit_handler+0x14>)
 8004ffe:	f000 b869 	b.w	80050d4 <_fwalk_sglue>
 8005002:	bf00      	nop
 8005004:	20000010 	.word	0x20000010
 8005008:	08005b75 	.word	0x08005b75
 800500c:	2000001c 	.word	0x2000001c

08005010 <cleanup_stdio>:
 8005010:	6841      	ldr	r1, [r0, #4]
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <cleanup_stdio+0x34>)
 8005014:	4299      	cmp	r1, r3
 8005016:	b510      	push	{r4, lr}
 8005018:	4604      	mov	r4, r0
 800501a:	d001      	beq.n	8005020 <cleanup_stdio+0x10>
 800501c:	f000 fdaa 	bl	8005b74 <_fflush_r>
 8005020:	68a1      	ldr	r1, [r4, #8]
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <cleanup_stdio+0x38>)
 8005024:	4299      	cmp	r1, r3
 8005026:	d002      	beq.n	800502e <cleanup_stdio+0x1e>
 8005028:	4620      	mov	r0, r4
 800502a:	f000 fda3 	bl	8005b74 <_fflush_r>
 800502e:	68e1      	ldr	r1, [r4, #12]
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <cleanup_stdio+0x3c>)
 8005032:	4299      	cmp	r1, r3
 8005034:	d004      	beq.n	8005040 <cleanup_stdio+0x30>
 8005036:	4620      	mov	r0, r4
 8005038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503c:	f000 bd9a 	b.w	8005b74 <_fflush_r>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	20004a3c 	.word	0x20004a3c
 8005048:	20004aa4 	.word	0x20004aa4
 800504c:	20004b0c 	.word	0x20004b0c

08005050 <global_stdio_init.part.0>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <global_stdio_init.part.0+0x30>)
 8005054:	4c0b      	ldr	r4, [pc, #44]	; (8005084 <global_stdio_init.part.0+0x34>)
 8005056:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <global_stdio_init.part.0+0x38>)
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	4620      	mov	r0, r4
 800505c:	2200      	movs	r2, #0
 800505e:	2104      	movs	r1, #4
 8005060:	f7ff ff94 	bl	8004f8c <std>
 8005064:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005068:	2201      	movs	r2, #1
 800506a:	2109      	movs	r1, #9
 800506c:	f7ff ff8e 	bl	8004f8c <std>
 8005070:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005074:	2202      	movs	r2, #2
 8005076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507a:	2112      	movs	r1, #18
 800507c:	f7ff bf86 	b.w	8004f8c <std>
 8005080:	20004b74 	.word	0x20004b74
 8005084:	20004a3c 	.word	0x20004a3c
 8005088:	08004ff9 	.word	0x08004ff9

0800508c <__sfp_lock_acquire>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__sfp_lock_acquire+0x8>)
 800508e:	f000 b90e 	b.w	80052ae <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	20004b7d 	.word	0x20004b7d

08005098 <__sfp_lock_release>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__sfp_lock_release+0x8>)
 800509a:	f000 b909 	b.w	80052b0 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	20004b7d 	.word	0x20004b7d

080050a4 <__sinit>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4604      	mov	r4, r0
 80050a8:	f7ff fff0 	bl	800508c <__sfp_lock_acquire>
 80050ac:	6a23      	ldr	r3, [r4, #32]
 80050ae:	b11b      	cbz	r3, 80050b8 <__sinit+0x14>
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f7ff bff0 	b.w	8005098 <__sfp_lock_release>
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <__sinit+0x28>)
 80050ba:	6223      	str	r3, [r4, #32]
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <__sinit+0x2c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f5      	bne.n	80050b0 <__sinit+0xc>
 80050c4:	f7ff ffc4 	bl	8005050 <global_stdio_init.part.0>
 80050c8:	e7f2      	b.n	80050b0 <__sinit+0xc>
 80050ca:	bf00      	nop
 80050cc:	08005011 	.word	0x08005011
 80050d0:	20004b74 	.word	0x20004b74

080050d4 <_fwalk_sglue>:
 80050d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	4607      	mov	r7, r0
 80050da:	4688      	mov	r8, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	2600      	movs	r6, #0
 80050e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050e4:	f1b9 0901 	subs.w	r9, r9, #1
 80050e8:	d505      	bpl.n	80050f6 <_fwalk_sglue+0x22>
 80050ea:	6824      	ldr	r4, [r4, #0]
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d1f7      	bne.n	80050e0 <_fwalk_sglue+0xc>
 80050f0:	4630      	mov	r0, r6
 80050f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d907      	bls.n	800510c <_fwalk_sglue+0x38>
 80050fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005100:	3301      	adds	r3, #1
 8005102:	d003      	beq.n	800510c <_fwalk_sglue+0x38>
 8005104:	4629      	mov	r1, r5
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	4306      	orrs	r6, r0
 800510c:	3568      	adds	r5, #104	; 0x68
 800510e:	e7e9      	b.n	80050e4 <_fwalk_sglue+0x10>

08005110 <iprintf>:
 8005110:	b40f      	push	{r0, r1, r2, r3}
 8005112:	b507      	push	{r0, r1, r2, lr}
 8005114:	4906      	ldr	r1, [pc, #24]	; (8005130 <iprintf+0x20>)
 8005116:	ab04      	add	r3, sp, #16
 8005118:	6808      	ldr	r0, [r1, #0]
 800511a:	f853 2b04 	ldr.w	r2, [r3], #4
 800511e:	6881      	ldr	r1, [r0, #8]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	f000 f9f7 	bl	8005514 <_vfiprintf_r>
 8005126:	b003      	add	sp, #12
 8005128:	f85d eb04 	ldr.w	lr, [sp], #4
 800512c:	b004      	add	sp, #16
 800512e:	4770      	bx	lr
 8005130:	20000068 	.word	0x20000068

08005134 <__sread>:
 8005134:	b510      	push	{r4, lr}
 8005136:	460c      	mov	r4, r1
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	f000 f868 	bl	8005210 <_read_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	bfab      	itete	ge
 8005144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005146:	89a3      	ldrhlt	r3, [r4, #12]
 8005148:	181b      	addge	r3, r3, r0
 800514a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800514e:	bfac      	ite	ge
 8005150:	6563      	strge	r3, [r4, #84]	; 0x54
 8005152:	81a3      	strhlt	r3, [r4, #12]
 8005154:	bd10      	pop	{r4, pc}

08005156 <__swrite>:
 8005156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	461f      	mov	r7, r3
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	05db      	lsls	r3, r3, #23
 8005160:	4605      	mov	r5, r0
 8005162:	460c      	mov	r4, r1
 8005164:	4616      	mov	r6, r2
 8005166:	d505      	bpl.n	8005174 <__swrite+0x1e>
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	2302      	movs	r3, #2
 800516e:	2200      	movs	r2, #0
 8005170:	f000 f83c 	bl	80051ec <_lseek_r>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800517a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	4632      	mov	r2, r6
 8005182:	463b      	mov	r3, r7
 8005184:	4628      	mov	r0, r5
 8005186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	f000 b853 	b.w	8005234 <_write_r>

0800518e <__sseek>:
 800518e:	b510      	push	{r4, lr}
 8005190:	460c      	mov	r4, r1
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 f829 	bl	80051ec <_lseek_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	bf15      	itete	ne
 80051a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80051a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051aa:	81a3      	strheq	r3, [r4, #12]
 80051ac:	bf18      	it	ne
 80051ae:	81a3      	strhne	r3, [r4, #12]
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <__sclose>:
 80051b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b6:	f000 b809 	b.w	80051cc <_close_r>

080051ba <memset>:
 80051ba:	4402      	add	r2, r0
 80051bc:	4603      	mov	r3, r0
 80051be:	4293      	cmp	r3, r2
 80051c0:	d100      	bne.n	80051c4 <memset+0xa>
 80051c2:	4770      	bx	lr
 80051c4:	f803 1b01 	strb.w	r1, [r3], #1
 80051c8:	e7f9      	b.n	80051be <memset+0x4>
	...

080051cc <_close_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d06      	ldr	r5, [pc, #24]	; (80051e8 <_close_r+0x1c>)
 80051d0:	2300      	movs	r3, #0
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	f7fb fc73 	bl	8000ac2 <_close>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_close_r+0x1a>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_close_r+0x1a>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20004b78 	.word	0x20004b78

080051ec <_lseek_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d07      	ldr	r5, [pc, #28]	; (800520c <_lseek_r+0x20>)
 80051f0:	4604      	mov	r4, r0
 80051f2:	4608      	mov	r0, r1
 80051f4:	4611      	mov	r1, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fb fc88 	bl	8000b10 <_lseek>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_lseek_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_lseek_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20004b78 	.word	0x20004b78

08005210 <_read_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d07      	ldr	r5, [pc, #28]	; (8005230 <_read_r+0x20>)
 8005214:	4604      	mov	r4, r0
 8005216:	4608      	mov	r0, r1
 8005218:	4611      	mov	r1, r2
 800521a:	2200      	movs	r2, #0
 800521c:	602a      	str	r2, [r5, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	f7fb fc16 	bl	8000a50 <_read>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_read_r+0x1e>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_read_r+0x1e>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20004b78 	.word	0x20004b78

08005234 <_write_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	; (8005254 <_write_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fb fc21 	bl	8000a8a <_write>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_write_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_write_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20004b78 	.word	0x20004b78

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000068 	.word	0x20000068

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4d0d      	ldr	r5, [pc, #52]	; (800529c <__libc_init_array+0x38>)
 8005268:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526a:	1b64      	subs	r4, r4, r5
 800526c:	10a4      	asrs	r4, r4, #2
 800526e:	2600      	movs	r6, #0
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	4d0b      	ldr	r5, [pc, #44]	; (80052a4 <__libc_init_array+0x40>)
 8005276:	4c0c      	ldr	r4, [pc, #48]	; (80052a8 <__libc_init_array+0x44>)
 8005278:	f000 fdce 	bl	8005e18 <_init>
 800527c:	1b64      	subs	r4, r4, r5
 800527e:	10a4      	asrs	r4, r4, #2
 8005280:	2600      	movs	r6, #0
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	f855 3b04 	ldr.w	r3, [r5], #4
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	f855 3b04 	ldr.w	r3, [r5], #4
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	08005f60 	.word	0x08005f60
 80052a0:	08005f60 	.word	0x08005f60
 80052a4:	08005f60 	.word	0x08005f60
 80052a8:	08005f64 	.word	0x08005f64

080052ac <__retarget_lock_init_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__retarget_lock_acquire_recursive>:
 80052ae:	4770      	bx	lr

080052b0 <__retarget_lock_release_recursive>:
 80052b0:	4770      	bx	lr

080052b2 <memcpy>:
 80052b2:	440a      	add	r2, r1
 80052b4:	4291      	cmp	r1, r2
 80052b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ba:	d100      	bne.n	80052be <memcpy+0xc>
 80052bc:	4770      	bx	lr
 80052be:	b510      	push	{r4, lr}
 80052c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052c8:	4291      	cmp	r1, r2
 80052ca:	d1f9      	bne.n	80052c0 <memcpy+0xe>
 80052cc:	bd10      	pop	{r4, pc}
	...

080052d0 <_free_r>:
 80052d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d044      	beq.n	8005360 <_free_r+0x90>
 80052d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f1a1 0404 	sub.w	r4, r1, #4
 80052e2:	bfb8      	it	lt
 80052e4:	18e4      	addlt	r4, r4, r3
 80052e6:	f000 f8df 	bl	80054a8 <__malloc_lock>
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <_free_r+0x94>)
 80052ec:	9801      	ldr	r0, [sp, #4]
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	b933      	cbnz	r3, 8005300 <_free_r+0x30>
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	6014      	str	r4, [r2, #0]
 80052f6:	b003      	add	sp, #12
 80052f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fc:	f000 b8da 	b.w	80054b4 <__malloc_unlock>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d908      	bls.n	8005316 <_free_r+0x46>
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1961      	adds	r1, r4, r5
 8005308:	428b      	cmp	r3, r1
 800530a:	bf01      	itttt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	1949      	addeq	r1, r1, r5
 8005312:	6021      	streq	r1, [r4, #0]
 8005314:	e7ed      	b.n	80052f2 <_free_r+0x22>
 8005316:	461a      	mov	r2, r3
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	b10b      	cbz	r3, 8005320 <_free_r+0x50>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d9fa      	bls.n	8005316 <_free_r+0x46>
 8005320:	6811      	ldr	r1, [r2, #0]
 8005322:	1855      	adds	r5, r2, r1
 8005324:	42a5      	cmp	r5, r4
 8005326:	d10b      	bne.n	8005340 <_free_r+0x70>
 8005328:	6824      	ldr	r4, [r4, #0]
 800532a:	4421      	add	r1, r4
 800532c:	1854      	adds	r4, r2, r1
 800532e:	42a3      	cmp	r3, r4
 8005330:	6011      	str	r1, [r2, #0]
 8005332:	d1e0      	bne.n	80052f6 <_free_r+0x26>
 8005334:	681c      	ldr	r4, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	440c      	add	r4, r1
 800533c:	6014      	str	r4, [r2, #0]
 800533e:	e7da      	b.n	80052f6 <_free_r+0x26>
 8005340:	d902      	bls.n	8005348 <_free_r+0x78>
 8005342:	230c      	movs	r3, #12
 8005344:	6003      	str	r3, [r0, #0]
 8005346:	e7d6      	b.n	80052f6 <_free_r+0x26>
 8005348:	6825      	ldr	r5, [r4, #0]
 800534a:	1961      	adds	r1, r4, r5
 800534c:	428b      	cmp	r3, r1
 800534e:	bf04      	itt	eq
 8005350:	6819      	ldreq	r1, [r3, #0]
 8005352:	685b      	ldreq	r3, [r3, #4]
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	bf04      	itt	eq
 8005358:	1949      	addeq	r1, r1, r5
 800535a:	6021      	streq	r1, [r4, #0]
 800535c:	6054      	str	r4, [r2, #4]
 800535e:	e7ca      	b.n	80052f6 <_free_r+0x26>
 8005360:	b003      	add	sp, #12
 8005362:	bd30      	pop	{r4, r5, pc}
 8005364:	20004b80 	.word	0x20004b80

08005368 <sbrk_aligned>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4e0e      	ldr	r6, [pc, #56]	; (80053a4 <sbrk_aligned+0x3c>)
 800536c:	460c      	mov	r4, r1
 800536e:	6831      	ldr	r1, [r6, #0]
 8005370:	4605      	mov	r5, r0
 8005372:	b911      	cbnz	r1, 800537a <sbrk_aligned+0x12>
 8005374:	f000 fcbc 	bl	8005cf0 <_sbrk_r>
 8005378:	6030      	str	r0, [r6, #0]
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fcb7 	bl	8005cf0 <_sbrk_r>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d00a      	beq.n	800539c <sbrk_aligned+0x34>
 8005386:	1cc4      	adds	r4, r0, #3
 8005388:	f024 0403 	bic.w	r4, r4, #3
 800538c:	42a0      	cmp	r0, r4
 800538e:	d007      	beq.n	80053a0 <sbrk_aligned+0x38>
 8005390:	1a21      	subs	r1, r4, r0
 8005392:	4628      	mov	r0, r5
 8005394:	f000 fcac 	bl	8005cf0 <_sbrk_r>
 8005398:	3001      	adds	r0, #1
 800539a:	d101      	bne.n	80053a0 <sbrk_aligned+0x38>
 800539c:	f04f 34ff 	mov.w	r4, #4294967295
 80053a0:	4620      	mov	r0, r4
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	20004b84 	.word	0x20004b84

080053a8 <_malloc_r>:
 80053a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053ac:	1ccd      	adds	r5, r1, #3
 80053ae:	f025 0503 	bic.w	r5, r5, #3
 80053b2:	3508      	adds	r5, #8
 80053b4:	2d0c      	cmp	r5, #12
 80053b6:	bf38      	it	cc
 80053b8:	250c      	movcc	r5, #12
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	4607      	mov	r7, r0
 80053be:	db01      	blt.n	80053c4 <_malloc_r+0x1c>
 80053c0:	42a9      	cmp	r1, r5
 80053c2:	d905      	bls.n	80053d0 <_malloc_r+0x28>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	2600      	movs	r6, #0
 80053ca:	4630      	mov	r0, r6
 80053cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054a4 <_malloc_r+0xfc>
 80053d4:	f000 f868 	bl	80054a8 <__malloc_lock>
 80053d8:	f8d8 3000 	ldr.w	r3, [r8]
 80053dc:	461c      	mov	r4, r3
 80053de:	bb5c      	cbnz	r4, 8005438 <_malloc_r+0x90>
 80053e0:	4629      	mov	r1, r5
 80053e2:	4638      	mov	r0, r7
 80053e4:	f7ff ffc0 	bl	8005368 <sbrk_aligned>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	4604      	mov	r4, r0
 80053ec:	d155      	bne.n	800549a <_malloc_r+0xf2>
 80053ee:	f8d8 4000 	ldr.w	r4, [r8]
 80053f2:	4626      	mov	r6, r4
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	d145      	bne.n	8005484 <_malloc_r+0xdc>
 80053f8:	2c00      	cmp	r4, #0
 80053fa:	d048      	beq.n	800548e <_malloc_r+0xe6>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	4631      	mov	r1, r6
 8005400:	4638      	mov	r0, r7
 8005402:	eb04 0903 	add.w	r9, r4, r3
 8005406:	f000 fc73 	bl	8005cf0 <_sbrk_r>
 800540a:	4581      	cmp	r9, r0
 800540c:	d13f      	bne.n	800548e <_malloc_r+0xe6>
 800540e:	6821      	ldr	r1, [r4, #0]
 8005410:	1a6d      	subs	r5, r5, r1
 8005412:	4629      	mov	r1, r5
 8005414:	4638      	mov	r0, r7
 8005416:	f7ff ffa7 	bl	8005368 <sbrk_aligned>
 800541a:	3001      	adds	r0, #1
 800541c:	d037      	beq.n	800548e <_malloc_r+0xe6>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	442b      	add	r3, r5
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	f8d8 3000 	ldr.w	r3, [r8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d038      	beq.n	800549e <_malloc_r+0xf6>
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	42a2      	cmp	r2, r4
 8005430:	d12b      	bne.n	800548a <_malloc_r+0xe2>
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e00f      	b.n	8005458 <_malloc_r+0xb0>
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	1b52      	subs	r2, r2, r5
 800543c:	d41f      	bmi.n	800547e <_malloc_r+0xd6>
 800543e:	2a0b      	cmp	r2, #11
 8005440:	d917      	bls.n	8005472 <_malloc_r+0xca>
 8005442:	1961      	adds	r1, r4, r5
 8005444:	42a3      	cmp	r3, r4
 8005446:	6025      	str	r5, [r4, #0]
 8005448:	bf18      	it	ne
 800544a:	6059      	strne	r1, [r3, #4]
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	bf08      	it	eq
 8005450:	f8c8 1000 	streq.w	r1, [r8]
 8005454:	5162      	str	r2, [r4, r5]
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	4638      	mov	r0, r7
 800545a:	f104 060b 	add.w	r6, r4, #11
 800545e:	f000 f829 	bl	80054b4 <__malloc_unlock>
 8005462:	f026 0607 	bic.w	r6, r6, #7
 8005466:	1d23      	adds	r3, r4, #4
 8005468:	1af2      	subs	r2, r6, r3
 800546a:	d0ae      	beq.n	80053ca <_malloc_r+0x22>
 800546c:	1b9b      	subs	r3, r3, r6
 800546e:	50a3      	str	r3, [r4, r2]
 8005470:	e7ab      	b.n	80053ca <_malloc_r+0x22>
 8005472:	42a3      	cmp	r3, r4
 8005474:	6862      	ldr	r2, [r4, #4]
 8005476:	d1dd      	bne.n	8005434 <_malloc_r+0x8c>
 8005478:	f8c8 2000 	str.w	r2, [r8]
 800547c:	e7ec      	b.n	8005458 <_malloc_r+0xb0>
 800547e:	4623      	mov	r3, r4
 8005480:	6864      	ldr	r4, [r4, #4]
 8005482:	e7ac      	b.n	80053de <_malloc_r+0x36>
 8005484:	4634      	mov	r4, r6
 8005486:	6876      	ldr	r6, [r6, #4]
 8005488:	e7b4      	b.n	80053f4 <_malloc_r+0x4c>
 800548a:	4613      	mov	r3, r2
 800548c:	e7cc      	b.n	8005428 <_malloc_r+0x80>
 800548e:	230c      	movs	r3, #12
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4638      	mov	r0, r7
 8005494:	f000 f80e 	bl	80054b4 <__malloc_unlock>
 8005498:	e797      	b.n	80053ca <_malloc_r+0x22>
 800549a:	6025      	str	r5, [r4, #0]
 800549c:	e7dc      	b.n	8005458 <_malloc_r+0xb0>
 800549e:	605b      	str	r3, [r3, #4]
 80054a0:	deff      	udf	#255	; 0xff
 80054a2:	bf00      	nop
 80054a4:	20004b80 	.word	0x20004b80

080054a8 <__malloc_lock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_lock+0x8>)
 80054aa:	f7ff bf00 	b.w	80052ae <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	20004b7c 	.word	0x20004b7c

080054b4 <__malloc_unlock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__malloc_unlock+0x8>)
 80054b6:	f7ff befb 	b.w	80052b0 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	20004b7c 	.word	0x20004b7c

080054c0 <__sfputc_r>:
 80054c0:	6893      	ldr	r3, [r2, #8]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	b410      	push	{r4}
 80054c8:	6093      	str	r3, [r2, #8]
 80054ca:	da08      	bge.n	80054de <__sfputc_r+0x1e>
 80054cc:	6994      	ldr	r4, [r2, #24]
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	db01      	blt.n	80054d6 <__sfputc_r+0x16>
 80054d2:	290a      	cmp	r1, #10
 80054d4:	d103      	bne.n	80054de <__sfputc_r+0x1e>
 80054d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054da:	f000 bb73 	b.w	8005bc4 <__swbuf_r>
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	1c58      	adds	r0, r3, #1
 80054e2:	6010      	str	r0, [r2, #0]
 80054e4:	7019      	strb	r1, [r3, #0]
 80054e6:	4608      	mov	r0, r1
 80054e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <__sfputs_r>:
 80054ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f0:	4606      	mov	r6, r0
 80054f2:	460f      	mov	r7, r1
 80054f4:	4614      	mov	r4, r2
 80054f6:	18d5      	adds	r5, r2, r3
 80054f8:	42ac      	cmp	r4, r5
 80054fa:	d101      	bne.n	8005500 <__sfputs_r+0x12>
 80054fc:	2000      	movs	r0, #0
 80054fe:	e007      	b.n	8005510 <__sfputs_r+0x22>
 8005500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005504:	463a      	mov	r2, r7
 8005506:	4630      	mov	r0, r6
 8005508:	f7ff ffda 	bl	80054c0 <__sfputc_r>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d1f3      	bne.n	80054f8 <__sfputs_r+0xa>
 8005510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005514 <_vfiprintf_r>:
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	460d      	mov	r5, r1
 800551a:	b09d      	sub	sp, #116	; 0x74
 800551c:	4614      	mov	r4, r2
 800551e:	4698      	mov	r8, r3
 8005520:	4606      	mov	r6, r0
 8005522:	b118      	cbz	r0, 800552c <_vfiprintf_r+0x18>
 8005524:	6a03      	ldr	r3, [r0, #32]
 8005526:	b90b      	cbnz	r3, 800552c <_vfiprintf_r+0x18>
 8005528:	f7ff fdbc 	bl	80050a4 <__sinit>
 800552c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	d405      	bmi.n	800553e <_vfiprintf_r+0x2a>
 8005532:	89ab      	ldrh	r3, [r5, #12]
 8005534:	059a      	lsls	r2, r3, #22
 8005536:	d402      	bmi.n	800553e <_vfiprintf_r+0x2a>
 8005538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800553a:	f7ff feb8 	bl	80052ae <__retarget_lock_acquire_recursive>
 800553e:	89ab      	ldrh	r3, [r5, #12]
 8005540:	071b      	lsls	r3, r3, #28
 8005542:	d501      	bpl.n	8005548 <_vfiprintf_r+0x34>
 8005544:	692b      	ldr	r3, [r5, #16]
 8005546:	b99b      	cbnz	r3, 8005570 <_vfiprintf_r+0x5c>
 8005548:	4629      	mov	r1, r5
 800554a:	4630      	mov	r0, r6
 800554c:	f000 fb78 	bl	8005c40 <__swsetup_r>
 8005550:	b170      	cbz	r0, 8005570 <_vfiprintf_r+0x5c>
 8005552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005554:	07dc      	lsls	r4, r3, #31
 8005556:	d504      	bpl.n	8005562 <_vfiprintf_r+0x4e>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b01d      	add	sp, #116	; 0x74
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	0598      	lsls	r0, r3, #22
 8005566:	d4f7      	bmi.n	8005558 <_vfiprintf_r+0x44>
 8005568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556a:	f7ff fea1 	bl	80052b0 <__retarget_lock_release_recursive>
 800556e:	e7f3      	b.n	8005558 <_vfiprintf_r+0x44>
 8005570:	2300      	movs	r3, #0
 8005572:	9309      	str	r3, [sp, #36]	; 0x24
 8005574:	2320      	movs	r3, #32
 8005576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800557a:	f8cd 800c 	str.w	r8, [sp, #12]
 800557e:	2330      	movs	r3, #48	; 0x30
 8005580:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005734 <_vfiprintf_r+0x220>
 8005584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005588:	f04f 0901 	mov.w	r9, #1
 800558c:	4623      	mov	r3, r4
 800558e:	469a      	mov	sl, r3
 8005590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005594:	b10a      	cbz	r2, 800559a <_vfiprintf_r+0x86>
 8005596:	2a25      	cmp	r2, #37	; 0x25
 8005598:	d1f9      	bne.n	800558e <_vfiprintf_r+0x7a>
 800559a:	ebba 0b04 	subs.w	fp, sl, r4
 800559e:	d00b      	beq.n	80055b8 <_vfiprintf_r+0xa4>
 80055a0:	465b      	mov	r3, fp
 80055a2:	4622      	mov	r2, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f7ff ffa1 	bl	80054ee <__sfputs_r>
 80055ac:	3001      	adds	r0, #1
 80055ae:	f000 80a9 	beq.w	8005704 <_vfiprintf_r+0x1f0>
 80055b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b4:	445a      	add	r2, fp
 80055b6:	9209      	str	r2, [sp, #36]	; 0x24
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a1 	beq.w	8005704 <_vfiprintf_r+0x1f0>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055cc:	f10a 0a01 	add.w	sl, sl, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d8:	931a      	str	r3, [sp, #104]	; 0x68
 80055da:	4654      	mov	r4, sl
 80055dc:	2205      	movs	r2, #5
 80055de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e2:	4854      	ldr	r0, [pc, #336]	; (8005734 <_vfiprintf_r+0x220>)
 80055e4:	f7fa fe14 	bl	8000210 <memchr>
 80055e8:	9a04      	ldr	r2, [sp, #16]
 80055ea:	b9d8      	cbnz	r0, 8005624 <_vfiprintf_r+0x110>
 80055ec:	06d1      	lsls	r1, r2, #27
 80055ee:	bf44      	itt	mi
 80055f0:	2320      	movmi	r3, #32
 80055f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f6:	0713      	lsls	r3, r2, #28
 80055f8:	bf44      	itt	mi
 80055fa:	232b      	movmi	r3, #43	; 0x2b
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005600:	f89a 3000 	ldrb.w	r3, [sl]
 8005604:	2b2a      	cmp	r3, #42	; 0x2a
 8005606:	d015      	beq.n	8005634 <_vfiprintf_r+0x120>
 8005608:	9a07      	ldr	r2, [sp, #28]
 800560a:	4654      	mov	r4, sl
 800560c:	2000      	movs	r0, #0
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	4621      	mov	r1, r4
 8005614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005618:	3b30      	subs	r3, #48	; 0x30
 800561a:	2b09      	cmp	r3, #9
 800561c:	d94d      	bls.n	80056ba <_vfiprintf_r+0x1a6>
 800561e:	b1b0      	cbz	r0, 800564e <_vfiprintf_r+0x13a>
 8005620:	9207      	str	r2, [sp, #28]
 8005622:	e014      	b.n	800564e <_vfiprintf_r+0x13a>
 8005624:	eba0 0308 	sub.w	r3, r0, r8
 8005628:	fa09 f303 	lsl.w	r3, r9, r3
 800562c:	4313      	orrs	r3, r2
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	46a2      	mov	sl, r4
 8005632:	e7d2      	b.n	80055da <_vfiprintf_r+0xc6>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	1d19      	adds	r1, r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	9103      	str	r1, [sp, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	bfbb      	ittet	lt
 8005640:	425b      	neglt	r3, r3
 8005642:	f042 0202 	orrlt.w	r2, r2, #2
 8005646:	9307      	strge	r3, [sp, #28]
 8005648:	9307      	strlt	r3, [sp, #28]
 800564a:	bfb8      	it	lt
 800564c:	9204      	strlt	r2, [sp, #16]
 800564e:	7823      	ldrb	r3, [r4, #0]
 8005650:	2b2e      	cmp	r3, #46	; 0x2e
 8005652:	d10c      	bne.n	800566e <_vfiprintf_r+0x15a>
 8005654:	7863      	ldrb	r3, [r4, #1]
 8005656:	2b2a      	cmp	r3, #42	; 0x2a
 8005658:	d134      	bne.n	80056c4 <_vfiprintf_r+0x1b0>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	9203      	str	r2, [sp, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	f04f 33ff 	movlt.w	r3, #4294967295
 800566a:	3402      	adds	r4, #2
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005744 <_vfiprintf_r+0x230>
 8005672:	7821      	ldrb	r1, [r4, #0]
 8005674:	2203      	movs	r2, #3
 8005676:	4650      	mov	r0, sl
 8005678:	f7fa fdca 	bl	8000210 <memchr>
 800567c:	b138      	cbz	r0, 800568e <_vfiprintf_r+0x17a>
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	eba0 000a 	sub.w	r0, r0, sl
 8005684:	2240      	movs	r2, #64	; 0x40
 8005686:	4082      	lsls	r2, r0
 8005688:	4313      	orrs	r3, r2
 800568a:	3401      	adds	r4, #1
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005692:	4829      	ldr	r0, [pc, #164]	; (8005738 <_vfiprintf_r+0x224>)
 8005694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005698:	2206      	movs	r2, #6
 800569a:	f7fa fdb9 	bl	8000210 <memchr>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d03f      	beq.n	8005722 <_vfiprintf_r+0x20e>
 80056a2:	4b26      	ldr	r3, [pc, #152]	; (800573c <_vfiprintf_r+0x228>)
 80056a4:	bb1b      	cbnz	r3, 80056ee <_vfiprintf_r+0x1da>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	3307      	adds	r3, #7
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	3308      	adds	r3, #8
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b4:	443b      	add	r3, r7
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	e768      	b.n	800558c <_vfiprintf_r+0x78>
 80056ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80056be:	460c      	mov	r4, r1
 80056c0:	2001      	movs	r0, #1
 80056c2:	e7a6      	b.n	8005612 <_vfiprintf_r+0xfe>
 80056c4:	2300      	movs	r3, #0
 80056c6:	3401      	adds	r4, #1
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	4619      	mov	r1, r3
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	4620      	mov	r0, r4
 80056d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d6:	3a30      	subs	r2, #48	; 0x30
 80056d8:	2a09      	cmp	r2, #9
 80056da:	d903      	bls.n	80056e4 <_vfiprintf_r+0x1d0>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0c6      	beq.n	800566e <_vfiprintf_r+0x15a>
 80056e0:	9105      	str	r1, [sp, #20]
 80056e2:	e7c4      	b.n	800566e <_vfiprintf_r+0x15a>
 80056e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e8:	4604      	mov	r4, r0
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7f0      	b.n	80056d0 <_vfiprintf_r+0x1bc>
 80056ee:	ab03      	add	r3, sp, #12
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	462a      	mov	r2, r5
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <_vfiprintf_r+0x22c>)
 80056f6:	a904      	add	r1, sp, #16
 80056f8:	4630      	mov	r0, r6
 80056fa:	f3af 8000 	nop.w
 80056fe:	4607      	mov	r7, r0
 8005700:	1c78      	adds	r0, r7, #1
 8005702:	d1d6      	bne.n	80056b2 <_vfiprintf_r+0x19e>
 8005704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	d405      	bmi.n	8005716 <_vfiprintf_r+0x202>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	059a      	lsls	r2, r3, #22
 800570e:	d402      	bmi.n	8005716 <_vfiprintf_r+0x202>
 8005710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005712:	f7ff fdcd 	bl	80052b0 <__retarget_lock_release_recursive>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	065b      	lsls	r3, r3, #25
 800571a:	f53f af1d 	bmi.w	8005558 <_vfiprintf_r+0x44>
 800571e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005720:	e71c      	b.n	800555c <_vfiprintf_r+0x48>
 8005722:	ab03      	add	r3, sp, #12
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	462a      	mov	r2, r5
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <_vfiprintf_r+0x22c>)
 800572a:	a904      	add	r1, sp, #16
 800572c:	4630      	mov	r0, r6
 800572e:	f000 f879 	bl	8005824 <_printf_i>
 8005732:	e7e4      	b.n	80056fe <_vfiprintf_r+0x1ea>
 8005734:	08005f24 	.word	0x08005f24
 8005738:	08005f2e 	.word	0x08005f2e
 800573c:	00000000 	.word	0x00000000
 8005740:	080054ef 	.word	0x080054ef
 8005744:	08005f2a 	.word	0x08005f2a

08005748 <_printf_common>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	4616      	mov	r6, r2
 800574e:	4699      	mov	r9, r3
 8005750:	688a      	ldr	r2, [r1, #8]
 8005752:	690b      	ldr	r3, [r1, #16]
 8005754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005758:	4293      	cmp	r3, r2
 800575a:	bfb8      	it	lt
 800575c:	4613      	movlt	r3, r2
 800575e:	6033      	str	r3, [r6, #0]
 8005760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005764:	4607      	mov	r7, r0
 8005766:	460c      	mov	r4, r1
 8005768:	b10a      	cbz	r2, 800576e <_printf_common+0x26>
 800576a:	3301      	adds	r3, #1
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0699      	lsls	r1, r3, #26
 8005772:	bf42      	ittt	mi
 8005774:	6833      	ldrmi	r3, [r6, #0]
 8005776:	3302      	addmi	r3, #2
 8005778:	6033      	strmi	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	f015 0506 	ands.w	r5, r5, #6
 8005780:	d106      	bne.n	8005790 <_printf_common+0x48>
 8005782:	f104 0a19 	add.w	sl, r4, #25
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	6832      	ldr	r2, [r6, #0]
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	42ab      	cmp	r3, r5
 800578e:	dc26      	bgt.n	80057de <_printf_common+0x96>
 8005790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005794:	1e13      	subs	r3, r2, #0
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	2301      	movne	r3, #1
 800579c:	0692      	lsls	r2, r2, #26
 800579e:	d42b      	bmi.n	80057f8 <_printf_common+0xb0>
 80057a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d01e      	beq.n	80057ec <_printf_common+0xa4>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf02      	ittt	eq
 80057ba:	68e5      	ldreq	r5, [r4, #12]
 80057bc:	6833      	ldreq	r3, [r6, #0]
 80057be:	1aed      	subeq	r5, r5, r3
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	bf0c      	ite	eq
 80057c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c8:	2500      	movne	r5, #0
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bfc4      	itt	gt
 80057ce:	1a9b      	subgt	r3, r3, r2
 80057d0:	18ed      	addgt	r5, r5, r3
 80057d2:	2600      	movs	r6, #0
 80057d4:	341a      	adds	r4, #26
 80057d6:	42b5      	cmp	r5, r6
 80057d8:	d11a      	bne.n	8005810 <_printf_common+0xc8>
 80057da:	2000      	movs	r0, #0
 80057dc:	e008      	b.n	80057f0 <_printf_common+0xa8>
 80057de:	2301      	movs	r3, #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	4649      	mov	r1, r9
 80057e4:	4638      	mov	r0, r7
 80057e6:	47c0      	blx	r8
 80057e8:	3001      	adds	r0, #1
 80057ea:	d103      	bne.n	80057f4 <_printf_common+0xac>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f4:	3501      	adds	r5, #1
 80057f6:	e7c6      	b.n	8005786 <_printf_common+0x3e>
 80057f8:	18e1      	adds	r1, r4, r3
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	2030      	movs	r0, #48	; 0x30
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005802:	4422      	add	r2, r4
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800580c:	3302      	adds	r3, #2
 800580e:	e7c7      	b.n	80057a0 <_printf_common+0x58>
 8005810:	2301      	movs	r3, #1
 8005812:	4622      	mov	r2, r4
 8005814:	4649      	mov	r1, r9
 8005816:	4638      	mov	r0, r7
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d0e6      	beq.n	80057ec <_printf_common+0xa4>
 800581e:	3601      	adds	r6, #1
 8005820:	e7d9      	b.n	80057d6 <_printf_common+0x8e>
	...

08005824 <_printf_i>:
 8005824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	7e0f      	ldrb	r7, [r1, #24]
 800582a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800582c:	2f78      	cmp	r7, #120	; 0x78
 800582e:	4691      	mov	r9, r2
 8005830:	4680      	mov	r8, r0
 8005832:	460c      	mov	r4, r1
 8005834:	469a      	mov	sl, r3
 8005836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800583a:	d807      	bhi.n	800584c <_printf_i+0x28>
 800583c:	2f62      	cmp	r7, #98	; 0x62
 800583e:	d80a      	bhi.n	8005856 <_printf_i+0x32>
 8005840:	2f00      	cmp	r7, #0
 8005842:	f000 80d4 	beq.w	80059ee <_printf_i+0x1ca>
 8005846:	2f58      	cmp	r7, #88	; 0x58
 8005848:	f000 80c0 	beq.w	80059cc <_printf_i+0x1a8>
 800584c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005854:	e03a      	b.n	80058cc <_printf_i+0xa8>
 8005856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800585a:	2b15      	cmp	r3, #21
 800585c:	d8f6      	bhi.n	800584c <_printf_i+0x28>
 800585e:	a101      	add	r1, pc, #4	; (adr r1, 8005864 <_printf_i+0x40>)
 8005860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058d1 	.word	0x080058d1
 800586c:	0800584d 	.word	0x0800584d
 8005870:	0800584d 	.word	0x0800584d
 8005874:	0800584d 	.word	0x0800584d
 8005878:	0800584d 	.word	0x0800584d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800584d 	.word	0x0800584d
 8005884:	0800584d 	.word	0x0800584d
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	080059d5 	.word	0x080059d5
 8005894:	080058fd 	.word	0x080058fd
 8005898:	0800598f 	.word	0x0800598f
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059f7 	.word	0x080059f7
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005997 	.word	0x08005997
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	602a      	str	r2, [r5, #0]
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09f      	b.n	8005a10 <_printf_i+0x1ec>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	0607      	lsls	r7, r0, #24
 80058d6:	f103 0104 	add.w	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	d501      	bpl.n	80058e2 <_printf_i+0xbe>
 80058de:	681e      	ldr	r6, [r3, #0]
 80058e0:	e003      	b.n	80058ea <_printf_i+0xc6>
 80058e2:	0646      	lsls	r6, r0, #25
 80058e4:	d5fb      	bpl.n	80058de <_printf_i+0xba>
 80058e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	da03      	bge.n	80058f6 <_printf_i+0xd2>
 80058ee:	232d      	movs	r3, #45	; 0x2d
 80058f0:	4276      	negs	r6, r6
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	485a      	ldr	r0, [pc, #360]	; (8005a60 <_printf_i+0x23c>)
 80058f8:	230a      	movs	r3, #10
 80058fa:	e012      	b.n	8005922 <_printf_i+0xfe>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	1d19      	adds	r1, r3, #4
 8005902:	6029      	str	r1, [r5, #0]
 8005904:	0605      	lsls	r5, r0, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xe8>
 8005908:	681e      	ldr	r6, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0xee>
 800590c:	0641      	lsls	r1, r0, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xe4>
 8005910:	881e      	ldrh	r6, [r3, #0]
 8005912:	4853      	ldr	r0, [pc, #332]	; (8005a60 <_printf_i+0x23c>)
 8005914:	2f6f      	cmp	r7, #111	; 0x6f
 8005916:	bf0c      	ite	eq
 8005918:	2308      	moveq	r3, #8
 800591a:	230a      	movne	r3, #10
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005922:	6865      	ldr	r5, [r4, #4]
 8005924:	60a5      	str	r5, [r4, #8]
 8005926:	2d00      	cmp	r5, #0
 8005928:	bfa2      	ittt	ge
 800592a:	6821      	ldrge	r1, [r4, #0]
 800592c:	f021 0104 	bicge.w	r1, r1, #4
 8005930:	6021      	strge	r1, [r4, #0]
 8005932:	b90e      	cbnz	r6, 8005938 <_printf_i+0x114>
 8005934:	2d00      	cmp	r5, #0
 8005936:	d04b      	beq.n	80059d0 <_printf_i+0x1ac>
 8005938:	4615      	mov	r5, r2
 800593a:	fbb6 f1f3 	udiv	r1, r6, r3
 800593e:	fb03 6711 	mls	r7, r3, r1, r6
 8005942:	5dc7      	ldrb	r7, [r0, r7]
 8005944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005948:	4637      	mov	r7, r6
 800594a:	42bb      	cmp	r3, r7
 800594c:	460e      	mov	r6, r1
 800594e:	d9f4      	bls.n	800593a <_printf_i+0x116>
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <_printf_i+0x148>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07de      	lsls	r6, r3, #31
 8005958:	d508      	bpl.n	800596c <_printf_i+0x148>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	4299      	cmp	r1, r3
 8005960:	bfde      	ittt	le
 8005962:	2330      	movle	r3, #48	; 0x30
 8005964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800596c:	1b52      	subs	r2, r2, r5
 800596e:	6122      	str	r2, [r4, #16]
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	464b      	mov	r3, r9
 8005976:	aa03      	add	r2, sp, #12
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fee4 	bl	8005748 <_printf_common>
 8005980:	3001      	adds	r0, #1
 8005982:	d14a      	bne.n	8005a1a <_printf_i+0x1f6>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b004      	add	sp, #16
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	4833      	ldr	r0, [pc, #204]	; (8005a64 <_printf_i+0x240>)
 8005998:	2778      	movs	r7, #120	; 0x78
 800599a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6829      	ldr	r1, [r5, #0]
 80059a2:	061f      	lsls	r7, r3, #24
 80059a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059a8:	d402      	bmi.n	80059b0 <_printf_i+0x18c>
 80059aa:	065f      	lsls	r7, r3, #25
 80059ac:	bf48      	it	mi
 80059ae:	b2b6      	uxthmi	r6, r6
 80059b0:	07df      	lsls	r7, r3, #31
 80059b2:	bf48      	it	mi
 80059b4:	f043 0320 	orrmi.w	r3, r3, #32
 80059b8:	6029      	str	r1, [r5, #0]
 80059ba:	bf48      	it	mi
 80059bc:	6023      	strmi	r3, [r4, #0]
 80059be:	b91e      	cbnz	r6, 80059c8 <_printf_i+0x1a4>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	f023 0320 	bic.w	r3, r3, #32
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2310      	movs	r3, #16
 80059ca:	e7a7      	b.n	800591c <_printf_i+0xf8>
 80059cc:	4824      	ldr	r0, [pc, #144]	; (8005a60 <_printf_i+0x23c>)
 80059ce:	e7e4      	b.n	800599a <_printf_i+0x176>
 80059d0:	4615      	mov	r5, r2
 80059d2:	e7bd      	b.n	8005950 <_printf_i+0x12c>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6826      	ldr	r6, [r4, #0]
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6028      	str	r0, [r5, #0]
 80059de:	0635      	lsls	r5, r6, #24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0x1c4>
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0x1ca>
 80059e8:	0670      	lsls	r0, r6, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0x1c0>
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	4615      	mov	r5, r2
 80059f4:	e7bc      	b.n	8005970 <_printf_i+0x14c>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7fa fc04 	bl	8000210 <memchr>
 8005a08:	b108      	cbz	r0, 8005a0e <_printf_i+0x1ea>
 8005a0a:	1b40      	subs	r0, r0, r5
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	e7aa      	b.n	8005970 <_printf_i+0x14c>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0ad      	beq.n	8005984 <_printf_i+0x160>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d413      	bmi.n	8005a56 <_printf_i+0x232>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e7a6      	b.n	8005988 <_printf_i+0x164>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d09d      	beq.n	8005984 <_printf_i+0x160>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dcf2      	bgt.n	8005a3a <_printf_i+0x216>
 8005a54:	e7eb      	b.n	8005a2e <_printf_i+0x20a>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f104 0619 	add.w	r6, r4, #25
 8005a5c:	e7f5      	b.n	8005a4a <_printf_i+0x226>
 8005a5e:	bf00      	nop
 8005a60:	08005f35 	.word	0x08005f35
 8005a64:	08005f46 	.word	0x08005f46

08005a68 <__sflush_r>:
 8005a68:	898a      	ldrh	r2, [r1, #12]
 8005a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	4605      	mov	r5, r0
 8005a70:	0710      	lsls	r0, r2, #28
 8005a72:	460c      	mov	r4, r1
 8005a74:	d458      	bmi.n	8005b28 <__sflush_r+0xc0>
 8005a76:	684b      	ldr	r3, [r1, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc05      	bgt.n	8005a88 <__sflush_r+0x20>
 8005a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dc02      	bgt.n	8005a88 <__sflush_r+0x20>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	d0f9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a94:	682f      	ldr	r7, [r5, #0]
 8005a96:	6a21      	ldr	r1, [r4, #32]
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	d032      	beq.n	8005b02 <__sflush_r+0x9a>
 8005a9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	075a      	lsls	r2, r3, #29
 8005aa2:	d505      	bpl.n	8005ab0 <__sflush_r+0x48>
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	1ac0      	subs	r0, r0, r3
 8005aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aaa:	b10b      	cbz	r3, 8005ab0 <__sflush_r+0x48>
 8005aac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aae:	1ac0      	subs	r0, r0, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b0      	blx	r6
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	d106      	bne.n	8005ad0 <__sflush_r+0x68>
 8005ac2:	6829      	ldr	r1, [r5, #0]
 8005ac4:	291d      	cmp	r1, #29
 8005ac6:	d82b      	bhi.n	8005b20 <__sflush_r+0xb8>
 8005ac8:	4a29      	ldr	r2, [pc, #164]	; (8005b70 <__sflush_r+0x108>)
 8005aca:	410a      	asrs	r2, r1
 8005acc:	07d6      	lsls	r6, r2, #31
 8005ace:	d427      	bmi.n	8005b20 <__sflush_r+0xb8>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	6062      	str	r2, [r4, #4]
 8005ad4:	04d9      	lsls	r1, r3, #19
 8005ad6:	6922      	ldr	r2, [r4, #16]
 8005ad8:	6022      	str	r2, [r4, #0]
 8005ada:	d504      	bpl.n	8005ae6 <__sflush_r+0x7e>
 8005adc:	1c42      	adds	r2, r0, #1
 8005ade:	d101      	bne.n	8005ae4 <__sflush_r+0x7c>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b903      	cbnz	r3, 8005ae6 <__sflush_r+0x7e>
 8005ae4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ae8:	602f      	str	r7, [r5, #0]
 8005aea:	2900      	cmp	r1, #0
 8005aec:	d0c9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d002      	beq.n	8005afc <__sflush_r+0x94>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff fbea 	bl	80052d0 <_free_r>
 8005afc:	2000      	movs	r0, #0
 8005afe:	6360      	str	r0, [r4, #52]	; 0x34
 8005b00:	e7c0      	b.n	8005a84 <__sflush_r+0x1c>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b0      	blx	r6
 8005b08:	1c41      	adds	r1, r0, #1
 8005b0a:	d1c8      	bne.n	8005a9e <__sflush_r+0x36>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c5      	beq.n	8005a9e <__sflush_r+0x36>
 8005b12:	2b1d      	cmp	r3, #29
 8005b14:	d001      	beq.n	8005b1a <__sflush_r+0xb2>
 8005b16:	2b16      	cmp	r3, #22
 8005b18:	d101      	bne.n	8005b1e <__sflush_r+0xb6>
 8005b1a:	602f      	str	r7, [r5, #0]
 8005b1c:	e7b1      	b.n	8005a82 <__sflush_r+0x1a>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	e7ad      	b.n	8005a84 <__sflush_r+0x1c>
 8005b28:	690f      	ldr	r7, [r1, #16]
 8005b2a:	2f00      	cmp	r7, #0
 8005b2c:	d0a9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005b2e:	0793      	lsls	r3, r2, #30
 8005b30:	680e      	ldr	r6, [r1, #0]
 8005b32:	bf08      	it	eq
 8005b34:	694b      	ldreq	r3, [r1, #20]
 8005b36:	600f      	str	r7, [r1, #0]
 8005b38:	bf18      	it	ne
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	eba6 0807 	sub.w	r8, r6, r7
 8005b40:	608b      	str	r3, [r1, #8]
 8005b42:	f1b8 0f00 	cmp.w	r8, #0
 8005b46:	dd9c      	ble.n	8005a82 <__sflush_r+0x1a>
 8005b48:	6a21      	ldr	r1, [r4, #32]
 8005b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	463a      	mov	r2, r7
 8005b50:	4628      	mov	r0, r5
 8005b52:	47b0      	blx	r6
 8005b54:	2800      	cmp	r0, #0
 8005b56:	dc06      	bgt.n	8005b66 <__sflush_r+0xfe>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e78e      	b.n	8005a84 <__sflush_r+0x1c>
 8005b66:	4407      	add	r7, r0
 8005b68:	eba8 0800 	sub.w	r8, r8, r0
 8005b6c:	e7e9      	b.n	8005b42 <__sflush_r+0xda>
 8005b6e:	bf00      	nop
 8005b70:	dfbffffe 	.word	0xdfbffffe

08005b74 <_fflush_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	690b      	ldr	r3, [r1, #16]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	b913      	cbnz	r3, 8005b84 <_fflush_r+0x10>
 8005b7e:	2500      	movs	r5, #0
 8005b80:	4628      	mov	r0, r5
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	b118      	cbz	r0, 8005b8e <_fflush_r+0x1a>
 8005b86:	6a03      	ldr	r3, [r0, #32]
 8005b88:	b90b      	cbnz	r3, 8005b8e <_fflush_r+0x1a>
 8005b8a:	f7ff fa8b 	bl	80050a4 <__sinit>
 8005b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f3      	beq.n	8005b7e <_fflush_r+0xa>
 8005b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b98:	07d0      	lsls	r0, r2, #31
 8005b9a:	d404      	bmi.n	8005ba6 <_fflush_r+0x32>
 8005b9c:	0599      	lsls	r1, r3, #22
 8005b9e:	d402      	bmi.n	8005ba6 <_fflush_r+0x32>
 8005ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba2:	f7ff fb84 	bl	80052ae <__retarget_lock_acquire_recursive>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	4621      	mov	r1, r4
 8005baa:	f7ff ff5d 	bl	8005a68 <__sflush_r>
 8005bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bb0:	07da      	lsls	r2, r3, #31
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	d4e4      	bmi.n	8005b80 <_fflush_r+0xc>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	059b      	lsls	r3, r3, #22
 8005bba:	d4e1      	bmi.n	8005b80 <_fflush_r+0xc>
 8005bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bbe:	f7ff fb77 	bl	80052b0 <__retarget_lock_release_recursive>
 8005bc2:	e7dd      	b.n	8005b80 <_fflush_r+0xc>

08005bc4 <__swbuf_r>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	4605      	mov	r5, r0
 8005bcc:	b118      	cbz	r0, 8005bd6 <__swbuf_r+0x12>
 8005bce:	6a03      	ldr	r3, [r0, #32]
 8005bd0:	b90b      	cbnz	r3, 8005bd6 <__swbuf_r+0x12>
 8005bd2:	f7ff fa67 	bl	80050a4 <__sinit>
 8005bd6:	69a3      	ldr	r3, [r4, #24]
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	071a      	lsls	r2, r3, #28
 8005bde:	d525      	bpl.n	8005c2c <__swbuf_r+0x68>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	b31b      	cbz	r3, 8005c2c <__swbuf_r+0x68>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	6922      	ldr	r2, [r4, #16]
 8005be8:	1a98      	subs	r0, r3, r2
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	b2f6      	uxtb	r6, r6
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	4637      	mov	r7, r6
 8005bf2:	dc04      	bgt.n	8005bfe <__swbuf_r+0x3a>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff ffbc 	bl	8005b74 <_fflush_r>
 8005bfc:	b9e0      	cbnz	r0, 8005c38 <__swbuf_r+0x74>
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	701e      	strb	r6, [r3, #0]
 8005c0c:	6962      	ldr	r2, [r4, #20]
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d004      	beq.n	8005c1e <__swbuf_r+0x5a>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	07db      	lsls	r3, r3, #31
 8005c18:	d506      	bpl.n	8005c28 <__swbuf_r+0x64>
 8005c1a:	2e0a      	cmp	r6, #10
 8005c1c:	d104      	bne.n	8005c28 <__swbuf_r+0x64>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f7ff ffa7 	bl	8005b74 <_fflush_r>
 8005c26:	b938      	cbnz	r0, 8005c38 <__swbuf_r+0x74>
 8005c28:	4638      	mov	r0, r7
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 f806 	bl	8005c40 <__swsetup_r>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0d5      	beq.n	8005be4 <__swbuf_r+0x20>
 8005c38:	f04f 37ff 	mov.w	r7, #4294967295
 8005c3c:	e7f4      	b.n	8005c28 <__swbuf_r+0x64>
	...

08005c40 <__swsetup_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4b2a      	ldr	r3, [pc, #168]	; (8005cec <__swsetup_r+0xac>)
 8005c44:	4605      	mov	r5, r0
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	460c      	mov	r4, r1
 8005c4a:	b118      	cbz	r0, 8005c54 <__swsetup_r+0x14>
 8005c4c:	6a03      	ldr	r3, [r0, #32]
 8005c4e:	b90b      	cbnz	r3, 8005c54 <__swsetup_r+0x14>
 8005c50:	f7ff fa28 	bl	80050a4 <__sinit>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c5a:	0718      	lsls	r0, r3, #28
 8005c5c:	d422      	bmi.n	8005ca4 <__swsetup_r+0x64>
 8005c5e:	06d9      	lsls	r1, r3, #27
 8005c60:	d407      	bmi.n	8005c72 <__swsetup_r+0x32>
 8005c62:	2309      	movs	r3, #9
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	e034      	b.n	8005cdc <__swsetup_r+0x9c>
 8005c72:	0758      	lsls	r0, r3, #29
 8005c74:	d512      	bpl.n	8005c9c <__swsetup_r+0x5c>
 8005c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c78:	b141      	cbz	r1, 8005c8c <__swsetup_r+0x4c>
 8005c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d002      	beq.n	8005c88 <__swsetup_r+0x48>
 8005c82:	4628      	mov	r0, r5
 8005c84:	f7ff fb24 	bl	80052d0 <_free_r>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	2300      	movs	r3, #0
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f043 0308 	orr.w	r3, r3, #8
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	b94b      	cbnz	r3, 8005cbc <__swsetup_r+0x7c>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d003      	beq.n	8005cbc <__swsetup_r+0x7c>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 f850 	bl	8005d5c <__smakebuf_r>
 8005cbc:	89a0      	ldrh	r0, [r4, #12]
 8005cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cc2:	f010 0301 	ands.w	r3, r0, #1
 8005cc6:	d00a      	beq.n	8005cde <__swsetup_r+0x9e>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	6963      	ldr	r3, [r4, #20]
 8005cce:	425b      	negs	r3, r3
 8005cd0:	61a3      	str	r3, [r4, #24]
 8005cd2:	6923      	ldr	r3, [r4, #16]
 8005cd4:	b943      	cbnz	r3, 8005ce8 <__swsetup_r+0xa8>
 8005cd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cda:	d1c4      	bne.n	8005c66 <__swsetup_r+0x26>
 8005cdc:	bd38      	pop	{r3, r4, r5, pc}
 8005cde:	0781      	lsls	r1, r0, #30
 8005ce0:	bf58      	it	pl
 8005ce2:	6963      	ldrpl	r3, [r4, #20]
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	e7f4      	b.n	8005cd2 <__swsetup_r+0x92>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e7f7      	b.n	8005cdc <__swsetup_r+0x9c>
 8005cec:	20000068 	.word	0x20000068

08005cf0 <_sbrk_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	; (8005d0c <_sbrk_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fa ff16 	bl	8000b2c <_sbrk>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_sbrk_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_sbrk_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20004b78 	.word	0x20004b78

08005d10 <__swhatbuf_r>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	460c      	mov	r4, r1
 8005d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	b096      	sub	sp, #88	; 0x58
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	461e      	mov	r6, r3
 8005d20:	da0d      	bge.n	8005d3e <__swhatbuf_r+0x2e>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d28:	f04f 0100 	mov.w	r1, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d32:	2340      	movne	r3, #64	; 0x40
 8005d34:	2000      	movs	r0, #0
 8005d36:	6031      	str	r1, [r6, #0]
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	b016      	add	sp, #88	; 0x58
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	466a      	mov	r2, sp
 8005d40:	f000 f848 	bl	8005dd4 <_fstat_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	dbec      	blt.n	8005d22 <__swhatbuf_r+0x12>
 8005d48:	9901      	ldr	r1, [sp, #4]
 8005d4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d52:	4259      	negs	r1, r3
 8005d54:	4159      	adcs	r1, r3
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	e7eb      	b.n	8005d34 <__swhatbuf_r+0x24>

08005d5c <__smakebuf_r>:
 8005d5c:	898b      	ldrh	r3, [r1, #12]
 8005d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d60:	079d      	lsls	r5, r3, #30
 8005d62:	4606      	mov	r6, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	d507      	bpl.n	8005d78 <__smakebuf_r+0x1c>
 8005d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	6123      	str	r3, [r4, #16]
 8005d70:	2301      	movs	r3, #1
 8005d72:	6163      	str	r3, [r4, #20]
 8005d74:	b002      	add	sp, #8
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	ab01      	add	r3, sp, #4
 8005d7a:	466a      	mov	r2, sp
 8005d7c:	f7ff ffc8 	bl	8005d10 <__swhatbuf_r>
 8005d80:	9900      	ldr	r1, [sp, #0]
 8005d82:	4605      	mov	r5, r0
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff fb0f 	bl	80053a8 <_malloc_r>
 8005d8a:	b948      	cbnz	r0, 8005da0 <__smakebuf_r+0x44>
 8005d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d90:	059a      	lsls	r2, r3, #22
 8005d92:	d4ef      	bmi.n	8005d74 <__smakebuf_r+0x18>
 8005d94:	f023 0303 	bic.w	r3, r3, #3
 8005d98:	f043 0302 	orr.w	r3, r3, #2
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	e7e3      	b.n	8005d68 <__smakebuf_r+0xc>
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	6020      	str	r0, [r4, #0]
 8005da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	9b00      	ldr	r3, [sp, #0]
 8005dac:	6163      	str	r3, [r4, #20]
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	6120      	str	r0, [r4, #16]
 8005db2:	b15b      	cbz	r3, 8005dcc <__smakebuf_r+0x70>
 8005db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db8:	4630      	mov	r0, r6
 8005dba:	f000 f81d 	bl	8005df8 <_isatty_r>
 8005dbe:	b128      	cbz	r0, 8005dcc <__smakebuf_r+0x70>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	431d      	orrs	r5, r3
 8005dd0:	81a5      	strh	r5, [r4, #12]
 8005dd2:	e7cf      	b.n	8005d74 <__smakebuf_r+0x18>

08005dd4 <_fstat_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_fstat_r+0x20>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	f7fa fe7a 	bl	8000ada <_fstat>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d102      	bne.n	8005df0 <_fstat_r+0x1c>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	b103      	cbz	r3, 8005df0 <_fstat_r+0x1c>
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
 8005df2:	bf00      	nop
 8005df4:	20004b78 	.word	0x20004b78

08005df8 <_isatty_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	; (8005e14 <_isatty_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fa fe79 	bl	8000afa <_isatty>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_isatty_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_isatty_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	20004b78 	.word	0x20004b78

08005e18 <_init>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr

08005e24 <_fini>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	bf00      	nop
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr
