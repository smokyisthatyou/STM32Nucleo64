
priority_inversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d0c  08005d0c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b8  2000006c  08005d80  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004224  08005d80  00024224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014282  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318c  00000000  00000000  00034361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  000374f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e83  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002488d  00000000  00000000  0003962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dc5  00000000  00000000  0005deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db832  00000000  00000000  00073c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005428  00000000  00000000  0014f4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001548d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b20 	.word	0x08005b20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005b20 	.word	0x08005b20

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000088 	.word	0x20000088
 800053c:	200000dc 	.word	0x200000dc

08000540 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000548:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800054c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d013      	beq.n	8000580 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000560:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000568:	e000      	b.n	800056c <ITM_SendChar+0x2c>
    {
      __NOP();
 800056a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800056c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f9      	beq.n	800056a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000576:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
	int i = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e009      	b.n	80005b8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	60ba      	str	r2, [r7, #8]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffc7 	bl	8000540 <ITM_SendChar>
	for(i=0;i<len;i++){
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3301      	adds	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dbf1      	blt.n	80005a4 <_write+0x16>
	}
	return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b098      	sub	sp, #96	; 0x60
 80005d0:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fbbb 	bl	8000d4c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f85d 	bl	8000694 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f8f3 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f8c7 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  //osSemaphoreDef(BinSem);
  //BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
  osMutexDef(Mutex);
 80005e2:	2300      	movs	r3, #0
 80005e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80005e6:	2300      	movs	r3, #0
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  MutexHandle = osMutexCreate(osMutex(Mutex));
 80005ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 faa7 	bl	8002b42 <osMutexCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a1f      	ldr	r2, [pc, #124]	; (8000674 <main+0xa8>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, Startnormaltask, osPriorityNormal, 0, 128);
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <main+0xac>)
 80005fc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 800060e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fa34 	bl	8002a82 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <main+0xb0>)
 800061e:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, Starthightask, osPriorityAboveNormal, 0, 128);
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <main+0xb4>)
 8000622:	f107 0420 	add.w	r4, r7, #32
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa21 	bl	8002a82 <osThreadCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <main+0xb8>)
 8000644:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, Startlowtask, osPriorityLow, 0, 128);
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <main+0xbc>)
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fa10 	bl	8002a82 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <main+0xc0>)
 8000666:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  printf(" Start Scheduling...\n");
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <main+0xc4>)
 800066a:	f004 feb5 	bl	80053d8 <puts>
  osKernelStart();
 800066e:	f002 fa01 	bl	8002a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0xa6>
 8000674:	20000330 	.word	0x20000330
 8000678:	08005b5c 	.word	0x08005b5c
 800067c:	20000324 	.word	0x20000324
 8000680:	08005b84 	.word	0x08005b84
 8000684:	20000328 	.word	0x20000328
 8000688:	08005ba8 	.word	0x08005ba8
 800068c:	2000032c 	.word	0x2000032c
 8000690:	08005b38 	.word	0x08005b38

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 ff78 	bl	8005598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	; (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f978 	bl	8001a18 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f93d 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fde6 	bl	8001320 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 f927 	bl	80009ac <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 fe76 	bl	8002498 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8fb 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002dc 	.word	0x200002dc
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a25      	ldr	r2, [pc, #148]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <MX_GPIO_Init+0xd0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000850:	f000 fd4c 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_GPIO_Init+0xd8>)
 800086c:	f000 fb92 	bl	8000f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000888:	f000 fb84 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800

080008a0 <Startnormaltask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Startnormaltask(void const * argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //char *str1 = "Entered NormalTask\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), 100);
	  printf(" Entered Normal task \n");
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <Startnormaltask+0x20>)
 80008aa:	f004 fd95 	bl	80053d8 <puts>

	  //char *str2 = "LeavingNormalTask\n\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), 100);
	  printf(" Leaving Normal task \n");
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <Startnormaltask+0x24>)
 80008b0:	f004 fd92 	bl	80053d8 <puts>

	  osDelay(500);
 80008b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b8:	f002 f92f 	bl	8002b1a <osDelay>
	  printf(" Entered Normal task \n");
 80008bc:	e7f4      	b.n	80008a8 <Startnormaltask+0x8>
 80008be:	bf00      	nop
 80008c0:	08005bc4 	.word	0x08005bc4
 80008c4:	08005bdc 	.word	0x08005bdc

080008c8 <Starthightask>:
  }
}

void Starthightask(void const * argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //char *str1 = "Entered HighTask and waiting for semaphore\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), 100);
	  printf( " Entered HighTask and waiting for semaphore\n");
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <Starthightask+0x44>)
 80008d2:	f004 fd81 	bl	80053d8 <puts>
	  //taskENTER_CRITICAL();
	  osSemaphoreWait(MutexHandle, osWaitForever);
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <Starthightask+0x48>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f04f 31ff 	mov.w	r1, #4294967295
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f948 	bl	8002b74 <osSemaphoreWait>
	  taskENTER_CRITICAL();
 80008e4:	f004 f956 	bl	8004b94 <vPortEnterCritical>

	  //char *str3 = "Semaphore acquired by HighTask\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen (str3), 100);
	  printf(" Semaphore acquired by HighTask\n");
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <Starthightask+0x4c>)
 80008ea:	f004 fd75 	bl	80053d8 <puts>

	  //char *str2 = "Leaving HighTask and releasing Semaphore \n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), 100);
	  printf(" Leaving HighTask and releasing Semaphore\n");
 80008ee:	480a      	ldr	r0, [pc, #40]	; (8000918 <Starthightask+0x50>)
 80008f0:	f004 fd72 	bl	80053d8 <puts>

	  taskEXIT_CRITICAL();
 80008f4:	f004 f97e 	bl	8004bf4 <vPortExitCritical>
	  osSemaphoreRelease(MutexHandle);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <Starthightask+0x48>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f987 	bl	8002c10 <osSemaphoreRelease>
	  //taskEXIT_CRITICAL();

	  osDelay(500);
 8000902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000906:	f002 f908 	bl	8002b1a <osDelay>
	  printf( " Entered HighTask and waiting for semaphore\n");
 800090a:	e7e1      	b.n	80008d0 <Starthightask+0x8>
 800090c:	08005bf4 	.word	0x08005bf4
 8000910:	20000330 	.word	0x20000330
 8000914:	08005c20 	.word	0x08005c20
 8000918:	08005c40 	.word	0x08005c40

0800091c <Startlowtask>:
  }
}

void Startlowtask(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //char *str1 = "Entered LowTask and waiting for semaphore\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), 100);
	  printf(" Entered LowTask and waiting for semaphore\n");
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <Startlowtask+0x58>)
 8000926:	f004 fd57 	bl	80053d8 <puts>
	  //taskENTER_CRITICAL();
	  osSemaphoreWait(MutexHandle, osWaitForever);
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <Startlowtask+0x5c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f04f 31ff 	mov.w	r1, #4294967295
 8000932:	4618      	mov	r0, r3
 8000934:	f002 f91e 	bl	8002b74 <osSemaphoreWait>
	  taskENTER_CRITICAL();
 8000938:	f004 f92c 	bl	8004b94 <vPortEnterCritical>

	  //char *str3 = "Semaphore acquired by LowTask\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen (str3), 100);
	  printf(" Semaphore acquired by LowTask\n");
 800093c:	480f      	ldr	r0, [pc, #60]	; (800097c <Startlowtask+0x60>)
 800093e:	f004 fd4b 	bl	80053d8 <puts>

	  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)); //start first exec and thatn wait until the pin go low
 8000942:	bf00      	nop
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <Startlowtask+0x64>)
 800094a:	f000 fcb7 	bl	80012bc <HAL_GPIO_ReadPin>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f7      	bne.n	8000944 <Startlowtask+0x28>

	  //char *str2 = "Leaving LowTask and releasing Semaphore\n";
	  //HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), 100);
	  printf(" Leaving LowTask and releasing Semaphore\n");
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <Startlowtask+0x68>)
 8000956:	f004 fd3f 	bl	80053d8 <puts>

	  taskEXIT_CRITICAL();
 800095a:	f004 f94b 	bl	8004bf4 <vPortExitCritical>
	  osSemaphoreRelease(MutexHandle);
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <Startlowtask+0x5c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f002 f954 	bl	8002c10 <osSemaphoreRelease>
	  //taskEXIT_CRITICAL();

	  osDelay(500);
 8000968:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096c:	f002 f8d5 	bl	8002b1a <osDelay>
	  printf(" Entered LowTask and waiting for semaphore\n");
 8000970:	e7d8      	b.n	8000924 <Startlowtask+0x8>
 8000972:	bf00      	nop
 8000974:	08005c6c 	.word	0x08005c6c
 8000978:	20000330 	.word	0x20000330
 800097c:	08005c98 	.word	0x08005c98
 8000980:	40020800 	.word	0x40020800
 8000984:	08005cb8 	.word	0x08005cb8

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 f9f9 	bl	8000d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010000 	.word	0x40010000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  osErrorOS;
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fa9f 	bl	8000f40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a86:	f000 fa85 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40004400 	.word	0x40004400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_InitTick+0xd0>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <HAL_InitTick+0xd0>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <HAL_InitTick+0xd0>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000acc:	f107 020c 	add.w	r2, r7, #12
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fd3c 	bl	8001554 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000adc:	f000 fd26 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 8000ae0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae4:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <HAL_InitTick+0xd4>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	0c9b      	lsrs	r3, r3, #18
 8000aec:	3b01      	subs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_InitTick+0xd8>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_InitTick+0xdc>)
 8000af4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_InitTick+0xd8>)
 8000af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000afc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000afe:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b18:	f001 fa1c 	bl	8001f54 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d11b      	bne.n	8000b62 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <HAL_InitTick+0xd8>)
 8000b2c:	f001 fa6c 	bl	8002008 <HAL_TIM_Base_Start_IT>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d111      	bne.n	8000b62 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f000 fa1a 	bl	8000f78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d808      	bhi.n	8000b5c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	2019      	movs	r0, #25
 8000b50:	f000 f9f6 	bl	8000f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_InitTick+0xe0>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e002      	b.n	8000b62 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3730      	adds	r7, #48	; 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20000334 	.word	0x20000334
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	20000004 	.word	0x20000004

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bb6:	f001 fa97 	bl	80020e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000334 	.word	0x20000334

08000bc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
  }

  return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c26:	605a      	str	r2, [r3, #4]
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_isatty>:

int _isatty(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f004 fccc 	bl	8005634 <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20020000 	.word	0x20020000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	2000037c 	.word	0x2000037c
 8000cd0:	20004228 	.word	0x20004228

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f004 fc8b 	bl	8005640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fc4f 	bl	80005cc <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d3c:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8000d40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d44:	20004224 	.word	0x20004224

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_Init+0x40>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_Init+0x40>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x40>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f8d8 	bl	8000f2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f7ff fe90 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fe1a 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000380 	.word	0x20000380

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000380 	.word	0x20000380

08000dd0 <__NVIC_SetPriorityGrouping>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff4c 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f52:	f7ff ff61 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f7ff ffb1 	bl	8000ec4 <NVIC_EncodePriority>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff80 	bl	8000e70 <__NVIC_SetPriority>
}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff54 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e165      	b.n	800127c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8154 	bne.w	8001276 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80ae 	beq.w	8001276 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <HAL_GPIO_Init+0x300>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a5c      	ldr	r2, [pc, #368]	; (8001294 <HAL_GPIO_Init+0x300>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <HAL_GPIO_Init+0x300>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4f      	ldr	r2, [pc, #316]	; (800129c <HAL_GPIO_Init+0x308>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_GPIO_Init+0x30c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x216>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <HAL_GPIO_Init+0x310>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x212>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4c      	ldr	r2, [pc, #304]	; (80012a8 <HAL_GPIO_Init+0x314>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x20e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4b      	ldr	r2, [pc, #300]	; (80012ac <HAL_GPIO_Init+0x318>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x20a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4a      	ldr	r2, [pc, #296]	; (80012b0 <HAL_GPIO_Init+0x31c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x206>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_GPIO_Init+0x320>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x202>
 8001192:	2306      	movs	r3, #6
 8001194:	e00c      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 8001196:	2307      	movs	r3, #7
 8001198:	e00a      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 800119a:	2305      	movs	r3, #5
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 800119e:	2304      	movs	r3, #4
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x21c>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_GPIO_Init+0x324>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f2:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <HAL_GPIO_Init+0x324>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x324>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_GPIO_Init+0x324>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_GPIO_Init+0x324>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_GPIO_Init+0x324>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x324>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_GPIO_Init+0x324>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f ae96 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40021400 	.word	0x40021400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fcd2 	bl	8000db8 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fcce 	bl	8000db8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f887 	bl	80015b8 <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff faea 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08005cec 	.word	0x08005cec
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08005cfc 	.word	0x08005cfc

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff ffdc 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	0b5b      	lsrs	r3, r3, #13
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	08005cfc 	.word	0x08005cfc

08001554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	220f      	movs	r2, #15
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_RCC_GetClockConfig+0x60>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 020f 	and.w	r2, r3, #15
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015bc:	b0ae      	sub	sp, #184	; 0xb8
 80015be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015de:	4bcb      	ldr	r3, [pc, #812]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f200 8206 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x440>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001629 	.word	0x08001629
 80015f8:	080019f9 	.word	0x080019f9
 80015fc:	080019f9 	.word	0x080019f9
 8001600:	080019f9 	.word	0x080019f9
 8001604:	08001631 	.word	0x08001631
 8001608:	080019f9 	.word	0x080019f9
 800160c:	080019f9 	.word	0x080019f9
 8001610:	080019f9 	.word	0x080019f9
 8001614:	08001639 	.word	0x08001639
 8001618:	080019f9 	.word	0x080019f9
 800161c:	080019f9 	.word	0x080019f9
 8001620:	080019f9 	.word	0x080019f9
 8001624:	08001829 	.word	0x08001829
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001628:	4bb9      	ldr	r3, [pc, #740]	; (8001910 <HAL_RCC_GetSysClockFreq+0x358>)
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800162e:	e1e7      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4bb8      	ldr	r3, [pc, #736]	; (8001914 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001636:	e1e3      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4bb4      	ldr	r3, [pc, #720]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001644:	4bb1      	ldr	r3, [pc, #708]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d071      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001650:	4bae      	ldr	r3, [pc, #696]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	2200      	movs	r2, #0
 8001658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800165c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	0159      	lsls	r1, r3, #5
 8001684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001688:	0150      	lsls	r0, r2, #5
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4621      	mov	r1, r4
 8001690:	1a51      	subs	r1, r2, r1
 8001692:	6439      	str	r1, [r7, #64]	; 0x40
 8001694:	4629      	mov	r1, r5
 8001696:	eb63 0301 	sbc.w	r3, r3, r1
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016a8:	4649      	mov	r1, r9
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	4641      	mov	r1, r8
 80016ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b2:	4641      	mov	r1, r8
 80016b4:	018a      	lsls	r2, r1, #6
 80016b6:	4641      	mov	r1, r8
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80016bc:	4649      	mov	r1, r9
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016d0:	4649      	mov	r1, r9
 80016d2:	00cb      	lsls	r3, r1, #3
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016da:	4641      	mov	r1, r8
 80016dc:	00ca      	lsls	r2, r1, #3
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	4622      	mov	r2, r4
 80016e6:	189b      	adds	r3, r3, r2
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ea:	462b      	mov	r3, r5
 80016ec:	460a      	mov	r2, r1
 80016ee:	eb42 0303 	adc.w	r3, r2, r3
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001700:	4629      	mov	r1, r5
 8001702:	024b      	lsls	r3, r1, #9
 8001704:	4621      	mov	r1, r4
 8001706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800170a:	4621      	mov	r1, r4
 800170c:	024a      	lsls	r2, r1, #9
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001716:	2200      	movs	r2, #0
 8001718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800171c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001720:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001724:	f7fe fd74 	bl	8000210 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4613      	mov	r3, r2
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001732:	e067      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	2200      	movs	r2, #0
 800173c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001740:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174c:	67bb      	str	r3, [r7, #120]	; 0x78
 800174e:	2300      	movs	r3, #0
 8001750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001752:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4621      	mov	r1, r4
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	62b9      	str	r1, [r7, #40]	; 0x28
 8001774:	4629      	mov	r1, r5
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001788:	4649      	mov	r1, r9
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4641      	mov	r1, r8
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4641      	mov	r1, r8
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4641      	mov	r1, r8
 8001798:	ebb2 0a01 	subs.w	sl, r2, r1
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017b6:	4692      	mov	sl, r2
 80017b8:	469b      	mov	fp, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	eb1a 0303 	adds.w	r3, sl, r3
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	462b      	mov	r3, r5
 80017c4:	eb4b 0303 	adc.w	r3, fp, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e0:	4621      	mov	r1, r4
 80017e2:	028a      	lsls	r2, r1, #10
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ec:	2200      	movs	r2, #0
 80017ee:	673b      	str	r3, [r7, #112]	; 0x70
 80017f0:	677a      	str	r2, [r7, #116]	; 0x74
 80017f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017f6:	f7fe fd0b 	bl	8000210 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800181a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001826:	e0eb      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06b      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	2200      	movs	r2, #0
 8001848:	66bb      	str	r3, [r7, #104]	; 0x68
 800184a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800184c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
 8001854:	2300      	movs	r3, #0
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
 8001858:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4621      	mov	r1, r4
 8001876:	1a51      	subs	r1, r2, r1
 8001878:	61b9      	str	r1, [r7, #24]
 800187a:	4629      	mov	r1, r5
 800187c:	eb63 0301 	sbc.w	r3, r3, r1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800188e:	4659      	mov	r1, fp
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	4651      	mov	r1, sl
 8001894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001898:	4651      	mov	r1, sl
 800189a:	018a      	lsls	r2, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ebb2 0801 	subs.w	r8, r2, r1
 80018a2:	4659      	mov	r1, fp
 80018a4:	eb63 0901 	sbc.w	r9, r3, r1
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018bc:	4690      	mov	r8, r2
 80018be:	4699      	mov	r9, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	eb18 0303 	adds.w	r3, r8, r3
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	462b      	mov	r3, r5
 80018ca:	eb49 0303 	adc.w	r3, r9, r3
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	024b      	lsls	r3, r1, #9
 80018e0:	4621      	mov	r1, r4
 80018e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018e6:	4621      	mov	r1, r4
 80018e8:	024a      	lsls	r2, r1, #9
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f2:	2200      	movs	r2, #0
 80018f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018fc:	f7fe fc88 	bl	8000210 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800190a:	e065      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x420>
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x458>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	2200      	movs	r2, #0
 8001920:	4618      	mov	r0, r3
 8001922:	4611      	mov	r1, r2
 8001924:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
 800192e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001932:	4642      	mov	r2, r8
 8001934:	464b      	mov	r3, r9
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4641      	mov	r1, r8
 800194c:	1a51      	subs	r1, r2, r1
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	4649      	mov	r1, r9
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001964:	4659      	mov	r1, fp
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196e:	4651      	mov	r1, sl
 8001970:	018a      	lsls	r2, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	1a54      	subs	r4, r2, r1
 8001976:	4659      	mov	r1, fp
 8001978:	eb63 0501 	sbc.w	r5, r3, r1
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	00eb      	lsls	r3, r5, #3
 8001986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198a:	00e2      	lsls	r2, r4, #3
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	4643      	mov	r3, r8
 8001992:	18e3      	adds	r3, r4, r3
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	464b      	mov	r3, r9
 8001998:	eb45 0303 	adc.w	r3, r5, r3
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019aa:	4629      	mov	r1, r5
 80019ac:	028b      	lsls	r3, r1, #10
 80019ae:	4621      	mov	r1, r4
 80019b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b4:	4621      	mov	r1, r4
 80019b6:	028a      	lsls	r2, r1, #10
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c0:	2200      	movs	r2, #0
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019ca:	f7fe fc21 	bl	8000210 <__aeabi_uldivmod>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4613      	mov	r3, r2
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x458>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0f1b      	lsrs	r3, r3, #28
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019f6:	e003      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	37b8      	adds	r7, #184	; 0xb8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	00f42400 	.word	0x00f42400

08001a18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e28d      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8083 	beq.w	8001b3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a38:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d019      	beq.n	8001a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a44:	4b91      	ldr	r3, [pc, #580]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a50:	4b8e      	ldr	r3, [pc, #568]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a5c:	d00c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d112      	bne.n	8001a90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d05b      	beq.n	8001b3c <HAL_RCC_OscConfig+0x124>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d157      	bne.n	8001b3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e25a      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x90>
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7b      	ldr	r2, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e01d      	b.n	8001ae4 <HAL_RCC_OscConfig+0xcc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0xb4>
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xcc>
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6b      	ldr	r2, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f964 	bl	8000db8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f960 	bl	8000db8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e21f      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xdc>
 8001b12:	e014      	b.n	8001b3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f950 	bl	8000db8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f94c 	bl	8000db8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e20b      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x104>
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06f      	beq.n	8001c2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b4a:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d017      	beq.n	8001b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x186>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1d3      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f8f9 	bl	8000db8 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f8f5 	bl	8000db8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1b4      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4925      	ldr	r1, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f8d8 	bl	8000db8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f8d4 	bl	8000db8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e193      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d036      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f8b8 	bl	8000db8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f8b4 	bl	8000db8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e173      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x234>
 8001c6a:	e01b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7ff f8a1 	bl	8000db8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	e00e      	b.n	8001c98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f89d 	bl	8000db8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d907      	bls.n	8001c98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e15c      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	42470000 	.word	0x42470000
 8001c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ea      	bne.n	8001c7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8097 	beq.w	8001de0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f85d 	bl	8000db8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff f859 	bl	8000db8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e118      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x31e>
 8001d28:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x358>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x340>
 8001d3e:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x358>
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d015      	beq.n	8001da4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f81e 	bl	8000db8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff f81a 	bl	8000db8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0d7      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d96:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ee      	beq.n	8001d80 <HAL_RCC_OscConfig+0x368>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff f808 	bl	8000db8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff f804 	bl	8000db8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0c1      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ee      	bne.n	8001dac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ad 	beq.w	8001f44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d060      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d145      	bne.n	8001e8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffd8 	bl	8000db8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ffd4 	bl	8000db8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e093      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	019b      	lsls	r3, r3, #6
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	3b01      	subs	r3, #1
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	071b      	lsls	r3, r3, #28
 8001e56:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7fe ffa9 	bl	8000db8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe ffa5 	bl	8000db8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e064      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x452>
 8001e88:	e05c      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff92 	bl	8000db8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe ff8e 	bl	8000db8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04d      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x480>
 8001eb6:	e045      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e040      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCC_OscConfig+0x538>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d129      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d122      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d119      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10f      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e041      	b.n	8001fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f839 	bl	8001ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 f9c0 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04e      	b.n	80020be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <HAL_TIM_Base_Start_IT+0xc4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d022      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204a:	d01d      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d018      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00e      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40001800 	.word	0x40001800

080020e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0202 	mvn.w	r2, #2
 800211c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8d2 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8c4 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8d5 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0204 	mvn.w	r2, #4
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8ac 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f89e 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8af 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0208 	mvn.w	r2, #8
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f886 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f878 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f889 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0210 	mvn.w	r2, #16
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2208      	movs	r2, #8
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f860 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f852 	bl	80022c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f863 	bl	80022f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fb9a 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f906 	bl	8002484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f834 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8d8 	bl	8002470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a46      	ldr	r2, [pc, #280]	; (8002444 <TIM_Base_SetConfig+0x12c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a43      	ldr	r2, [pc, #268]	; (8002448 <TIM_Base_SetConfig+0x130>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a42      	ldr	r2, [pc, #264]	; (800244c <TIM_Base_SetConfig+0x134>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a41      	ldr	r2, [pc, #260]	; (8002450 <TIM_Base_SetConfig+0x138>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a40      	ldr	r2, [pc, #256]	; (8002454 <TIM_Base_SetConfig+0x13c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a35      	ldr	r2, [pc, #212]	; (8002444 <TIM_Base_SetConfig+0x12c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d027      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a32      	ldr	r2, [pc, #200]	; (8002448 <TIM_Base_SetConfig+0x130>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d023      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a31      	ldr	r2, [pc, #196]	; (800244c <TIM_Base_SetConfig+0x134>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a30      	ldr	r2, [pc, #192]	; (8002450 <TIM_Base_SetConfig+0x138>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <TIM_Base_SetConfig+0x13c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d017      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2e      	ldr	r2, [pc, #184]	; (8002458 <TIM_Base_SetConfig+0x140>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2d      	ldr	r2, [pc, #180]	; (800245c <TIM_Base_SetConfig+0x144>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00f      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2c      	ldr	r2, [pc, #176]	; (8002460 <TIM_Base_SetConfig+0x148>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00b      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <TIM_Base_SetConfig+0x14c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <TIM_Base_SetConfig+0x150>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d003      	beq.n	80023ca <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <TIM_Base_SetConfig+0x154>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d108      	bne.n	80023dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <TIM_Base_SetConfig+0x12c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0xf8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <TIM_Base_SetConfig+0x13c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
  }
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40010400 	.word	0x40010400
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	40001800 	.word	0x40001800
 8002468:	40001c00 	.word	0x40001c00
 800246c:	40002000 	.word	0x40002000

08002470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e042      	b.n	8002530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe faa6 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f82b 	bl	8002538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b0c0      	sub	sp, #256	; 0x100
 800253e:	af00      	add	r7, sp, #0
 8002540:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	ea40 0301 	orr.w	r3, r0, r1
 8002560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	431a      	orrs	r2, r3
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	431a      	orrs	r2, r3
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002590:	f021 010c 	bic.w	r1, r1, #12
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	6999      	ldr	r1, [r3, #24]
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	ea40 0301 	orr.w	r3, r0, r1
 80025be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b8f      	ldr	r3, [pc, #572]	; (8002804 <UART_SetConfig+0x2cc>)
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d005      	beq.n	80025d8 <UART_SetConfig+0xa0>
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b8d      	ldr	r3, [pc, #564]	; (8002808 <UART_SetConfig+0x2d0>)
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d104      	bne.n	80025e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7fe ffa8 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 80025dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025e0:	e003      	b.n	80025ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025e2:	f7fe ff8f 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 80025e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f4:	f040 810c 	bne.w	8002810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002602:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	1891      	adds	r1, r2, r2
 8002610:	65b9      	str	r1, [r7, #88]	; 0x58
 8002612:	415b      	adcs	r3, r3
 8002614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800261a:	4621      	mov	r1, r4
 800261c:	eb12 0801 	adds.w	r8, r2, r1
 8002620:	4629      	mov	r1, r5
 8002622:	eb43 0901 	adc.w	r9, r3, r1
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263a:	4690      	mov	r8, r2
 800263c:	4699      	mov	r9, r3
 800263e:	4623      	mov	r3, r4
 8002640:	eb18 0303 	adds.w	r3, r8, r3
 8002644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002648:	462b      	mov	r3, r5
 800264a:	eb49 0303 	adc.w	r3, r9, r3
 800264e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800265e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002666:	460b      	mov	r3, r1
 8002668:	18db      	adds	r3, r3, r3
 800266a:	653b      	str	r3, [r7, #80]	; 0x50
 800266c:	4613      	mov	r3, r2
 800266e:	eb42 0303 	adc.w	r3, r2, r3
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
 8002674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800267c:	f7fd fdc8 	bl	8000210 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <UART_SetConfig+0x2d4>)
 8002686:	fba3 2302 	umull	r2, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	011c      	lsls	r4, r3, #4
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002698:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800269c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80026a8:	415b      	adcs	r3, r3
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026b0:	4641      	mov	r1, r8
 80026b2:	eb12 0a01 	adds.w	sl, r2, r1
 80026b6:	4649      	mov	r1, r9
 80026b8:	eb43 0b01 	adc.w	fp, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d0:	4692      	mov	sl, r2
 80026d2:	469b      	mov	fp, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	eb1a 0303 	adds.w	r3, sl, r3
 80026da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026de:	464b      	mov	r3, r9
 80026e0:	eb4b 0303 	adc.w	r3, fp, r3
 80026e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026fc:	460b      	mov	r3, r1
 80026fe:	18db      	adds	r3, r3, r3
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
 8002702:	4613      	mov	r3, r2
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
 800270a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800270e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002712:	f7fd fd7d 	bl	8000210 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4611      	mov	r1, r2
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <UART_SetConfig+0x2d4>)
 800271e:	fba3 2301 	umull	r2, r3, r3, r1
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2264      	movs	r2, #100	; 0x64
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	1acb      	subs	r3, r1, r3
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002732:	4b36      	ldr	r3, [pc, #216]	; (800280c <UART_SetConfig+0x2d4>)
 8002734:	fba3 2302 	umull	r2, r3, r3, r2
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002740:	441c      	add	r4, r3
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800274c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	63b9      	str	r1, [r7, #56]	; 0x38
 800275c:	415b      	adcs	r3, r3
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002764:	4641      	mov	r1, r8
 8002766:	1851      	adds	r1, r2, r1
 8002768:	6339      	str	r1, [r7, #48]	; 0x30
 800276a:	4649      	mov	r1, r9
 800276c:	414b      	adcs	r3, r1
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800277c:	4659      	mov	r1, fp
 800277e:	00cb      	lsls	r3, r1, #3
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002786:	4651      	mov	r1, sl
 8002788:	00ca      	lsls	r2, r1, #3
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4603      	mov	r3, r0
 8002790:	4642      	mov	r2, r8
 8002792:	189b      	adds	r3, r3, r2
 8002794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002798:	464b      	mov	r3, r9
 800279a:	460a      	mov	r2, r1
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027b8:	460b      	mov	r3, r1
 80027ba:	18db      	adds	r3, r3, r3
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027be:	4613      	mov	r3, r2
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027ce:	f7fd fd1f 	bl	8000210 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <UART_SetConfig+0x2d4>)
 80027d8:	fba3 1302 	umull	r1, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3332      	adds	r3, #50	; 0x32
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <UART_SetConfig+0x2d4>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	f003 0207 	and.w	r2, r3, #7
 80027f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4422      	add	r2, r4
 80027fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002800:	e106      	b.n	8002a10 <UART_SetConfig+0x4d8>
 8002802:	bf00      	nop
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800281a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800281e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	6239      	str	r1, [r7, #32]
 800282a:	415b      	adcs	r3, r3
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002832:	4641      	mov	r1, r8
 8002834:	1854      	adds	r4, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb43 0501 	adc.w	r5, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002858:	464b      	mov	r3, r9
 800285a:	eb45 0303 	adc.w	r3, r5, r3
 800285e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800286e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800287e:	4629      	mov	r1, r5
 8002880:	008b      	lsls	r3, r1, #2
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002888:	4621      	mov	r1, r4
 800288a:	008a      	lsls	r2, r1, #2
 800288c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002890:	f7fd fcbe 	bl	8000210 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <UART_SetConfig+0x4e4>)
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	011c      	lsls	r4, r3, #4
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	61b9      	str	r1, [r7, #24]
 80028bc:	415b      	adcs	r3, r3
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6139      	str	r1, [r7, #16]
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028f8:	464b      	mov	r3, r9
 80028fa:	460a      	mov	r2, r1
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	67bb      	str	r3, [r7, #120]	; 0x78
 800290e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800291c:	4649      	mov	r1, r9
 800291e:	008b      	lsls	r3, r1, #2
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002926:	4641      	mov	r1, r8
 8002928:	008a      	lsls	r2, r1, #2
 800292a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800292e:	f7fd fc6f 	bl	8000210 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4611      	mov	r1, r2
 8002938:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <UART_SetConfig+0x4e4>)
 800293a:	fba3 2301 	umull	r2, r3, r3, r1
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2264      	movs	r2, #100	; 0x64
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	1acb      	subs	r3, r1, r3
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <UART_SetConfig+0x4e4>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	441c      	add	r4, r3
 800295a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295e:	2200      	movs	r2, #0
 8002960:	673b      	str	r3, [r7, #112]	; 0x70
 8002962:	677a      	str	r2, [r7, #116]	; 0x74
 8002964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	1891      	adds	r1, r2, r2
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	415b      	adcs	r3, r3
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002978:	4641      	mov	r1, r8
 800297a:	1851      	adds	r1, r2, r1
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	4649      	mov	r1, r9
 8002980:	414b      	adcs	r3, r1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002990:	4659      	mov	r1, fp
 8002992:	00cb      	lsls	r3, r1, #3
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299a:	4651      	mov	r1, sl
 800299c:	00ca      	lsls	r2, r1, #3
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	4642      	mov	r2, r8
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029aa:	464b      	mov	r3, r9
 80029ac:	460a      	mov	r2, r1
 80029ae:	eb42 0303 	adc.w	r3, r2, r3
 80029b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	663b      	str	r3, [r7, #96]	; 0x60
 80029be:	667a      	str	r2, [r7, #100]	; 0x64
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029cc:	4649      	mov	r1, r9
 80029ce:	008b      	lsls	r3, r1, #2
 80029d0:	4641      	mov	r1, r8
 80029d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d6:	4641      	mov	r1, r8
 80029d8:	008a      	lsls	r2, r1, #2
 80029da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029de:	f7fd fc17 	bl	8000210 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <UART_SetConfig+0x4e4>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	; 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	3332      	adds	r3, #50	; 0x32
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <UART_SetConfig+0x4e4>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4422      	add	r2, r4
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a16:	46bd      	mov	sp, r7
 8002a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1c:	51eb851f 	.word	0x51eb851f

08002a20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a32:	2b84      	cmp	r3, #132	; 0x84
 8002a34:	d005      	beq.n	8002a42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3303      	adds	r3, #3
 8002a40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a42:	68fb      	ldr	r3, [r7, #12]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a56:	f3ef 8305 	mrs	r3, IPSR
 8002a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8002a5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a78:	f001 f942 	bl	8003d00 <vTaskStartScheduler>
  
  return osOK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a84:	b089      	sub	sp, #36	; 0x24
 8002a86:	af04      	add	r7, sp, #16
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <osThreadCreate+0x54>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685c      	ldr	r4, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691e      	ldr	r6, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffb6 	bl	8002a20 <makeFreeRtosPriority>
 8002ab4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	9100      	str	r1, [sp, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4632      	mov	r2, r6
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4620      	mov	r0, r4
 8002acc:	f000 ff50 	bl	8003970 <xTaskCreateStatic>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e01c      	b.n	8002b10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685c      	ldr	r4, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ae2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff98 	bl	8002a20 <makeFreeRtosPriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4632      	mov	r2, r6
 8002afe:	4629      	mov	r1, r5
 8002b00:	4620      	mov	r0, r4
 8002b02:	f000 ff92 	bl	8003a2a <xTaskCreate>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <osDelay+0x16>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	e000      	b.n	8002b32 <osDelay+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 f8b0 	bl	8003c98 <vTaskDelay>
  
  return osOK;
 8002b38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4619      	mov	r1, r3
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f000 faae 	bl	80030ba <xQueueCreateMutexStatic>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e003      	b.n	8002b6a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002b62:	2001      	movs	r0, #1
 8002b64:	f000 fa91 	bl	800308a <xQueueCreateMutex>
 8002b68:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	e03a      	b.n	8002c02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d103      	bne.n	8002ba0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	e009      	b.n	8002bb4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <osSemaphoreWait+0x40>
      ticks = 1;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002bb4:	f7ff ff4c 	bl	8002a50 <inHandlerMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d017      	beq.n	8002bee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fd2a 	bl	8003620 <xQueueReceiveFromISR>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002bd2:	23ff      	movs	r3, #255	; 0xff
 8002bd4:	e015      	b.n	8002c02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d011      	beq.n	8002c00 <osSemaphoreWait+0x8c>
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <osSemaphoreWait+0x98>)
 8002bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	e008      	b.n	8002c00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fc09 	bl	8003408 <xQueueSemaphoreTake>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	e000      	b.n	8002c02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002c20:	f7ff ff16 	bl	8002a50 <inHandlerMode>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fb5b 	bl	80032ec <xQueueGiveFromISR>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d001      	beq.n	8002c40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	e017      	b.n	8002c70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <osSemaphoreRelease+0x5e>
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <osSemaphoreRelease+0x68>)
 8002c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	e00a      	b.n	8002c6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa46 	bl	80030f0 <xQueueGenericSend>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002c6a:	23ff      	movs	r3, #255	; 0xff
 8002c6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0208 	add.w	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 0208 	add.w	r2, r3, #8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f103 0208 	add.w	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d103      	bne.n	8002d3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e00c      	b.n	8002d58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3308      	adds	r3, #8
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e002      	b.n	8002d4c <vListInsert+0x2e>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d2f6      	bcs.n	8002d46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d103      	bne.n	8002dc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e0e:	f001 fec1 	bl	8004b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d114      	bne.n	8002e8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f987 	bl	8004184 <xTaskRemoveFromEventList>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <xQueueGenericReset+0xcc>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	e009      	b.n	8002ea2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3310      	adds	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fef2 	bl	8002c7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	; 0x24
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff feed 	bl	8002c7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ea2:	f001 fea7 	bl	8004bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <xQueueGenericCreateStatic+0x52>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <xQueueGenericCreateStatic+0x56>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueGenericCreateStatic+0x58>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	623b      	str	r3, [r7, #32]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericCreateStatic+0x7e>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericCreateStatic+0x82>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericCreateStatic+0x84>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61fb      	str	r3, [r7, #28]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f52:	2348      	movs	r3, #72	; 0x48
 8002f54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b48      	cmp	r3, #72	; 0x48
 8002f5a:	d00a      	beq.n	8002f72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f83f 	bl	8003018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3730      	adds	r7, #48	; 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueGenericCreate+0x2a>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	613b      	str	r3, [r7, #16]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3348      	adds	r3, #72	; 0x48
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fefb 	bl	8004dd8 <pvPortMalloc>
 8002fe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3348      	adds	r3, #72	; 0x48
 8002ff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ffc:	79fa      	ldrb	r2, [r7, #7]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f805 	bl	8003018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800300e:	69bb      	ldr	r3, [r7, #24]
	}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e002      	b.n	800303a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003046:	2101      	movs	r1, #1
 8003048:	69b8      	ldr	r0, [r7, #24]
 800304a:	f7ff fecb 	bl	8002de4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003076:	2300      	movs	r3, #0
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f837 	bl	80030f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	461a      	mov	r2, r3
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff7e 	bl	8002fa4 <xQueueGenericCreate>
 80030a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff ffd3 	bl	8003056 <prvInitialiseMutex>

		return xNewQueue;
 80030b0:	68fb      	ldr	r3, [r7, #12]
	}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b088      	sub	sp, #32
 80030be:	af02      	add	r7, sp, #8
 80030c0:	4603      	mov	r3, r0
 80030c2:	6039      	str	r1, [r7, #0]
 80030c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80030c6:	2301      	movs	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f7ff feeb 	bl	8002eb4 <xQueueGenericCreateStatic>
 80030de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ffb8 	bl	8003056 <prvInitialiseMutex>

		return xNewQueue;
 80030e6:	68fb      	ldr	r3, [r7, #12]
	}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <xQueueGenericSend+0x32>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <xQueueGenericSend+0x40>
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <xQueueGenericSend+0x44>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <xQueueGenericSend+0x46>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xQueueGenericSend+0x60>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d103      	bne.n	800315e <xQueueGenericSend+0x6e>
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <xQueueGenericSend+0x72>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueGenericSend+0x74>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <xQueueGenericSend+0x8e>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	623b      	str	r3, [r7, #32]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800317e:	f001 f9bd 	bl	80044fc <xTaskGetSchedulerState>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <xQueueGenericSend+0x9e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <xQueueGenericSend+0xa2>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueGenericSend+0xa4>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueGenericSend+0xbe>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	61fb      	str	r3, [r7, #28]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ae:	f001 fcf1 	bl	8004b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <xQueueGenericSend+0xd4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d129      	bne.n	8003218 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ca:	f000 fac1 	bl	8003750 <prvCopyDataToQueue>
 80031ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	3324      	adds	r3, #36	; 0x24
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 ffd1 	bl	8004184 <xTaskRemoveFromEventList>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <xQueueGenericSend+0x1f8>)
 80031ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	e00a      	b.n	8003210 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <xQueueGenericSend+0x1f8>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003210:	f001 fcf0 	bl	8004bf4 <vPortExitCritical>
				return pdPASS;
 8003214:	2301      	movs	r3, #1
 8003216:	e063      	b.n	80032e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800321e:	f001 fce9 	bl	8004bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003222:	2300      	movs	r3, #0
 8003224:	e05c      	b.n	80032e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4618      	mov	r0, r3
 8003232:	f001 f809 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003236:	2301      	movs	r3, #1
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323a:	f001 fcdb 	bl	8004bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800323e:	f000 fdbf 	bl	8003dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003242:	f001 fca7 	bl	8004b94 <vPortEnterCritical>
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324c:	b25b      	sxtb	r3, r3
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d103      	bne.n	800325c <xQueueGenericSend+0x16c>
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003262:	b25b      	sxtb	r3, r3
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d103      	bne.n	8003272 <xQueueGenericSend+0x182>
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003272:	f001 fcbf 	bl	8004bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003276:	1d3a      	adds	r2, r7, #4
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fff8 	bl	8004274 <xTaskCheckForTimeOut>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d124      	bne.n	80032d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800328a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800328c:	f000 fb58 	bl	8003940 <prvIsQueueFull>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d018      	beq.n	80032c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	3310      	adds	r3, #16
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ff4c 	bl	800413c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a6:	f000 fae3 	bl	8003870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032aa:	f000 fd97 	bl	8003ddc <xTaskResumeAll>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f af7c 	bne.w	80031ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <xQueueGenericSend+0x1f8>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	e772      	b.n	80031ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ca:	f000 fad1 	bl	8003870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ce:	f000 fd85 	bl	8003ddc <xTaskResumeAll>
 80032d2:	e76c      	b.n	80031ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d6:	f000 facb 	bl	8003870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032da:	f000 fd7f 	bl	8003ddc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3738      	adds	r7, #56	; 0x38
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08e      	sub	sp, #56	; 0x38
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	623b      	str	r3, [r7, #32]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <xQueueGiveFromISR+0x48>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	61fb      	str	r3, [r7, #28]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <xQueueGiveFromISR+0x58>
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <xQueueGiveFromISR+0x5c>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <xQueueGiveFromISR+0x5e>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <xQueueGiveFromISR+0x78>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	61bb      	str	r3, [r7, #24]
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003364:	f001 fcf8 	bl	8004d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003368:	f3ef 8211 	mrs	r2, BASEPRI
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	617a      	str	r2, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003380:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003390:	429a      	cmp	r2, r3
 8003392:	d22b      	bcs.n	80033ec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800339a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d112      	bne.n	80033d6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fee1 	bl	8004184 <xTaskRemoveFromEventList>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e007      	b.n	80033e6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033da:	3301      	adds	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	b25a      	sxtb	r2, r3
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033e6:	2301      	movs	r3, #1
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
 80033ea:	e001      	b.n	80033f0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3738      	adds	r7, #56	; 0x38
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	61fb      	str	r3, [r7, #28]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003458:	f001 f850 	bl	80044fc <xTaskGetSchedulerState>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <xQueueSemaphoreTake+0x60>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <xQueueSemaphoreTake+0x64>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <xQueueSemaphoreTake+0x66>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	61bb      	str	r3, [r7, #24]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003488:	f001 fb84 	bl	8004b94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d024      	beq.n	80034e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	1e5a      	subs	r2, r3, #1
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034a8:	f001 f9d0 	bl	800484c <pvTaskIncrementMutexHeldCount>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00f      	beq.n	80034da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	3310      	adds	r3, #16
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fe60 	bl	8004184 <xTaskRemoveFromEventList>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <xQueueSemaphoreTake+0x214>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034da:	f001 fb8b 	bl	8004bf4 <vPortExitCritical>
				return pdPASS;
 80034de:	2301      	movs	r3, #1
 80034e0:	e097      	b.n	8003612 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	617b      	str	r3, [r7, #20]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003504:	f001 fb76 	bl	8004bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003508:	2300      	movs	r3, #0
 800350a:	e082      	b.n	8003612 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fe96 	bl	8004248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800351c:	2301      	movs	r3, #1
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003520:	f001 fb68 	bl	8004bf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003524:	f000 fc4c 	bl	8003dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003528:	f001 fb34 	bl	8004b94 <vPortEnterCritical>
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003532:	b25b      	sxtb	r3, r3
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d103      	bne.n	8003542 <xQueueSemaphoreTake+0x13a>
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003548:	b25b      	sxtb	r3, r3
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d103      	bne.n	8003558 <xQueueSemaphoreTake+0x150>
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003558:	f001 fb4c 	bl	8004bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800355c:	463a      	mov	r2, r7
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fe85 	bl	8004274 <xTaskCheckForTimeOut>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d132      	bne.n	80035d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003572:	f000 f9cf 	bl	8003914 <prvIsQueueEmpty>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d026      	beq.n	80035ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003584:	f001 fb06 	bl	8004b94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 ffd3 	bl	8004538 <xTaskPriorityInherit>
 8003592:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003594:	f001 fb2e 	bl	8004bf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fdcb 	bl	800413c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a8:	f000 f962 	bl	8003870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035ac:	f000 fc16 	bl	8003ddc <xTaskResumeAll>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f af68 	bne.w	8003488 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <xQueueSemaphoreTake+0x214>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	e75e      	b.n	8003488 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80035ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035cc:	f000 f950 	bl	8003870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d0:	f000 fc04 	bl	8003ddc <xTaskResumeAll>
 80035d4:	e758      	b.n	8003488 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80035d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035d8:	f000 f94a 	bl	8003870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035dc:	f000 fbfe 	bl	8003ddc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035e2:	f000 f997 	bl	8003914 <prvIsQueueEmpty>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f43f af4d 	beq.w	8003488 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035f4:	f001 face 	bl	8004b94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035fa:	f000 f891 	bl	8003720 <prvGetDisinheritPriorityAfterTimeout>
 80035fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f892 	bl	8004730 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800360c:	f001 faf2 	bl	8004bf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003612:	4618      	mov	r0, r3
 8003614:	3738      	adds	r7, #56	; 0x38
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08e      	sub	sp, #56	; 0x38
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	623b      	str	r3, [r7, #32]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <xQueueReceiveFromISR+0x3a>
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <xQueueReceiveFromISR+0x3e>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueReceiveFromISR+0x40>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61fb      	str	r3, [r7, #28]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367a:	f001 fb6d 	bl	8004d58 <vPortValidateInterruptPriority>
	__asm volatile
 800367e:	f3ef 8211 	mrs	r2, BASEPRI
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	61ba      	str	r2, [r7, #24]
 8003694:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003696:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02f      	beq.n	8003706 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b4:	f000 f8b6 	bl	8003824 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80036c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d112      	bne.n	80036f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	3310      	adds	r3, #16
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fd54 	bl	8004184 <xTaskRemoveFromEventList>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e007      	b.n	8003700 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f4:	3301      	adds	r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	b25a      	sxtb	r2, r3
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003700:	2301      	movs	r3, #1
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	e001      	b.n	800370a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f383 8811 	msr	BASEPRI, r3
}
 8003714:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003718:	4618      	mov	r0, r3
 800371a:	3738      	adds	r7, #56	; 0x38
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1c3 0307 	rsb	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e001      	b.n	8003742 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003742:	68fb      	ldr	r3, [r7, #12]
	}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d14d      	bne.n	8003812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 ff52 	bl	8004624 <xTaskPriorityDisinherit>
 8003780:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e043      	b.n	8003812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d119      	bne.n	80037c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6858      	ldr	r0, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	461a      	mov	r2, r3
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	f001 ff77 	bl	800568e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	441a      	add	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d32b      	bcc.n	8003812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e026      	b.n	8003812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68d8      	ldr	r0, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	461a      	mov	r2, r3
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	f001 ff5d 	bl	800568e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	425b      	negs	r3, r3
 80037de:	441a      	add	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	425b      	negs	r3, r3
 80037fa:	441a      	add	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d105      	bne.n	8003812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3b01      	subs	r3, #1
 8003810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800381a:	697b      	ldr	r3, [r7, #20]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d303      	bcc.n	8003858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68d9      	ldr	r1, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	461a      	mov	r2, r3
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	f001 ff13 	bl	800568e <memcpy>
	}
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003878:	f001 f98c 	bl	8004b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003884:	e011      	b.n	80038aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3324      	adds	r3, #36	; 0x24
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fc76 	bl	8004184 <xTaskRemoveFromEventList>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800389e:	f000 fd4b 	bl	8004338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dce9      	bgt.n	8003886 <prvUnlockQueue+0x16>
 80038b2:	e000      	b.n	80038b6 <prvUnlockQueue+0x46>
					break;
 80038b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038be:	f001 f999 	bl	8004bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038c2:	f001 f967 	bl	8004b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038ce:	e011      	b.n	80038f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d012      	beq.n	80038fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3310      	adds	r3, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fc51 	bl	8004184 <xTaskRemoveFromEventList>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038e8:	f000 fd26 	bl	8004338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dce9      	bgt.n	80038d0 <prvUnlockQueue+0x60>
 80038fc:	e000      	b.n	8003900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	22ff      	movs	r2, #255	; 0xff
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003908:	f001 f974 	bl	8004bf4 <vPortExitCritical>
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800391c:	f001 f93a 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e001      	b.n	8003932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003932:	f001 f95f 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003948:	f001 f924 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	429a      	cmp	r2, r3
 8003956:	d102      	bne.n	800395e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003958:	2301      	movs	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e001      	b.n	8003962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003962:	f001 f947 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af04      	add	r7, sp, #16
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	61fb      	str	r3, [r7, #28]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b6:	2354      	movs	r3, #84	; 0x54
 80039b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b54      	cmp	r3, #84	; 0x54
 80039be:	d00a      	beq.n	80039d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61bb      	str	r3, [r7, #24]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01e      	beq.n	8003a1c <xTaskCreateStatic+0xac>
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f6:	2300      	movs	r3, #0
 80039f8:	9303      	str	r3, [sp, #12]
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	9302      	str	r3, [sp, #8]
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f850 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a16:	f000 f8d5 	bl	8003bc4 <prvAddNewTaskToReadyList>
 8003a1a:	e001      	b.n	8003a20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a20:	697b      	ldr	r3, [r7, #20]
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08c      	sub	sp, #48	; 0x30
 8003a2e:	af04      	add	r7, sp, #16
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f9ca 	bl	8004dd8 <pvPortMalloc>
 8003a44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a4c:	2054      	movs	r0, #84	; 0x54
 8003a4e:	f001 f9c3 	bl	8004dd8 <pvPortMalloc>
 8003a52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a60:	e005      	b.n	8003a6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f001 fa84 	bl	8004f70 <vPortFree>
 8003a68:	e001      	b.n	8003a6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f80e 	bl	8003ab4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a98:	69f8      	ldr	r0, [r7, #28]
 8003a9a:	f000 f893 	bl	8003bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e002      	b.n	8003aaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003acc:	3b01      	subs	r3, #1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	617b      	str	r3, [r7, #20]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e012      	b.n	8003b2e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	7819      	ldrb	r1, [r3, #0]
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	3334      	adds	r3, #52	; 0x34
 8003b18:	460a      	mov	r2, r1
 8003b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d9e9      	bls.n	8003b08 <prvInitialiseNewTask+0x54>
 8003b34:	e000      	b.n	8003b38 <prvInitialiseNewTask+0x84>
			{
				break;
 8003b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	e003      	b.n	8003b4a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d901      	bls.n	8003b54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b50:	2306      	movs	r3, #6
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f8a6 	bl	8002cbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	3318      	adds	r3, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff f8a1 	bl	8002cbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	f1c3 0207 	rsb	r2, r3, #7
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f000 fecc 	bl	8004940 <pxPortInitialiseStack>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bba:	bf00      	nop
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bcc:	f000 ffe2 	bl	8004b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <prvAddNewTaskToReadyList+0xb8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <prvAddNewTaskToReadyList+0xb8>)
 8003bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <prvAddNewTaskToReadyList+0xbc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003be2:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <prvAddNewTaskToReadyList+0xbc>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <prvAddNewTaskToReadyList+0xb8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d110      	bne.n	8003c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bf0:	f000 fbc6 	bl	8004380 <prvInitialiseTaskLists>
 8003bf4:	e00d      	b.n	8003c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <prvAddNewTaskToReadyList+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <prvAddNewTaskToReadyList+0xbc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d802      	bhi.n	8003c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <prvAddNewTaskToReadyList+0xbc>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <prvAddNewTaskToReadyList+0xc4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <prvAddNewTaskToReadyList+0xc4>)
 8003c1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <prvAddNewTaskToReadyList+0xc8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <prvAddNewTaskToReadyList+0xc8>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <prvAddNewTaskToReadyList+0xcc>)
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7ff f846 	bl	8002cd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c4a:	f000 ffd3 	bl	8004bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <prvAddNewTaskToReadyList+0xc0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00e      	beq.n	8003c74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <prvAddNewTaskToReadyList+0xbc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d207      	bcs.n	8003c74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <prvAddNewTaskToReadyList+0xd0>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000484 	.word	0x20000484
 8003c80:	20000384 	.word	0x20000384
 8003c84:	20000490 	.word	0x20000490
 8003c88:	200004a0 	.word	0x200004a0
 8003c8c:	2000048c 	.word	0x2000048c
 8003c90:	20000388 	.word	0x20000388
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d017      	beq.n	8003cda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <vTaskDelay+0x60>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <vTaskDelay+0x30>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60bb      	str	r3, [r7, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cc8:	f000 f87a 	bl	8003dc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ccc:	2100      	movs	r1, #0
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fdd0 	bl	8004874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cd4:	f000 f882 	bl	8003ddc <xTaskResumeAll>
 8003cd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <vTaskDelay+0x64>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200004ac 	.word	0x200004ac
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d0e:	463a      	mov	r2, r7
 8003d10:	1d39      	adds	r1, r7, #4
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fbf8 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	9202      	str	r2, [sp, #8]
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	491e      	ldr	r1, [pc, #120]	; (8003da8 <vTaskStartScheduler+0xa8>)
 8003d30:	481e      	ldr	r0, [pc, #120]	; (8003dac <vTaskStartScheduler+0xac>)
 8003d32:	f7ff fe1d 	bl	8003970 <xTaskCreateStatic>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <vTaskStartScheduler+0xb0>)
 8003d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <vTaskStartScheduler+0xb0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e001      	b.n	8003d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d116      	bne.n	8003d82 <vTaskStartScheduler+0x82>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	613b      	str	r3, [r7, #16]
}
 8003d66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <vTaskStartScheduler+0xb4>)
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <vTaskStartScheduler+0xb8>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <vTaskStartScheduler+0xbc>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d7c:	f000 fe68 	bl	8004a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d80:	e00e      	b.n	8003da0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d10a      	bne.n	8003da0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60fb      	str	r3, [r7, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <vTaskStartScheduler+0x9e>
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	08005ce4 	.word	0x08005ce4
 8003dac:	08004351 	.word	0x08004351
 8003db0:	200004a8 	.word	0x200004a8
 8003db4:	200004a4 	.word	0x200004a4
 8003db8:	20000490 	.word	0x20000490
 8003dbc:	20000488 	.word	0x20000488

08003dc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <vTaskSuspendAll+0x18>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <vTaskSuspendAll+0x18>)
 8003dcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	200004ac 	.word	0x200004ac

08003ddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <xTaskResumeAll+0x114>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <xTaskResumeAll+0x2c>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	603b      	str	r3, [r7, #0]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e08:	f000 fec4 	bl	8004b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e0c:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <xTaskResumeAll+0x114>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <xTaskResumeAll+0x114>)
 8003e14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <xTaskResumeAll+0x114>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d161      	bne.n	8003ee2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e1e:	4b35      	ldr	r3, [pc, #212]	; (8003ef4 <xTaskResumeAll+0x118>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d05d      	beq.n	8003ee2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e26:	e02e      	b.n	8003e86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <xTaskResumeAll+0x11c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe ffab 	bl	8002d90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe ffa6 	bl	8002d90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <xTaskResumeAll+0x120>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <xTaskResumeAll+0x120>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <xTaskResumeAll+0x124>)
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe ff32 	bl	8002cd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <xTaskResumeAll+0x128>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <xTaskResumeAll+0x12c>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <xTaskResumeAll+0x11c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1cc      	bne.n	8003e28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e94:	f000 fb12 	bl	80044bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e98:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <xTaskResumeAll+0x130>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ea4:	f000 f836 	bl	8003f14 <xTaskIncrementTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <xTaskResumeAll+0x12c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f1      	bne.n	8003ea4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <xTaskResumeAll+0x130>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <xTaskResumeAll+0x12c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <xTaskResumeAll+0x134>)
 8003ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee2:	f000 fe87 	bl	8004bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200004ac 	.word	0x200004ac
 8003ef4:	20000484 	.word	0x20000484
 8003ef8:	20000444 	.word	0x20000444
 8003efc:	2000048c 	.word	0x2000048c
 8003f00:	20000388 	.word	0x20000388
 8003f04:	20000384 	.word	0x20000384
 8003f08:	20000498 	.word	0x20000498
 8003f0c:	20000494 	.word	0x20000494
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1e:	4b4e      	ldr	r3, [pc, #312]	; (8004058 <xTaskIncrementTick+0x144>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 808e 	bne.w	8004044 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f28:	4b4c      	ldr	r3, [pc, #304]	; (800405c <xTaskIncrementTick+0x148>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f30:	4a4a      	ldr	r2, [pc, #296]	; (800405c <xTaskIncrementTick+0x148>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d120      	bne.n	8003f7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	603b      	str	r3, [r7, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xTaskIncrementTick+0x46>
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b40      	ldr	r3, [pc, #256]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3e      	ldr	r2, [pc, #248]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4a3e      	ldr	r2, [pc, #248]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	f000 fa9f 	bl	80044bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <xTaskIncrementTick+0x158>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d348      	bcc.n	800401a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f88:	4b35      	ldr	r3, [pc, #212]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <xTaskIncrementTick+0x158>)
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	601a      	str	r2, [r3, #0]
					break;
 8003f9a:	e03e      	b.n	800401a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d203      	bcs.n	8003fbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fb4:	4a2d      	ldr	r2, [pc, #180]	; (800406c <xTaskIncrementTick+0x158>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fba:	e02e      	b.n	800401a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fee5 	bl	8002d90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fedc 	bl	8002d90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	2201      	movs	r2, #1
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	4a22      	ldr	r2, [pc, #136]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <xTaskIncrementTick+0x160>)
 8003ff8:	441a      	add	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fe fe68 	bl	8002cd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <xTaskIncrementTick+0x164>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b9      	bcc.n	8003f88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004014:	2301      	movs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004018:	e7b6      	b.n	8003f88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <xTaskIncrementTick+0x164>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4914      	ldr	r1, [pc, #80]	; (8004074 <xTaskIncrementTick+0x160>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d901      	bls.n	8004036 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <xTaskIncrementTick+0x168>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800403e:	2301      	movs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e004      	b.n	800404e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <xTaskIncrementTick+0x16c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <xTaskIncrementTick+0x16c>)
 800404c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800404e:	697b      	ldr	r3, [r7, #20]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200004ac 	.word	0x200004ac
 800405c:	20000488 	.word	0x20000488
 8004060:	2000043c 	.word	0x2000043c
 8004064:	20000440 	.word	0x20000440
 8004068:	2000049c 	.word	0x2000049c
 800406c:	200004a4 	.word	0x200004a4
 8004070:	2000048c 	.word	0x2000048c
 8004074:	20000388 	.word	0x20000388
 8004078:	20000384 	.word	0x20000384
 800407c:	20000498 	.word	0x20000498
 8004080:	20000494 	.word	0x20000494

08004084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <vTaskSwitchContext+0xa4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <vTaskSwitchContext+0xa8>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004098:	e03f      	b.n	800411a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <vTaskSwitchContext+0xa8>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <vTaskSwitchContext+0xac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040ae:	7afb      	ldrb	r3, [r7, #11]
 80040b0:	f1c3 031f 	rsb	r3, r3, #31
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	491f      	ldr	r1, [pc, #124]	; (8004134 <vTaskSwitchContext+0xb0>)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	607b      	str	r3, [r7, #4]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vTaskSwitchContext+0x5a>
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <vTaskSwitchContext+0xb0>)
 80040ec:	4413      	add	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3308      	adds	r3, #8
 8004102:	429a      	cmp	r2, r3
 8004104:	d104      	bne.n	8004110 <vTaskSwitchContext+0x8c>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <vTaskSwitchContext+0xb4>)
 8004118:	6013      	str	r3, [r2, #0]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	200004ac 	.word	0x200004ac
 800412c:	20000498 	.word	0x20000498
 8004130:	2000048c 	.word	0x2000048c
 8004134:	20000388 	.word	0x20000388
 8004138:	20000384 	.word	0x20000384

0800413c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <vTaskPlaceOnEventList+0x44>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3318      	adds	r3, #24
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fe fdd7 	bl	8002d1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004170:	2101      	movs	r1, #1
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f000 fb7e 	bl	8004874 <prvAddCurrentTaskToDelayedList>
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000384 	.word	0x20000384

08004184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60fb      	str	r3, [r7, #12]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3318      	adds	r3, #24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fdeb 	bl	8002d90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <xTaskRemoveFromEventList+0xac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11c      	bne.n	80041fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fde2 	bl	8002d90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	2201      	movs	r2, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <xTaskRemoveFromEventList+0xb0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	4a16      	ldr	r2, [pc, #88]	; (8004234 <xTaskRemoveFromEventList+0xb0>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a13      	ldr	r2, [pc, #76]	; (8004238 <xTaskRemoveFromEventList+0xb4>)
 80041ec:	441a      	add	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe fd6e 	bl	8002cd6 <vListInsertEnd>
 80041fa:	e005      	b.n	8004208 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	3318      	adds	r3, #24
 8004200:	4619      	mov	r1, r3
 8004202:	480e      	ldr	r0, [pc, #56]	; (800423c <xTaskRemoveFromEventList+0xb8>)
 8004204:	f7fe fd67 	bl	8002cd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <xTaskRemoveFromEventList+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d905      	bls.n	8004222 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <xTaskRemoveFromEventList+0xc0>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e001      	b.n	8004226 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004226:	697b      	ldr	r3, [r7, #20]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200004ac 	.word	0x200004ac
 8004234:	2000048c 	.word	0x2000048c
 8004238:	20000388 	.word	0x20000388
 800423c:	20000444 	.word	0x20000444
 8004240:	20000384 	.word	0x20000384
 8004244:	20000498 	.word	0x20000498

08004248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskInternalSetTimeOutState+0x24>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <vTaskInternalSetTimeOutState+0x28>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	605a      	str	r2, [r3, #4]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	2000049c 	.word	0x2000049c
 8004270:	20000488 	.word	0x20000488

08004274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	613b      	str	r3, [r7, #16]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042b6:	f000 fc6d 	bl	8004b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <xTaskCheckForTimeOut+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d102      	bne.n	80042da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	e023      	b.n	8004322 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <xTaskCheckForTimeOut+0xc0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d007      	beq.n	80042f6 <xTaskCheckForTimeOut+0x82>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e015      	b.n	8004322 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d20b      	bcs.n	8004318 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff9b 	bl	8004248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e004      	b.n	8004322 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004322:	f000 fc67 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 8004326:	69fb      	ldr	r3, [r7, #28]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000488 	.word	0x20000488
 8004334:	2000049c 	.word	0x2000049c

08004338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <vTaskMissedYield+0x14>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20000498 	.word	0x20000498

08004350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004358:	f000 f852 	bl	8004400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <prvIdleTask+0x28>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d9f9      	bls.n	8004358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <prvIdleTask+0x2c>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004374:	e7f0      	b.n	8004358 <prvIdleTask+0x8>
 8004376:	bf00      	nop
 8004378:	20000388 	.word	0x20000388
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	e00c      	b.n	80043a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <prvInitialiseTaskLists+0x60>)
 8004398:	4413      	add	r3, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fc6e 	bl	8002c7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3301      	adds	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b06      	cmp	r3, #6
 80043aa:	d9ef      	bls.n	800438c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043ac:	480d      	ldr	r0, [pc, #52]	; (80043e4 <prvInitialiseTaskLists+0x64>)
 80043ae:	f7fe fc65 	bl	8002c7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043b2:	480d      	ldr	r0, [pc, #52]	; (80043e8 <prvInitialiseTaskLists+0x68>)
 80043b4:	f7fe fc62 	bl	8002c7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043b8:	480c      	ldr	r0, [pc, #48]	; (80043ec <prvInitialiseTaskLists+0x6c>)
 80043ba:	f7fe fc5f 	bl	8002c7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043be:	480c      	ldr	r0, [pc, #48]	; (80043f0 <prvInitialiseTaskLists+0x70>)
 80043c0:	f7fe fc5c 	bl	8002c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043c4:	480b      	ldr	r0, [pc, #44]	; (80043f4 <prvInitialiseTaskLists+0x74>)
 80043c6:	f7fe fc59 	bl	8002c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <prvInitialiseTaskLists+0x78>)
 80043cc:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <prvInitialiseTaskLists+0x64>)
 80043ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <prvInitialiseTaskLists+0x7c>)
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <prvInitialiseTaskLists+0x68>)
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000388 	.word	0x20000388
 80043e4:	20000414 	.word	0x20000414
 80043e8:	20000428 	.word	0x20000428
 80043ec:	20000444 	.word	0x20000444
 80043f0:	20000458 	.word	0x20000458
 80043f4:	20000470 	.word	0x20000470
 80043f8:	2000043c 	.word	0x2000043c
 80043fc:	20000440 	.word	0x20000440

08004400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004406:	e019      	b.n	800443c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004408:	f000 fbc4 	bl	8004b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <prvCheckTasksWaitingTermination+0x50>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fcb9 	bl	8002d90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <prvCheckTasksWaitingTermination+0x54>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3b01      	subs	r3, #1
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <prvCheckTasksWaitingTermination+0x54>)
 8004426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <prvCheckTasksWaitingTermination+0x58>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3b01      	subs	r3, #1
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <prvCheckTasksWaitingTermination+0x58>)
 8004430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004432:	f000 fbdf 	bl	8004bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f810 	bl	800445c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <prvCheckTasksWaitingTermination+0x58>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e1      	bne.n	8004408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000458 	.word	0x20000458
 8004454:	20000484 	.word	0x20000484
 8004458:	2000046c 	.word	0x2000046c

0800445c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fd7c 	bl	8004f70 <vPortFree>
				vPortFree( pxTCB );
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fd79 	bl	8004f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800447e:	e018      	b.n	80044b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004486:	2b01      	cmp	r3, #1
 8004488:	d103      	bne.n	8004492 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fd70 	bl	8004f70 <vPortFree>
	}
 8004490:	e00f      	b.n	80044b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004498:	2b02      	cmp	r3, #2
 800449a:	d00a      	beq.n	80044b2 <prvDeleteTCB+0x56>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <prvDeleteTCB+0x54>
	}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <prvResetNextTaskUnblockTime+0x38>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <prvResetNextTaskUnblockTime+0x3c>)
 80044ce:	f04f 32ff 	mov.w	r2, #4294967295
 80044d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044d4:	e008      	b.n	80044e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <prvResetNextTaskUnblockTime+0x38>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <prvResetNextTaskUnblockTime+0x3c>)
 80044e6:	6013      	str	r3, [r2, #0]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	2000043c 	.word	0x2000043c
 80044f8:	200004a4 	.word	0x200004a4

080044fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <xTaskGetSchedulerState+0x34>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800450a:	2301      	movs	r3, #1
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	e008      	b.n	8004522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <xTaskGetSchedulerState+0x38>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004518:	2302      	movs	r3, #2
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	e001      	b.n	8004522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004522:	687b      	ldr	r3, [r7, #4]
	}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000490 	.word	0x20000490
 8004534:	200004ac 	.word	0x200004ac

08004538 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05e      	beq.n	800460c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <xTaskPriorityInherit+0xe0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	429a      	cmp	r2, r3
 800455a:	d24e      	bcs.n	80045fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db06      	blt.n	8004572 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <xTaskPriorityInherit+0xe0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f1c3 0207 	rsb	r2, r3, #7
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6959      	ldr	r1, [r3, #20]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a26      	ldr	r2, [pc, #152]	; (800461c <xTaskPriorityInherit+0xe4>)
 8004584:	4413      	add	r3, r2
 8004586:	4299      	cmp	r1, r3
 8004588:	d12f      	bne.n	80045ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fbfe 	bl	8002d90 <uxListRemove>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43da      	mvns	r2, r3
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <xTaskPriorityInherit+0xe8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4013      	ands	r3, r2
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <xTaskPriorityInherit+0xe8>)
 80045ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <xTaskPriorityInherit+0xe0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2201      	movs	r2, #1
 80045c0:	409a      	lsls	r2, r3
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <xTaskPriorityInherit+0xe8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <xTaskPriorityInherit+0xe8>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a10      	ldr	r2, [pc, #64]	; (800461c <xTaskPriorityInherit+0xe4>)
 80045da:	441a      	add	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe fb77 	bl	8002cd6 <vListInsertEnd>
 80045e8:	e004      	b.n	80045f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <xTaskPriorityInherit+0xe0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e008      	b.n	800460c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <xTaskPriorityInherit+0xe0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d201      	bcs.n	800460c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800460c:	68fb      	ldr	r3, [r7, #12]
	}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000384 	.word	0x20000384
 800461c:	20000388 	.word	0x20000388
 8004620:	2000048c 	.word	0x2000048c

08004624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d06e      	beq.n	8004718 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800463a:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <xTaskPriorityDisinherit+0x100>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d00a      	beq.n	800465a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60bb      	str	r3, [r7, #8]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	1e5a      	subs	r2, r3, #1
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	429a      	cmp	r2, r3
 800468c:	d044      	beq.n	8004718 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d140      	bne.n	8004718 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3304      	adds	r3, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fb78 	bl	8002d90 <uxListRemove>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d115      	bne.n	80046d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	491f      	ldr	r1, [pc, #124]	; (8004728 <xTaskPriorityDisinherit+0x104>)
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xTaskPriorityDisinherit+0xae>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	2201      	movs	r2, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <xTaskPriorityDisinherit+0x108>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4013      	ands	r3, r2
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <xTaskPriorityDisinherit+0x108>)
 80046d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f1c3 0207 	rsb	r2, r3, #7
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	2201      	movs	r2, #1
 80046ec:	409a      	lsls	r2, r3
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <xTaskPriorityDisinherit+0x108>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	4a0d      	ldr	r2, [pc, #52]	; (800472c <xTaskPriorityDisinherit+0x108>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4a08      	ldr	r2, [pc, #32]	; (8004728 <xTaskPriorityDisinherit+0x104>)
 8004706:	441a      	add	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7fe fae1 	bl	8002cd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004718:	697b      	ldr	r3, [r7, #20]
	}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000384 	.word	0x20000384
 8004728:	20000388 	.word	0x20000388
 800472c:	2000048c 	.word	0x2000048c

08004730 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d077      	beq.n	8004838 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d902      	bls.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e002      	b.n	800477c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d058      	beq.n	8004838 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	429a      	cmp	r2, r3
 800478e:	d153      	bne.n	8004838 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	429a      	cmp	r2, r3
 8004798:	d10a      	bne.n	80047b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db04      	blt.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f1c3 0207 	rsb	r2, r3, #7
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	6959      	ldr	r1, [r3, #20]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80047de:	4413      	add	r3, r2
 80047e0:	4299      	cmp	r1, r3
 80047e2:	d129      	bne.n	8004838 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fad1 	bl	8002d90 <uxListRemove>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2201      	movs	r2, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43da      	mvns	r2, r3
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4013      	ands	r3, r2
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004808:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	2201      	movs	r2, #1
 8004810:	409a      	lsls	r2, r3
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4a06      	ldr	r2, [pc, #24]	; (8004844 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800482a:	441a      	add	r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7fe fa4f 	bl	8002cd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004838:	bf00      	nop
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000384 	.word	0x20000384
 8004844:	20000388 	.word	0x20000388
 8004848:	2000048c 	.word	0x2000048c

0800484c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <pvTaskIncrementMutexHeldCount+0x24>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <pvTaskIncrementMutexHeldCount+0x24>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485e:	3201      	adds	r2, #1
 8004860:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004862:	4b03      	ldr	r3, [pc, #12]	; (8004870 <pvTaskIncrementMutexHeldCount+0x24>)
 8004864:	681b      	ldr	r3, [r3, #0]
	}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000384 	.word	0x20000384

08004874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800487e:	4b29      	ldr	r3, [pc, #164]	; (8004924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fa80 	bl	8002d90 <uxListRemove>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2201      	movs	r2, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43da      	mvns	r2, r3
 80048a4:	4b21      	ldr	r3, [pc, #132]	; (800492c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4013      	ands	r3, r2
 80048aa:	4a20      	ldr	r2, [pc, #128]	; (800492c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d10a      	bne.n	80048cc <prvAddCurrentTaskToDelayedList+0x58>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	481a      	ldr	r0, [pc, #104]	; (8004930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048c6:	f7fe fa06 	bl	8002cd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ca:	e026      	b.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d209      	bcs.n	80048f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f7fe fa14 	bl	8002d1e <vListInsert>
}
 80048f6:	e010      	b.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fe fa0a 	bl	8002d1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <prvAddCurrentTaskToDelayedList+0xc8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d202      	bcs.n	800491a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000488 	.word	0x20000488
 8004928:	20000384 	.word	0x20000384
 800492c:	2000048c 	.word	0x2000048c
 8004930:	20000470 	.word	0x20000470
 8004934:	20000440 	.word	0x20000440
 8004938:	2000043c 	.word	0x2000043c
 800493c:	200004a4 	.word	0x200004a4

08004940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b04      	subs	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3b04      	subs	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b04      	subs	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004970:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <pxPortInitialiseStack+0x64>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b14      	subs	r3, #20
 800497a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b04      	subs	r3, #4
 8004986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f06f 0202 	mvn.w	r2, #2
 800498e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3b20      	subs	r3, #32
 8004994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004996:	68fb      	ldr	r3, [r7, #12]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	080049a9 	.word	0x080049a9

080049a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <prvTaskExitError+0x54>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d00a      	beq.n	80049d2 <prvTaskExitError+0x2a>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <prvTaskExitError+0x28>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60bb      	str	r3, [r7, #8]
}
 80049e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049e6:	bf00      	nop
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0fc      	beq.n	80049e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	4770      	bx	lr
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst2>:
 8004a20:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a28:	4808      	ldr	r0, [pc, #32]	; (8004a4c <prvPortStartFirstTask+0x24>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8814 	msr	CONTROL, r0
 8004a3a:	b662      	cpsie	i
 8004a3c:	b661      	cpsie	f
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	df00      	svc	0
 8004a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed08 	.word	0xe000ed08

08004a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a56:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <xPortStartScheduler+0x120>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a46      	ldr	r2, [pc, #280]	; (8004b74 <xPortStartScheduler+0x124>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10a      	bne.n	8004a76 <xPortStartScheduler+0x26>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a76:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <xPortStartScheduler+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <xPortStartScheduler+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <xPortStartScheduler+0x46>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60fb      	str	r3, [r7, #12]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a96:	4b39      	ldr	r3, [pc, #228]	; (8004b7c <xPortStartScheduler+0x12c>)
 8004a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <xPortStartScheduler+0x130>)
 8004abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004abe:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ac4:	e009      	b.n	8004ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	4a2d      	ldr	r2, [pc, #180]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d0ef      	beq.n	8004ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1c3 0307 	rsb	r3, r3, #7
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00a      	beq.n	8004b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60bb      	str	r3, [r7, #8]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b3e:	f000 f8dd 	bl	8004cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <xPortStartScheduler+0x13c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b48:	f000 f8fc 	bl	8004d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xPortStartScheduler+0x140>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <xPortStartScheduler+0x140>)
 8004b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b58:	f7ff ff66 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b5c:	f7ff fa92 	bl	8004084 <vTaskSwitchContext>
	prvTaskExitError();
 8004b60:	f7ff ff22 	bl	80049a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	e000ed00 	.word	0xe000ed00
 8004b74:	410fc271 	.word	0x410fc271
 8004b78:	410fc270 	.word	0x410fc270
 8004b7c:	e000e400 	.word	0xe000e400
 8004b80:	200004b0 	.word	0x200004b0
 8004b84:	200004b4 	.word	0x200004b4
 8004b88:	e000ed20 	.word	0xe000ed20
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	e000ef34 	.word	0xe000ef34

08004b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
}
 8004bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <vPortEnterCritical+0x58>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <vPortEnterCritical+0x58>)
 8004bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <vPortEnterCritical+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10f      	bne.n	8004be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <vPortEnterCritical+0x5c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	603b      	str	r3, [r7, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vPortEnterCritical+0x4a>
	}
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <vPortExitCritical+0x50>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <vPortExitCritical+0x24>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <vPortExitCritical+0x50>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <vPortExitCritical+0x50>)
 8004c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <vPortExitCritical+0x50>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <vPortExitCritical+0x42>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f383 8811 	msr	BASEPRI, r3
}
 8004c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c
	...

08004c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c50:	f3ef 8009 	mrs	r0, PSP
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <pxCurrentTCBConst>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f01e 0f10 	tst.w	lr, #16
 8004c60:	bf08      	it	eq
 8004c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	6010      	str	r0, [r2, #0]
 8004c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c74:	f380 8811 	msr	BASEPRI, r0
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f7ff fa00 	bl	8004084 <vTaskSwitchContext>
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f380 8811 	msr	BASEPRI, r0
 8004c8c:	bc09      	pop	{r0, r3}
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	6808      	ldr	r0, [r1, #0]
 8004c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c96:	f01e 0f10 	tst.w	lr, #16
 8004c9a:	bf08      	it	eq
 8004c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ca0:	f380 8809 	msr	PSP, r0
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst>:
 8004cb0:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cd2:	f7ff f91f 	bl	8003f14 <xTaskIncrementTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <SysTick_Handler+0x40>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <vPortSetupTimerInterrupt+0x38>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <vPortSetupTimerInterrupt+0x3c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <vPortSetupTimerInterrupt+0x40>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <vPortSetupTimerInterrupt+0x44>)
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010
 8004d34:	e000e018 	.word	0xe000e018
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	e000e014 	.word	0xe000e014

08004d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d54 <vPortEnableVFP+0x10>
 8004d48:	6801      	ldr	r1, [r0, #0]
 8004d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d4e:	6001      	str	r1, [r0, #0]
 8004d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d52:	bf00      	nop
 8004d54:	e000ed88 	.word	0xe000ed88

08004d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d5e:	f3ef 8305 	mrs	r3, IPSR
 8004d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d914      	bls.n	8004d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <vPortValidateInterruptPriority+0x70>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <vPortValidateInterruptPriority+0x74>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	7afa      	ldrb	r2, [r7, #11]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20a      	bcs.n	8004d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <vPortValidateInterruptPriority+0x78>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <vPortValidateInterruptPriority+0x7c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d90a      	bls.n	8004dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	603b      	str	r3, [r7, #0]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <vPortValidateInterruptPriority+0x60>
	}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000e3f0 	.word	0xe000e3f0
 8004dcc:	200004b0 	.word	0x200004b0
 8004dd0:	e000ed0c 	.word	0xe000ed0c
 8004dd4:	200004b4 	.word	0x200004b4

08004dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de4:	f7fe ffec 	bl	8003dc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <pvPortMalloc+0x180>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df0:	f000 f920 	bl	8005034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <pvPortMalloc+0x184>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d014      	beq.n	8004e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <pvPortMalloc+0x6c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06e      	beq.n	8004f28 <pvPortMalloc+0x150>
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <pvPortMalloc+0x188>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d869      	bhi.n	8004f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5e:	e004      	b.n	8004e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <pvPortMalloc+0xa4>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f1      	bne.n	8004e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <pvPortMalloc+0x180>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d050      	beq.n	8004f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d91f      	bls.n	8004ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 f908 	bl	80050f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <pvPortMalloc+0x188>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <pvPortMalloc+0x190>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d203      	bcs.n	8004f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <pvPortMalloc+0x188>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <pvPortMalloc+0x190>)
 8004f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <pvPortMalloc+0x194>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <pvPortMalloc+0x194>)
 8004f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f28:	f7fe ff58 	bl	8003ddc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x174>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60fb      	str	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x172>
	return pvReturn;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200040c0 	.word	0x200040c0
 8004f5c:	200040d4 	.word	0x200040d4
 8004f60:	200040c4 	.word	0x200040c4
 8004f64:	200040b8 	.word	0x200040b8
 8004f68:	200040c8 	.word	0x200040c8
 8004f6c:	200040cc 	.word	0x200040cc

08004f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04d      	beq.n	800501e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f82:	2308      	movs	r3, #8
 8004f84:	425b      	negs	r3, r3
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vPortFree+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <vPortFree+0x44>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <vPortFree+0x62>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60bb      	str	r3, [r7, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <vPortFree+0xb8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01e      	beq.n	800501e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11a      	bne.n	800501e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <vPortFree+0xb8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ff8:	f7fe fee2 	bl	8003dc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <vPortFree+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4413      	add	r3, r2
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <vPortFree+0xbc>)
 8005008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f000 f874 	bl	80050f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <vPortFree+0xc0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	4a06      	ldr	r2, [pc, #24]	; (8005030 <vPortFree+0xc0>)
 8005018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800501a:	f7fe fedf 	bl	8003ddc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200040d4 	.word	0x200040d4
 800502c:	200040c4 	.word	0x200040c4
 8005030:	200040d0 	.word	0x200040d0

08005034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800503a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800503e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <prvHeapInit+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <prvHeapInit+0xac>)
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <prvHeapInit+0xb0>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <prvHeapInit+0xb0>)
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005080:	2208      	movs	r2, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <prvHeapInit+0xb4>)
 8005094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <prvHeapInit+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <prvHeapInit+0xb4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvHeapInit+0xb4>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <prvHeapInit+0xb8>)
 80050c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <prvHeapInit+0xbc>)
 80050ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <prvHeapInit+0xc0>)
 80050ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	200004b8 	.word	0x200004b8
 80050e4:	200040b8 	.word	0x200040b8
 80050e8:	200040c0 	.word	0x200040c0
 80050ec:	200040c8 	.word	0x200040c8
 80050f0:	200040c4 	.word	0x200040c4
 80050f4:	200040d4 	.word	0x200040d4

080050f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvInsertBlockIntoFreeList+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <prvInsertBlockIntoFreeList+0x14>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d8f7      	bhi.n	8005106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d108      	bne.n	800513a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d118      	bne.n	8005180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d00d      	beq.n	8005176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e008      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e003      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d002      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	200040b8 	.word	0x200040b8
 80051a8:	200040c0 	.word	0x200040c0

080051ac <std>:
 80051ac:	2300      	movs	r3, #0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	e9c0 3300 	strd	r3, r3, [r0]
 80051b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ba:	6083      	str	r3, [r0, #8]
 80051bc:	8181      	strh	r1, [r0, #12]
 80051be:	6643      	str	r3, [r0, #100]	; 0x64
 80051c0:	81c2      	strh	r2, [r0, #14]
 80051c2:	6183      	str	r3, [r0, #24]
 80051c4:	4619      	mov	r1, r3
 80051c6:	2208      	movs	r2, #8
 80051c8:	305c      	adds	r0, #92	; 0x5c
 80051ca:	f000 f9e5 	bl	8005598 <memset>
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <std+0x58>)
 80051d0:	6263      	str	r3, [r4, #36]	; 0x24
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <std+0x5c>)
 80051d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <std+0x60>)
 80051d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <std+0x64>)
 80051dc:	6323      	str	r3, [r4, #48]	; 0x30
 80051de:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <std+0x68>)
 80051e0:	6224      	str	r4, [r4, #32]
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d006      	beq.n	80051f4 <std+0x48>
 80051e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051ea:	4294      	cmp	r4, r2
 80051ec:	d002      	beq.n	80051f4 <std+0x48>
 80051ee:	33d0      	adds	r3, #208	; 0xd0
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d105      	bne.n	8005200 <std+0x54>
 80051f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051fc:	f000 ba44 	b.w	8005688 <__retarget_lock_init_recursive>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	bf00      	nop
 8005204:	080053e9 	.word	0x080053e9
 8005208:	0800540b 	.word	0x0800540b
 800520c:	08005443 	.word	0x08005443
 8005210:	08005467 	.word	0x08005467
 8005214:	200040d8 	.word	0x200040d8

08005218 <stdio_exit_handler>:
 8005218:	4a02      	ldr	r2, [pc, #8]	; (8005224 <stdio_exit_handler+0xc>)
 800521a:	4903      	ldr	r1, [pc, #12]	; (8005228 <stdio_exit_handler+0x10>)
 800521c:	4803      	ldr	r0, [pc, #12]	; (800522c <stdio_exit_handler+0x14>)
 800521e:	f000 b869 	b.w	80052f4 <_fwalk_sglue>
 8005222:	bf00      	nop
 8005224:	20000010 	.word	0x20000010
 8005228:	080059a9 	.word	0x080059a9
 800522c:	2000001c 	.word	0x2000001c

08005230 <cleanup_stdio>:
 8005230:	6841      	ldr	r1, [r0, #4]
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <cleanup_stdio+0x34>)
 8005234:	4299      	cmp	r1, r3
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
 800523a:	d001      	beq.n	8005240 <cleanup_stdio+0x10>
 800523c:	f000 fbb4 	bl	80059a8 <_fflush_r>
 8005240:	68a1      	ldr	r1, [r4, #8]
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <cleanup_stdio+0x38>)
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <cleanup_stdio+0x1e>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fbad 	bl	80059a8 <_fflush_r>
 800524e:	68e1      	ldr	r1, [r4, #12]
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <cleanup_stdio+0x3c>)
 8005252:	4299      	cmp	r1, r3
 8005254:	d004      	beq.n	8005260 <cleanup_stdio+0x30>
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f000 bba4 	b.w	80059a8 <_fflush_r>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	200040d8 	.word	0x200040d8
 8005268:	20004140 	.word	0x20004140
 800526c:	200041a8 	.word	0x200041a8

08005270 <global_stdio_init.part.0>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <global_stdio_init.part.0+0x30>)
 8005274:	4c0b      	ldr	r4, [pc, #44]	; (80052a4 <global_stdio_init.part.0+0x34>)
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <global_stdio_init.part.0+0x38>)
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4620      	mov	r0, r4
 800527c:	2200      	movs	r2, #0
 800527e:	2104      	movs	r1, #4
 8005280:	f7ff ff94 	bl	80051ac <std>
 8005284:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005288:	2201      	movs	r2, #1
 800528a:	2109      	movs	r1, #9
 800528c:	f7ff ff8e 	bl	80051ac <std>
 8005290:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005294:	2202      	movs	r2, #2
 8005296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529a:	2112      	movs	r1, #18
 800529c:	f7ff bf86 	b.w	80051ac <std>
 80052a0:	20004210 	.word	0x20004210
 80052a4:	200040d8 	.word	0x200040d8
 80052a8:	08005219 	.word	0x08005219

080052ac <__sfp_lock_acquire>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__sfp_lock_acquire+0x8>)
 80052ae:	f000 b9ec 	b.w	800568a <__retarget_lock_acquire_recursive>
 80052b2:	bf00      	nop
 80052b4:	20004219 	.word	0x20004219

080052b8 <__sfp_lock_release>:
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <__sfp_lock_release+0x8>)
 80052ba:	f000 b9e7 	b.w	800568c <__retarget_lock_release_recursive>
 80052be:	bf00      	nop
 80052c0:	20004219 	.word	0x20004219

080052c4 <__sinit>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
 80052c8:	f7ff fff0 	bl	80052ac <__sfp_lock_acquire>
 80052cc:	6a23      	ldr	r3, [r4, #32]
 80052ce:	b11b      	cbz	r3, 80052d8 <__sinit+0x14>
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	f7ff bff0 	b.w	80052b8 <__sfp_lock_release>
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__sinit+0x28>)
 80052da:	6223      	str	r3, [r4, #32]
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <__sinit+0x2c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f5      	bne.n	80052d0 <__sinit+0xc>
 80052e4:	f7ff ffc4 	bl	8005270 <global_stdio_init.part.0>
 80052e8:	e7f2      	b.n	80052d0 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08005231 	.word	0x08005231
 80052f0:	20004210 	.word	0x20004210

080052f4 <_fwalk_sglue>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4607      	mov	r7, r0
 80052fa:	4688      	mov	r8, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	2600      	movs	r6, #0
 8005300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005304:	f1b9 0901 	subs.w	r9, r9, #1
 8005308:	d505      	bpl.n	8005316 <_fwalk_sglue+0x22>
 800530a:	6824      	ldr	r4, [r4, #0]
 800530c:	2c00      	cmp	r4, #0
 800530e:	d1f7      	bne.n	8005300 <_fwalk_sglue+0xc>
 8005310:	4630      	mov	r0, r6
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d907      	bls.n	800532c <_fwalk_sglue+0x38>
 800531c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	d003      	beq.n	800532c <_fwalk_sglue+0x38>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	47c0      	blx	r8
 800532a:	4306      	orrs	r6, r0
 800532c:	3568      	adds	r5, #104	; 0x68
 800532e:	e7e9      	b.n	8005304 <_fwalk_sglue+0x10>

08005330 <_puts_r>:
 8005330:	6a03      	ldr	r3, [r0, #32]
 8005332:	b570      	push	{r4, r5, r6, lr}
 8005334:	6884      	ldr	r4, [r0, #8]
 8005336:	4605      	mov	r5, r0
 8005338:	460e      	mov	r6, r1
 800533a:	b90b      	cbnz	r3, 8005340 <_puts_r+0x10>
 800533c:	f7ff ffc2 	bl	80052c4 <__sinit>
 8005340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d405      	bmi.n	8005352 <_puts_r+0x22>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	0598      	lsls	r0, r3, #22
 800534a:	d402      	bmi.n	8005352 <_puts_r+0x22>
 800534c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534e:	f000 f99c 	bl	800568a <__retarget_lock_acquire_recursive>
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	0719      	lsls	r1, r3, #28
 8005356:	d513      	bpl.n	8005380 <_puts_r+0x50>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	b18b      	cbz	r3, 8005380 <_puts_r+0x50>
 800535c:	3e01      	subs	r6, #1
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005364:	3b01      	subs	r3, #1
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	b9e9      	cbnz	r1, 80053a6 <_puts_r+0x76>
 800536a:	2b00      	cmp	r3, #0
 800536c:	da2e      	bge.n	80053cc <_puts_r+0x9c>
 800536e:	4622      	mov	r2, r4
 8005370:	210a      	movs	r1, #10
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f87b 	bl	800546e <__swbuf_r>
 8005378:	3001      	adds	r0, #1
 800537a:	d007      	beq.n	800538c <_puts_r+0x5c>
 800537c:	250a      	movs	r5, #10
 800537e:	e007      	b.n	8005390 <_puts_r+0x60>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f8b0 	bl	80054e8 <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0e7      	beq.n	800535c <_puts_r+0x2c>
 800538c:	f04f 35ff 	mov.w	r5, #4294967295
 8005390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005392:	07da      	lsls	r2, r3, #31
 8005394:	d405      	bmi.n	80053a2 <_puts_r+0x72>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	059b      	lsls	r3, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_puts_r+0x72>
 800539c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539e:	f000 f975 	bl	800568c <__retarget_lock_release_recursive>
 80053a2:	4628      	mov	r0, r5
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da04      	bge.n	80053b4 <_puts_r+0x84>
 80053aa:	69a2      	ldr	r2, [r4, #24]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	dc06      	bgt.n	80053be <_puts_r+0x8e>
 80053b0:	290a      	cmp	r1, #10
 80053b2:	d004      	beq.n	80053be <_puts_r+0x8e>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	6022      	str	r2, [r4, #0]
 80053ba:	7019      	strb	r1, [r3, #0]
 80053bc:	e7cf      	b.n	800535e <_puts_r+0x2e>
 80053be:	4622      	mov	r2, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f854 	bl	800546e <__swbuf_r>
 80053c6:	3001      	adds	r0, #1
 80053c8:	d1c9      	bne.n	800535e <_puts_r+0x2e>
 80053ca:	e7df      	b.n	800538c <_puts_r+0x5c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	250a      	movs	r5, #10
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	701d      	strb	r5, [r3, #0]
 80053d6:	e7db      	b.n	8005390 <_puts_r+0x60>

080053d8 <puts>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <puts+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f7ff bfa7 	b.w	8005330 <_puts_r>
 80053e2:	bf00      	nop
 80053e4:	20000068 	.word	0x20000068

080053e8 <__sread>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	460c      	mov	r4, r1
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	f000 f8fc 	bl	80055ec <_read_r>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	bfab      	itete	ge
 80053f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053fa:	89a3      	ldrhlt	r3, [r4, #12]
 80053fc:	181b      	addge	r3, r3, r0
 80053fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005402:	bfac      	ite	ge
 8005404:	6563      	strge	r3, [r4, #84]	; 0x54
 8005406:	81a3      	strhlt	r3, [r4, #12]
 8005408:	bd10      	pop	{r4, pc}

0800540a <__swrite>:
 800540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	461f      	mov	r7, r3
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	05db      	lsls	r3, r3, #23
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4616      	mov	r6, r2
 800541a:	d505      	bpl.n	8005428 <__swrite+0x1e>
 800541c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005420:	2302      	movs	r3, #2
 8005422:	2200      	movs	r2, #0
 8005424:	f000 f8d0 	bl	80055c8 <_lseek_r>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	4632      	mov	r2, r6
 8005436:	463b      	mov	r3, r7
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543e:	f000 b8e7 	b.w	8005610 <_write_r>

08005442 <__sseek>:
 8005442:	b510      	push	{r4, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544a:	f000 f8bd 	bl	80055c8 <_lseek_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	bf15      	itete	ne
 8005454:	6560      	strne	r0, [r4, #84]	; 0x54
 8005456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800545a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strheq	r3, [r4, #12]
 8005460:	bf18      	it	ne
 8005462:	81a3      	strhne	r3, [r4, #12]
 8005464:	bd10      	pop	{r4, pc}

08005466 <__sclose>:
 8005466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546a:	f000 b89d 	b.w	80055a8 <_close_r>

0800546e <__swbuf_r>:
 800546e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005470:	460e      	mov	r6, r1
 8005472:	4614      	mov	r4, r2
 8005474:	4605      	mov	r5, r0
 8005476:	b118      	cbz	r0, 8005480 <__swbuf_r+0x12>
 8005478:	6a03      	ldr	r3, [r0, #32]
 800547a:	b90b      	cbnz	r3, 8005480 <__swbuf_r+0x12>
 800547c:	f7ff ff22 	bl	80052c4 <__sinit>
 8005480:	69a3      	ldr	r3, [r4, #24]
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	071a      	lsls	r2, r3, #28
 8005488:	d525      	bpl.n	80054d6 <__swbuf_r+0x68>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	b31b      	cbz	r3, 80054d6 <__swbuf_r+0x68>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6922      	ldr	r2, [r4, #16]
 8005492:	1a98      	subs	r0, r3, r2
 8005494:	6963      	ldr	r3, [r4, #20]
 8005496:	b2f6      	uxtb	r6, r6
 8005498:	4283      	cmp	r3, r0
 800549a:	4637      	mov	r7, r6
 800549c:	dc04      	bgt.n	80054a8 <__swbuf_r+0x3a>
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 fa81 	bl	80059a8 <_fflush_r>
 80054a6:	b9e0      	cbnz	r0, 80054e2 <__swbuf_r+0x74>
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	701e      	strb	r6, [r3, #0]
 80054b6:	6962      	ldr	r2, [r4, #20]
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d004      	beq.n	80054c8 <__swbuf_r+0x5a>
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	07db      	lsls	r3, r3, #31
 80054c2:	d506      	bpl.n	80054d2 <__swbuf_r+0x64>
 80054c4:	2e0a      	cmp	r6, #10
 80054c6:	d104      	bne.n	80054d2 <__swbuf_r+0x64>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 fa6c 	bl	80059a8 <_fflush_r>
 80054d0:	b938      	cbnz	r0, 80054e2 <__swbuf_r+0x74>
 80054d2:	4638      	mov	r0, r7
 80054d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d6:	4621      	mov	r1, r4
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 f805 	bl	80054e8 <__swsetup_r>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d0d5      	beq.n	800548e <__swbuf_r+0x20>
 80054e2:	f04f 37ff 	mov.w	r7, #4294967295
 80054e6:	e7f4      	b.n	80054d2 <__swbuf_r+0x64>

080054e8 <__swsetup_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <__swsetup_r+0xac>)
 80054ec:	4605      	mov	r5, r0
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	460c      	mov	r4, r1
 80054f2:	b118      	cbz	r0, 80054fc <__swsetup_r+0x14>
 80054f4:	6a03      	ldr	r3, [r0, #32]
 80054f6:	b90b      	cbnz	r3, 80054fc <__swsetup_r+0x14>
 80054f8:	f7ff fee4 	bl	80052c4 <__sinit>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005502:	0718      	lsls	r0, r3, #28
 8005504:	d422      	bmi.n	800554c <__swsetup_r+0x64>
 8005506:	06d9      	lsls	r1, r3, #27
 8005508:	d407      	bmi.n	800551a <__swsetup_r+0x32>
 800550a:	2309      	movs	r3, #9
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	e034      	b.n	8005584 <__swsetup_r+0x9c>
 800551a:	0758      	lsls	r0, r3, #29
 800551c:	d512      	bpl.n	8005544 <__swsetup_r+0x5c>
 800551e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005520:	b141      	cbz	r1, 8005534 <__swsetup_r+0x4c>
 8005522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005526:	4299      	cmp	r1, r3
 8005528:	d002      	beq.n	8005530 <__swsetup_r+0x48>
 800552a:	4628      	mov	r0, r5
 800552c:	f000 f8be 	bl	80056ac <_free_r>
 8005530:	2300      	movs	r3, #0
 8005532:	6363      	str	r3, [r4, #52]	; 0x34
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	2300      	movs	r3, #0
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f043 0308 	orr.w	r3, r3, #8
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	6923      	ldr	r3, [r4, #16]
 800554e:	b94b      	cbnz	r3, 8005564 <__swsetup_r+0x7c>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d003      	beq.n	8005564 <__swsetup_r+0x7c>
 800555c:	4621      	mov	r1, r4
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fa70 	bl	8005a44 <__smakebuf_r>
 8005564:	89a0      	ldrh	r0, [r4, #12]
 8005566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800556a:	f010 0301 	ands.w	r3, r0, #1
 800556e:	d00a      	beq.n	8005586 <__swsetup_r+0x9e>
 8005570:	2300      	movs	r3, #0
 8005572:	60a3      	str	r3, [r4, #8]
 8005574:	6963      	ldr	r3, [r4, #20]
 8005576:	425b      	negs	r3, r3
 8005578:	61a3      	str	r3, [r4, #24]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	b943      	cbnz	r3, 8005590 <__swsetup_r+0xa8>
 800557e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005582:	d1c4      	bne.n	800550e <__swsetup_r+0x26>
 8005584:	bd38      	pop	{r3, r4, r5, pc}
 8005586:	0781      	lsls	r1, r0, #30
 8005588:	bf58      	it	pl
 800558a:	6963      	ldrpl	r3, [r4, #20]
 800558c:	60a3      	str	r3, [r4, #8]
 800558e:	e7f4      	b.n	800557a <__swsetup_r+0x92>
 8005590:	2000      	movs	r0, #0
 8005592:	e7f7      	b.n	8005584 <__swsetup_r+0x9c>
 8005594:	20000068 	.word	0x20000068

08005598 <memset>:
 8005598:	4402      	add	r2, r0
 800559a:	4603      	mov	r3, r0
 800559c:	4293      	cmp	r3, r2
 800559e:	d100      	bne.n	80055a2 <memset+0xa>
 80055a0:	4770      	bx	lr
 80055a2:	f803 1b01 	strb.w	r1, [r3], #1
 80055a6:	e7f9      	b.n	800559c <memset+0x4>

080055a8 <_close_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	; (80055c4 <_close_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fb23 	bl	8000bfe <_close>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_close_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_close_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	20004214 	.word	0x20004214

080055c8 <_lseek_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_lseek_r+0x20>)
 80055cc:	4604      	mov	r4, r0
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fb fb38 	bl	8000c4c <_lseek>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_lseek_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_lseek_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20004214 	.word	0x20004214

080055ec <_read_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d07      	ldr	r5, [pc, #28]	; (800560c <_read_r+0x20>)
 80055f0:	4604      	mov	r4, r0
 80055f2:	4608      	mov	r0, r1
 80055f4:	4611      	mov	r1, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	602a      	str	r2, [r5, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f7fb fae2 	bl	8000bc4 <_read>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_read_r+0x1e>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_read_r+0x1e>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	20004214 	.word	0x20004214

08005610 <_write_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d07      	ldr	r5, [pc, #28]	; (8005630 <_write_r+0x20>)
 8005614:	4604      	mov	r4, r0
 8005616:	4608      	mov	r0, r1
 8005618:	4611      	mov	r1, r2
 800561a:	2200      	movs	r2, #0
 800561c:	602a      	str	r2, [r5, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	f7fa ffb5 	bl	800058e <_write>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_write_r+0x1e>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_write_r+0x1e>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20004214 	.word	0x20004214

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000068 	.word	0x20000068

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4d0d      	ldr	r5, [pc, #52]	; (8005678 <__libc_init_array+0x38>)
 8005644:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	2600      	movs	r6, #0
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	4d0b      	ldr	r5, [pc, #44]	; (8005680 <__libc_init_array+0x40>)
 8005652:	4c0c      	ldr	r4, [pc, #48]	; (8005684 <__libc_init_array+0x44>)
 8005654:	f000 fa64 	bl	8005b20 <_init>
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	2600      	movs	r6, #0
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	08005d0c 	.word	0x08005d0c
 800567c:	08005d0c 	.word	0x08005d0c
 8005680:	08005d0c 	.word	0x08005d0c
 8005684:	08005d10 	.word	0x08005d10

08005688 <__retarget_lock_init_recursive>:
 8005688:	4770      	bx	lr

0800568a <__retarget_lock_acquire_recursive>:
 800568a:	4770      	bx	lr

0800568c <__retarget_lock_release_recursive>:
 800568c:	4770      	bx	lr

0800568e <memcpy>:
 800568e:	440a      	add	r2, r1
 8005690:	4291      	cmp	r1, r2
 8005692:	f100 33ff 	add.w	r3, r0, #4294967295
 8005696:	d100      	bne.n	800569a <memcpy+0xc>
 8005698:	4770      	bx	lr
 800569a:	b510      	push	{r4, lr}
 800569c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a4:	4291      	cmp	r1, r2
 80056a6:	d1f9      	bne.n	800569c <memcpy+0xe>
 80056a8:	bd10      	pop	{r4, pc}
	...

080056ac <_free_r>:
 80056ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d044      	beq.n	800573c <_free_r+0x90>
 80056b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b6:	9001      	str	r0, [sp, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f1a1 0404 	sub.w	r4, r1, #4
 80056be:	bfb8      	it	lt
 80056c0:	18e4      	addlt	r4, r4, r3
 80056c2:	f000 f8df 	bl	8005884 <__malloc_lock>
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <_free_r+0x94>)
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	b933      	cbnz	r3, 80056dc <_free_r+0x30>
 80056ce:	6063      	str	r3, [r4, #4]
 80056d0:	6014      	str	r4, [r2, #0]
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056d8:	f000 b8da 	b.w	8005890 <__malloc_unlock>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d908      	bls.n	80056f2 <_free_r+0x46>
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	1961      	adds	r1, r4, r5
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf01      	itttt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	1949      	addeq	r1, r1, r5
 80056ee:	6021      	streq	r1, [r4, #0]
 80056f0:	e7ed      	b.n	80056ce <_free_r+0x22>
 80056f2:	461a      	mov	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b10b      	cbz	r3, 80056fc <_free_r+0x50>
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d9fa      	bls.n	80056f2 <_free_r+0x46>
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	1855      	adds	r5, r2, r1
 8005700:	42a5      	cmp	r5, r4
 8005702:	d10b      	bne.n	800571c <_free_r+0x70>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	4421      	add	r1, r4
 8005708:	1854      	adds	r4, r2, r1
 800570a:	42a3      	cmp	r3, r4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	d1e0      	bne.n	80056d2 <_free_r+0x26>
 8005710:	681c      	ldr	r4, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	440c      	add	r4, r1
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	e7da      	b.n	80056d2 <_free_r+0x26>
 800571c:	d902      	bls.n	8005724 <_free_r+0x78>
 800571e:	230c      	movs	r3, #12
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	e7d6      	b.n	80056d2 <_free_r+0x26>
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	1961      	adds	r1, r4, r5
 8005728:	428b      	cmp	r3, r1
 800572a:	bf04      	itt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	bf04      	itt	eq
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	6054      	str	r4, [r2, #4]
 800573a:	e7ca      	b.n	80056d2 <_free_r+0x26>
 800573c:	b003      	add	sp, #12
 800573e:	bd30      	pop	{r4, r5, pc}
 8005740:	2000421c 	.word	0x2000421c

08005744 <sbrk_aligned>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4e0e      	ldr	r6, [pc, #56]	; (8005780 <sbrk_aligned+0x3c>)
 8005748:	460c      	mov	r4, r1
 800574a:	6831      	ldr	r1, [r6, #0]
 800574c:	4605      	mov	r5, r0
 800574e:	b911      	cbnz	r1, 8005756 <sbrk_aligned+0x12>
 8005750:	f000 f9d6 	bl	8005b00 <_sbrk_r>
 8005754:	6030      	str	r0, [r6, #0]
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 f9d1 	bl	8005b00 <_sbrk_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d00a      	beq.n	8005778 <sbrk_aligned+0x34>
 8005762:	1cc4      	adds	r4, r0, #3
 8005764:	f024 0403 	bic.w	r4, r4, #3
 8005768:	42a0      	cmp	r0, r4
 800576a:	d007      	beq.n	800577c <sbrk_aligned+0x38>
 800576c:	1a21      	subs	r1, r4, r0
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f9c6 	bl	8005b00 <_sbrk_r>
 8005774:	3001      	adds	r0, #1
 8005776:	d101      	bne.n	800577c <sbrk_aligned+0x38>
 8005778:	f04f 34ff 	mov.w	r4, #4294967295
 800577c:	4620      	mov	r0, r4
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	20004220 	.word	0x20004220

08005784 <_malloc_r>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	1ccd      	adds	r5, r1, #3
 800578a:	f025 0503 	bic.w	r5, r5, #3
 800578e:	3508      	adds	r5, #8
 8005790:	2d0c      	cmp	r5, #12
 8005792:	bf38      	it	cc
 8005794:	250c      	movcc	r5, #12
 8005796:	2d00      	cmp	r5, #0
 8005798:	4607      	mov	r7, r0
 800579a:	db01      	blt.n	80057a0 <_malloc_r+0x1c>
 800579c:	42a9      	cmp	r1, r5
 800579e:	d905      	bls.n	80057ac <_malloc_r+0x28>
 80057a0:	230c      	movs	r3, #12
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	2600      	movs	r6, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005880 <_malloc_r+0xfc>
 80057b0:	f000 f868 	bl	8005884 <__malloc_lock>
 80057b4:	f8d8 3000 	ldr.w	r3, [r8]
 80057b8:	461c      	mov	r4, r3
 80057ba:	bb5c      	cbnz	r4, 8005814 <_malloc_r+0x90>
 80057bc:	4629      	mov	r1, r5
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ffc0 	bl	8005744 <sbrk_aligned>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	4604      	mov	r4, r0
 80057c8:	d155      	bne.n	8005876 <_malloc_r+0xf2>
 80057ca:	f8d8 4000 	ldr.w	r4, [r8]
 80057ce:	4626      	mov	r6, r4
 80057d0:	2e00      	cmp	r6, #0
 80057d2:	d145      	bne.n	8005860 <_malloc_r+0xdc>
 80057d4:	2c00      	cmp	r4, #0
 80057d6:	d048      	beq.n	800586a <_malloc_r+0xe6>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	4631      	mov	r1, r6
 80057dc:	4638      	mov	r0, r7
 80057de:	eb04 0903 	add.w	r9, r4, r3
 80057e2:	f000 f98d 	bl	8005b00 <_sbrk_r>
 80057e6:	4581      	cmp	r9, r0
 80057e8:	d13f      	bne.n	800586a <_malloc_r+0xe6>
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	1a6d      	subs	r5, r5, r1
 80057ee:	4629      	mov	r1, r5
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ffa7 	bl	8005744 <sbrk_aligned>
 80057f6:	3001      	adds	r0, #1
 80057f8:	d037      	beq.n	800586a <_malloc_r+0xe6>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	442b      	add	r3, r5
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	f8d8 3000 	ldr.w	r3, [r8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d038      	beq.n	800587a <_malloc_r+0xf6>
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	42a2      	cmp	r2, r4
 800580c:	d12b      	bne.n	8005866 <_malloc_r+0xe2>
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	e00f      	b.n	8005834 <_malloc_r+0xb0>
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	1b52      	subs	r2, r2, r5
 8005818:	d41f      	bmi.n	800585a <_malloc_r+0xd6>
 800581a:	2a0b      	cmp	r2, #11
 800581c:	d917      	bls.n	800584e <_malloc_r+0xca>
 800581e:	1961      	adds	r1, r4, r5
 8005820:	42a3      	cmp	r3, r4
 8005822:	6025      	str	r5, [r4, #0]
 8005824:	bf18      	it	ne
 8005826:	6059      	strne	r1, [r3, #4]
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	bf08      	it	eq
 800582c:	f8c8 1000 	streq.w	r1, [r8]
 8005830:	5162      	str	r2, [r4, r5]
 8005832:	604b      	str	r3, [r1, #4]
 8005834:	4638      	mov	r0, r7
 8005836:	f104 060b 	add.w	r6, r4, #11
 800583a:	f000 f829 	bl	8005890 <__malloc_unlock>
 800583e:	f026 0607 	bic.w	r6, r6, #7
 8005842:	1d23      	adds	r3, r4, #4
 8005844:	1af2      	subs	r2, r6, r3
 8005846:	d0ae      	beq.n	80057a6 <_malloc_r+0x22>
 8005848:	1b9b      	subs	r3, r3, r6
 800584a:	50a3      	str	r3, [r4, r2]
 800584c:	e7ab      	b.n	80057a6 <_malloc_r+0x22>
 800584e:	42a3      	cmp	r3, r4
 8005850:	6862      	ldr	r2, [r4, #4]
 8005852:	d1dd      	bne.n	8005810 <_malloc_r+0x8c>
 8005854:	f8c8 2000 	str.w	r2, [r8]
 8005858:	e7ec      	b.n	8005834 <_malloc_r+0xb0>
 800585a:	4623      	mov	r3, r4
 800585c:	6864      	ldr	r4, [r4, #4]
 800585e:	e7ac      	b.n	80057ba <_malloc_r+0x36>
 8005860:	4634      	mov	r4, r6
 8005862:	6876      	ldr	r6, [r6, #4]
 8005864:	e7b4      	b.n	80057d0 <_malloc_r+0x4c>
 8005866:	4613      	mov	r3, r2
 8005868:	e7cc      	b.n	8005804 <_malloc_r+0x80>
 800586a:	230c      	movs	r3, #12
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	4638      	mov	r0, r7
 8005870:	f000 f80e 	bl	8005890 <__malloc_unlock>
 8005874:	e797      	b.n	80057a6 <_malloc_r+0x22>
 8005876:	6025      	str	r5, [r4, #0]
 8005878:	e7dc      	b.n	8005834 <_malloc_r+0xb0>
 800587a:	605b      	str	r3, [r3, #4]
 800587c:	deff      	udf	#255	; 0xff
 800587e:	bf00      	nop
 8005880:	2000421c 	.word	0x2000421c

08005884 <__malloc_lock>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__malloc_lock+0x8>)
 8005886:	f7ff bf00 	b.w	800568a <__retarget_lock_acquire_recursive>
 800588a:	bf00      	nop
 800588c:	20004218 	.word	0x20004218

08005890 <__malloc_unlock>:
 8005890:	4801      	ldr	r0, [pc, #4]	; (8005898 <__malloc_unlock+0x8>)
 8005892:	f7ff befb 	b.w	800568c <__retarget_lock_release_recursive>
 8005896:	bf00      	nop
 8005898:	20004218 	.word	0x20004218

0800589c <__sflush_r>:
 800589c:	898a      	ldrh	r2, [r1, #12]
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	4605      	mov	r5, r0
 80058a4:	0710      	lsls	r0, r2, #28
 80058a6:	460c      	mov	r4, r1
 80058a8:	d458      	bmi.n	800595c <__sflush_r+0xc0>
 80058aa:	684b      	ldr	r3, [r1, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dc05      	bgt.n	80058bc <__sflush_r+0x20>
 80058b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dc02      	bgt.n	80058bc <__sflush_r+0x20>
 80058b6:	2000      	movs	r0, #0
 80058b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058be:	2e00      	cmp	r6, #0
 80058c0:	d0f9      	beq.n	80058b6 <__sflush_r+0x1a>
 80058c2:	2300      	movs	r3, #0
 80058c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058c8:	682f      	ldr	r7, [r5, #0]
 80058ca:	6a21      	ldr	r1, [r4, #32]
 80058cc:	602b      	str	r3, [r5, #0]
 80058ce:	d032      	beq.n	8005936 <__sflush_r+0x9a>
 80058d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	075a      	lsls	r2, r3, #29
 80058d6:	d505      	bpl.n	80058e4 <__sflush_r+0x48>
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	1ac0      	subs	r0, r0, r3
 80058dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058de:	b10b      	cbz	r3, 80058e4 <__sflush_r+0x48>
 80058e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e2:	1ac0      	subs	r0, r0, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	4602      	mov	r2, r0
 80058e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ea:	6a21      	ldr	r1, [r4, #32]
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b0      	blx	r6
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	d106      	bne.n	8005904 <__sflush_r+0x68>
 80058f6:	6829      	ldr	r1, [r5, #0]
 80058f8:	291d      	cmp	r1, #29
 80058fa:	d82b      	bhi.n	8005954 <__sflush_r+0xb8>
 80058fc:	4a29      	ldr	r2, [pc, #164]	; (80059a4 <__sflush_r+0x108>)
 80058fe:	410a      	asrs	r2, r1
 8005900:	07d6      	lsls	r6, r2, #31
 8005902:	d427      	bmi.n	8005954 <__sflush_r+0xb8>
 8005904:	2200      	movs	r2, #0
 8005906:	6062      	str	r2, [r4, #4]
 8005908:	04d9      	lsls	r1, r3, #19
 800590a:	6922      	ldr	r2, [r4, #16]
 800590c:	6022      	str	r2, [r4, #0]
 800590e:	d504      	bpl.n	800591a <__sflush_r+0x7e>
 8005910:	1c42      	adds	r2, r0, #1
 8005912:	d101      	bne.n	8005918 <__sflush_r+0x7c>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b903      	cbnz	r3, 800591a <__sflush_r+0x7e>
 8005918:	6560      	str	r0, [r4, #84]	; 0x54
 800591a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591c:	602f      	str	r7, [r5, #0]
 800591e:	2900      	cmp	r1, #0
 8005920:	d0c9      	beq.n	80058b6 <__sflush_r+0x1a>
 8005922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005926:	4299      	cmp	r1, r3
 8005928:	d002      	beq.n	8005930 <__sflush_r+0x94>
 800592a:	4628      	mov	r0, r5
 800592c:	f7ff febe 	bl	80056ac <_free_r>
 8005930:	2000      	movs	r0, #0
 8005932:	6360      	str	r0, [r4, #52]	; 0x34
 8005934:	e7c0      	b.n	80058b8 <__sflush_r+0x1c>
 8005936:	2301      	movs	r3, #1
 8005938:	4628      	mov	r0, r5
 800593a:	47b0      	blx	r6
 800593c:	1c41      	adds	r1, r0, #1
 800593e:	d1c8      	bne.n	80058d2 <__sflush_r+0x36>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0c5      	beq.n	80058d2 <__sflush_r+0x36>
 8005946:	2b1d      	cmp	r3, #29
 8005948:	d001      	beq.n	800594e <__sflush_r+0xb2>
 800594a:	2b16      	cmp	r3, #22
 800594c:	d101      	bne.n	8005952 <__sflush_r+0xb6>
 800594e:	602f      	str	r7, [r5, #0]
 8005950:	e7b1      	b.n	80058b6 <__sflush_r+0x1a>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	e7ad      	b.n	80058b8 <__sflush_r+0x1c>
 800595c:	690f      	ldr	r7, [r1, #16]
 800595e:	2f00      	cmp	r7, #0
 8005960:	d0a9      	beq.n	80058b6 <__sflush_r+0x1a>
 8005962:	0793      	lsls	r3, r2, #30
 8005964:	680e      	ldr	r6, [r1, #0]
 8005966:	bf08      	it	eq
 8005968:	694b      	ldreq	r3, [r1, #20]
 800596a:	600f      	str	r7, [r1, #0]
 800596c:	bf18      	it	ne
 800596e:	2300      	movne	r3, #0
 8005970:	eba6 0807 	sub.w	r8, r6, r7
 8005974:	608b      	str	r3, [r1, #8]
 8005976:	f1b8 0f00 	cmp.w	r8, #0
 800597a:	dd9c      	ble.n	80058b6 <__sflush_r+0x1a>
 800597c:	6a21      	ldr	r1, [r4, #32]
 800597e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005980:	4643      	mov	r3, r8
 8005982:	463a      	mov	r2, r7
 8005984:	4628      	mov	r0, r5
 8005986:	47b0      	blx	r6
 8005988:	2800      	cmp	r0, #0
 800598a:	dc06      	bgt.n	800599a <__sflush_r+0xfe>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	e78e      	b.n	80058b8 <__sflush_r+0x1c>
 800599a:	4407      	add	r7, r0
 800599c:	eba8 0800 	sub.w	r8, r8, r0
 80059a0:	e7e9      	b.n	8005976 <__sflush_r+0xda>
 80059a2:	bf00      	nop
 80059a4:	dfbffffe 	.word	0xdfbffffe

080059a8 <_fflush_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	690b      	ldr	r3, [r1, #16]
 80059ac:	4605      	mov	r5, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	b913      	cbnz	r3, 80059b8 <_fflush_r+0x10>
 80059b2:	2500      	movs	r5, #0
 80059b4:	4628      	mov	r0, r5
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	b118      	cbz	r0, 80059c2 <_fflush_r+0x1a>
 80059ba:	6a03      	ldr	r3, [r0, #32]
 80059bc:	b90b      	cbnz	r3, 80059c2 <_fflush_r+0x1a>
 80059be:	f7ff fc81 	bl	80052c4 <__sinit>
 80059c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f3      	beq.n	80059b2 <_fflush_r+0xa>
 80059ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059cc:	07d0      	lsls	r0, r2, #31
 80059ce:	d404      	bmi.n	80059da <_fflush_r+0x32>
 80059d0:	0599      	lsls	r1, r3, #22
 80059d2:	d402      	bmi.n	80059da <_fflush_r+0x32>
 80059d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d6:	f7ff fe58 	bl	800568a <__retarget_lock_acquire_recursive>
 80059da:	4628      	mov	r0, r5
 80059dc:	4621      	mov	r1, r4
 80059de:	f7ff ff5d 	bl	800589c <__sflush_r>
 80059e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059e4:	07da      	lsls	r2, r3, #31
 80059e6:	4605      	mov	r5, r0
 80059e8:	d4e4      	bmi.n	80059b4 <_fflush_r+0xc>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	d4e1      	bmi.n	80059b4 <_fflush_r+0xc>
 80059f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059f2:	f7ff fe4b 	bl	800568c <__retarget_lock_release_recursive>
 80059f6:	e7dd      	b.n	80059b4 <_fflush_r+0xc>

080059f8 <__swhatbuf_r>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	2900      	cmp	r1, #0
 8005a02:	b096      	sub	sp, #88	; 0x58
 8005a04:	4615      	mov	r5, r2
 8005a06:	461e      	mov	r6, r3
 8005a08:	da0d      	bge.n	8005a26 <__swhatbuf_r+0x2e>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	bf0c      	ite	eq
 8005a16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a1a:	2340      	movne	r3, #64	; 0x40
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	6031      	str	r1, [r6, #0]
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	b016      	add	sp, #88	; 0x58
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
 8005a26:	466a      	mov	r2, sp
 8005a28:	f000 f848 	bl	8005abc <_fstat_r>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	dbec      	blt.n	8005a0a <__swhatbuf_r+0x12>
 8005a30:	9901      	ldr	r1, [sp, #4]
 8005a32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a3a:	4259      	negs	r1, r3
 8005a3c:	4159      	adcs	r1, r3
 8005a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a42:	e7eb      	b.n	8005a1c <__swhatbuf_r+0x24>

08005a44 <__smakebuf_r>:
 8005a44:	898b      	ldrh	r3, [r1, #12]
 8005a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a48:	079d      	lsls	r5, r3, #30
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	d507      	bpl.n	8005a60 <__smakebuf_r+0x1c>
 8005a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	6163      	str	r3, [r4, #20]
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	ab01      	add	r3, sp, #4
 8005a62:	466a      	mov	r2, sp
 8005a64:	f7ff ffc8 	bl	80059f8 <__swhatbuf_r>
 8005a68:	9900      	ldr	r1, [sp, #0]
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff fe89 	bl	8005784 <_malloc_r>
 8005a72:	b948      	cbnz	r0, 8005a88 <__smakebuf_r+0x44>
 8005a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a78:	059a      	lsls	r2, r3, #22
 8005a7a:	d4ef      	bmi.n	8005a5c <__smakebuf_r+0x18>
 8005a7c:	f023 0303 	bic.w	r3, r3, #3
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	e7e3      	b.n	8005a50 <__smakebuf_r+0xc>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	6020      	str	r0, [r4, #0]
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	9b00      	ldr	r3, [sp, #0]
 8005a94:	6163      	str	r3, [r4, #20]
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	6120      	str	r0, [r4, #16]
 8005a9a:	b15b      	cbz	r3, 8005ab4 <__smakebuf_r+0x70>
 8005a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f000 f81d 	bl	8005ae0 <_isatty_r>
 8005aa6:	b128      	cbz	r0, 8005ab4 <__smakebuf_r+0x70>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	431d      	orrs	r5, r3
 8005ab8:	81a5      	strh	r5, [r4, #12]
 8005aba:	e7cf      	b.n	8005a5c <__smakebuf_r+0x18>

08005abc <_fstat_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	; (8005adc <_fstat_r+0x20>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	f7fb f8a4 	bl	8000c16 <_fstat>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	d102      	bne.n	8005ad8 <_fstat_r+0x1c>
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	b103      	cbz	r3, 8005ad8 <_fstat_r+0x1c>
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
 8005ada:	bf00      	nop
 8005adc:	20004214 	.word	0x20004214

08005ae0 <_isatty_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d06      	ldr	r5, [pc, #24]	; (8005afc <_isatty_r+0x1c>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	f7fb f8a3 	bl	8000c36 <_isatty>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_isatty_r+0x1a>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_isatty_r+0x1a>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20004214 	.word	0x20004214

08005b00 <_sbrk_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	; (8005b1c <_sbrk_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fb f8ac 	bl	8000c68 <_sbrk>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_sbrk_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_sbrk_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20004214 	.word	0x20004214

08005b20 <_init>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr

08005b2c <_fini>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr
