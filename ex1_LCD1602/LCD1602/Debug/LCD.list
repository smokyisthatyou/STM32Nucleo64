
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f10  08002f10  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002f74  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002f74  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000083f1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175b  00000000  00000000  000284c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00029c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000563  00000000  00000000  0002a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002133b  00000000  00000000  0002a89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098e3  00000000  00000000  0004bbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c86f5  00000000  00000000  000554b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020c8  00000000  00000000  0011dbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002e78 	.word	0x08002e78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002e78 	.word	0x08002e78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
 80005c8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005d6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005da:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005de:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f80e 	bl	8000612 <Lcd_init>

	return lcd;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	461d      	mov	r5, r3
 80005fa:	f107 0410 	add.w	r4, r7, #16
 80005fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000606:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	3728      	adds	r7, #40	; 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}

08000612 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7d9b      	ldrb	r3, [r3, #22]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10c      	bne.n	800063c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000622:	2133      	movs	r1, #51	; 0x33
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f86f 	bl	8000708 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800062a:	2132      	movs	r1, #50	; 0x32
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f86b 	bl	8000708 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000632:	2128      	movs	r1, #40	; 0x28
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f867 	bl	8000708 <lcd_write_command>
 800063a:	e003      	b.n	8000644 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800063c:	2138      	movs	r1, #56	; 0x38
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f862 	bl	8000708 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000644:	2101      	movs	r1, #1
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f85e 	bl	8000708 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800064c:	210c      	movs	r1, #12
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f85a 	bl	8000708 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000654:	2106      	movs	r1, #6
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f856 	bl	8000708 <lcd_write_command>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <Lcd_int+0x2c>)
 8000676:	4618      	mov	r0, r3
 8000678:	f001 ff5a 	bl	8002530 <siprintf>

	Lcd_string(lcd, buffer);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f806 	bl	8000694 <Lcd_string>
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08002e90 	.word	0x08002e90

08000694 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e00a      	b.n	80006ba <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f858 	bl	8000764 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3301      	adds	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	7bfc      	ldrb	r4, [r7, #15]
 80006bc:	6838      	ldr	r0, [r7, #0]
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d3ed      	bcc.n	80006a4 <Lcd_string+0x10>
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd90      	pop	{r4, r7, pc}
	...

080006d4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
 80006e0:	4613      	mov	r3, r2
 80006e2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	4a07      	ldr	r2, [pc, #28]	; (8000704 <Lcd_cursor+0x30>)
 80006e8:	5cd2      	ldrb	r2, [r2, r3]
 80006ea:	78bb      	ldrb	r3, [r7, #2]
 80006ec:	4413      	add	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3b80      	subs	r3, #128	; 0x80
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f806 	bl	8000708 <lcd_write_command>
	#endif
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08002eb8 	.word	0x08002eb8

08000708 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	f000 fe40 	bl	80013a4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d111      	bne.n	8000750 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f842 	bl	80007c0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f839 	bl	80007c0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800074e:	e005      	b.n	800075c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2208      	movs	r2, #8
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f832 	bl	80007c0 <lcd_write>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6898      	ldr	r0, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f000 fe12 	bl	80013a4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7d9b      	ldrb	r3, [r3, #22]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d111      	bne.n	80007ac <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2204      	movs	r2, #4
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f814 	bl	80007c0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2204      	movs	r2, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f80b 	bl	80007c0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007aa:	e005      	b.n	80007b8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2208      	movs	r2, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f804 	bl	80007c0 <lcd_write>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e019      	b.n	800080a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	8819      	ldrh	r1, [r3, #0]
 80007ee:	78fa      	ldrb	r2, [r7, #3]
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	fa42 f303 	asr.w	r3, r2, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	f000 fdd0 	bl	80013a4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	78bb      	ldrb	r3, [r7, #2]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3e1      	bcc.n	80007d6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6918      	ldr	r0, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	8a9b      	ldrh	r3, [r3, #20]
 800081a:	2201      	movs	r2, #1
 800081c:	4619      	mov	r1, r3
 800081e:	f000 fdc1 	bl	80013a4 <HAL_GPIO_WritePin>
	DELAY(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fb20 	bl	8000e68 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6918      	ldr	r0, [r3, #16]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	8a9b      	ldrh	r3, [r3, #20]
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	f000 fdb6 	bl	80013a4 <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b098      	sub	sp, #96	; 0x60
 8000844:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fa9d 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f85b 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f8f1 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000852:	f000 f8c5 	bl	80009e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <main+0xb4>)
 8000858:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800085c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <main+0xb8>)
 8000864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086c:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000870:	4638      	mov	r0, r7
 8000872:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000876:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800087a:	2300      	movs	r3, #0
 800087c:	9303      	str	r3, [sp, #12]
 800087e:	2310      	movs	r3, #16
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <main+0xbc>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2320      	movs	r3, #32
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <main+0xbc>)
 800088c:	f7ff fe96 	bl	80005bc <Lcd_create>
 8000890:	f107 041c 	add.w	r4, r7, #28
 8000894:	463d      	mov	r5, r7
 8000896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800089e:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,3);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2203      	movs	r2, #3
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff12 	bl	80006d4 <Lcd_cursor>
    Lcd_string(&lcd, "Time left");
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4912      	ldr	r1, [pc, #72]	; (8000900 <main+0xc0>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff feec 	bl	8000694 <Lcd_string>
      for ( int x = 600; x >= 1 ; x-- )
 80008bc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008c2:	e013      	b.n	80008ec <main+0xac>
      {
        Lcd_cursor(&lcd, 1,7);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2207      	movs	r2, #7
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff01 	bl	80006d4 <Lcd_cursor>
        Lcd_int(&lcd, x);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fec3 	bl	8000664 <Lcd_int>
        HAL_Delay (1000);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f000 fac1 	bl	8000e68 <HAL_Delay>
      for ( int x = 600; x >= 1 ; x-- )
 80008e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008e8:	3b01      	subs	r3, #1
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dce8      	bgt.n	80008c4 <main+0x84>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <main+0xb2>
 80008f4:	08002ea0 	.word	0x08002ea0
 80008f8:	08002eb0 	.word	0x08002eb0
 80008fc:	40020400 	.word	0x40020400
 8000900:	08002e94 	.word	0x08002e94

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2234      	movs	r2, #52	; 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fe2c 	bl	8002570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <SystemClock_Config+0xd4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <SystemClock_Config+0xd4>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <SystemClock_Config+0xd4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <SystemClock_Config+0xd8>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f86a 	bl	8001a6c <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099e:	f000 f8df 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fd0a 	bl	80013d8 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ca:	f000 f8c9 	bl	8000b60 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	; 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART2_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a18:	f001 fac6 	bl	8001fa8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f89d 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000078 	.word	0x20000078
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a38      	ldr	r2, [pc, #224]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <MX_GPIO_Init+0x11c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	21e0      	movs	r1, #224	; 0xe0
 8000abe:	4825      	ldr	r0, [pc, #148]	; (8000b54 <MX_GPIO_Init+0x120>)
 8000ac0:	f000 fc70 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_GPIO_Init+0x124>)
 8000aca:	f000 fc6b 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2170      	movs	r1, #112	; 0x70
 8000ad2:	4822      	ldr	r0, [pc, #136]	; (8000b5c <MX_GPIO_Init+0x128>)
 8000ad4:	f000 fc66 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ade:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_GPIO_Init+0x124>)
 8000af0:	f000 fac4 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000af4:	23e0      	movs	r3, #224	; 0xe0
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <MX_GPIO_Init+0x120>)
 8000b0c:	f000 fab6 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_GPIO_Init+0x124>)
 8000b28:	f000 faa8 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b2c:	2370      	movs	r3, #112	; 0x70
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_GPIO_Init+0x128>)
 8000b44:	f000 fa9a 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000baa:	2007      	movs	r0, #7
 8000bac:	f000 fa32 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12b      	bne.n	8000c36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c16:	230c      	movs	r3, #12
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c26:	2307      	movs	r3, #7
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_UART_MspInit+0x8c>)
 8000c32:	f000 fa23 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f8c6 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f001 fc56 	bl	8002580 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20020000 	.word	0x20020000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	200000c0 	.word	0x200000c0
 8000d08:	20000210 	.word	0x20000210

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f001 fc15 	bl	800258c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fd6d 	bl	8000840 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d74:	08002f18 	.word	0x08002f18
  ldr r2, =_sbss
 8000d78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d7c:	20000210 	.word	0x20000210

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f931 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fed8 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f93b 	bl	8001062 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 f911 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200000c4 	.word	0x200000c4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000c4 	.word	0x200000c4

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff47 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5c 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e165      	b.n	8001364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8154 	bne.w	800135e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80ae 	beq.w	800135e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_GPIO_Init+0x300>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5c      	ldr	r2, [pc, #368]	; (800137c <HAL_GPIO_Init+0x300>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_GPIO_Init+0x300>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x310>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x20a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x206>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a49      	ldr	r2, [pc, #292]	; (800139c <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x202>
 800127a:	2306      	movs	r3, #6
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800127e:	2307      	movs	r3, #7
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x21c>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_GPIO_Init+0x324>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae96 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0cc      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d90c      	bls.n	8001414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b8      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	494d      	ldr	r1, [pc, #308]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d044      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d119      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	2b03      	cmp	r3, #3
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e067      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f023 0203 	bic.w	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4934      	ldr	r1, [pc, #208]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c8:	f7ff fcc2 	bl	8000e50 <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff fcbe 	bl	8000e50 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e04f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 020c 	and.w	r2, r3, #12
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1eb      	bne.n	80014d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d20c      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e032      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4916      	ldr	r1, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	490e      	ldr	r1, [pc, #56]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155e:	f000 f855 	bl	800160c <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	490a      	ldr	r1, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc22 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00
 8001594:	40023800 	.word	0x40023800
 8001598:	08002ebc 	.word	0x08002ebc
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000

080015bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015c0:	f7ff fff0 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	0a9b      	lsrs	r3, r3, #10
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	4903      	ldr	r1, [pc, #12]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08002ecc 	.word	0x08002ecc

080015e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015e8:	f7ff ffdc 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	0b5b      	lsrs	r3, r3, #13
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	4903      	ldr	r1, [pc, #12]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	08002ecc 	.word	0x08002ecc

0800160c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001610:	b0ae      	sub	sp, #184	; 0xb8
 8001612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001632:	4bcb      	ldr	r3, [pc, #812]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b0c      	cmp	r3, #12
 800163c:	f200 8206 	bhi.w	8001a4c <HAL_RCC_GetSysClockFreq+0x440>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	0800167d 	.word	0x0800167d
 800164c:	08001a4d 	.word	0x08001a4d
 8001650:	08001a4d 	.word	0x08001a4d
 8001654:	08001a4d 	.word	0x08001a4d
 8001658:	08001685 	.word	0x08001685
 800165c:	08001a4d 	.word	0x08001a4d
 8001660:	08001a4d 	.word	0x08001a4d
 8001664:	08001a4d 	.word	0x08001a4d
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001a4d 	.word	0x08001a4d
 8001670:	08001a4d 	.word	0x08001a4d
 8001674:	08001a4d 	.word	0x08001a4d
 8001678:	0800187d 	.word	0x0800187d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800167c:	4bb9      	ldr	r3, [pc, #740]	; (8001964 <HAL_RCC_GetSysClockFreq+0x358>)
 800167e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001682:	e1e7      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001684:	4bb8      	ldr	r3, [pc, #736]	; (8001968 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800168a:	e1e3      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4bb4      	ldr	r3, [pc, #720]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001698:	4bb1      	ldr	r3, [pc, #708]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d071      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4bae      	ldr	r3, [pc, #696]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016ca:	4622      	mov	r2, r4
 80016cc:	462b      	mov	r3, r5
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	0159      	lsls	r1, r3, #5
 80016d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016dc:	0150      	lsls	r0, r2, #5
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4621      	mov	r1, r4
 80016e4:	1a51      	subs	r1, r2, r1
 80016e6:	6439      	str	r1, [r7, #64]	; 0x40
 80016e8:	4629      	mov	r1, r5
 80016ea:	eb63 0301 	sbc.w	r3, r3, r1
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016fc:	4649      	mov	r1, r9
 80016fe:	018b      	lsls	r3, r1, #6
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001706:	4641      	mov	r1, r8
 8001708:	018a      	lsls	r2, r1, #6
 800170a:	4641      	mov	r1, r8
 800170c:	1a51      	subs	r1, r2, r1
 800170e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001710:	4649      	mov	r1, r9
 8001712:	eb63 0301 	sbc.w	r3, r3, r1
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001724:	4649      	mov	r1, r9
 8001726:	00cb      	lsls	r3, r1, #3
 8001728:	4641      	mov	r1, r8
 800172a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800172e:	4641      	mov	r1, r8
 8001730:	00ca      	lsls	r2, r1, #3
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	4603      	mov	r3, r0
 8001738:	4622      	mov	r2, r4
 800173a:	189b      	adds	r3, r3, r2
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
 800173e:	462b      	mov	r3, r5
 8001740:	460a      	mov	r2, r1
 8001742:	eb42 0303 	adc.w	r3, r2, r3
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001754:	4629      	mov	r1, r5
 8001756:	024b      	lsls	r3, r1, #9
 8001758:	4621      	mov	r1, r4
 800175a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800175e:	4621      	mov	r1, r4
 8001760:	024a      	lsls	r2, r1, #9
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800176a:	2200      	movs	r2, #0
 800176c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001770:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001774:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001778:	f7fe fda2 	bl	80002c0 <__aeabi_uldivmod>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4613      	mov	r3, r2
 8001782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001786:	e067      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001794:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800179c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017a2:	2300      	movs	r3, #0
 80017a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	0159      	lsls	r1, r3, #5
 80017b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017bc:	0150      	lsls	r0, r2, #5
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4621      	mov	r1, r4
 80017c4:	1a51      	subs	r1, r2, r1
 80017c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80017c8:	4629      	mov	r1, r5
 80017ca:	eb63 0301 	sbc.w	r3, r3, r1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017dc:	4649      	mov	r1, r9
 80017de:	018b      	lsls	r3, r1, #6
 80017e0:	4641      	mov	r1, r8
 80017e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e6:	4641      	mov	r1, r8
 80017e8:	018a      	lsls	r2, r1, #6
 80017ea:	4641      	mov	r1, r8
 80017ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f0:	4649      	mov	r1, r9
 80017f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001802:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001806:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800180a:	4692      	mov	sl, r2
 800180c:	469b      	mov	fp, r3
 800180e:	4623      	mov	r3, r4
 8001810:	eb1a 0303 	adds.w	r3, sl, r3
 8001814:	623b      	str	r3, [r7, #32]
 8001816:	462b      	mov	r3, r5
 8001818:	eb4b 0303 	adc.w	r3, fp, r3
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800182a:	4629      	mov	r1, r5
 800182c:	028b      	lsls	r3, r1, #10
 800182e:	4621      	mov	r1, r4
 8001830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001834:	4621      	mov	r1, r4
 8001836:	028a      	lsls	r2, r1, #10
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001840:	2200      	movs	r2, #0
 8001842:	673b      	str	r3, [r7, #112]	; 0x70
 8001844:	677a      	str	r2, [r7, #116]	; 0x74
 8001846:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800184a:	f7fe fd39 	bl	80002c0 <__aeabi_uldivmod>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4613      	mov	r3, r2
 8001854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001858:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	3301      	adds	r3, #1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800186a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800186e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800187a:	e0eb      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d06b      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001894:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_RCC_GetSysClockFreq+0x354>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	2200      	movs	r2, #0
 800189c:	66bb      	str	r3, [r7, #104]	; 0x68
 800189e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a6:	663b      	str	r3, [r7, #96]	; 0x60
 80018a8:	2300      	movs	r3, #0
 80018aa:	667b      	str	r3, [r7, #100]	; 0x64
 80018ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018b0:	4622      	mov	r2, r4
 80018b2:	462b      	mov	r3, r5
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0159      	lsls	r1, r3, #5
 80018be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c2:	0150      	lsls	r0, r2, #5
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4621      	mov	r1, r4
 80018ca:	1a51      	subs	r1, r2, r1
 80018cc:	61b9      	str	r1, [r7, #24]
 80018ce:	4629      	mov	r1, r5
 80018d0:	eb63 0301 	sbc.w	r3, r3, r1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018e2:	4659      	mov	r1, fp
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	4651      	mov	r1, sl
 80018e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ec:	4651      	mov	r1, sl
 80018ee:	018a      	lsls	r2, r1, #6
 80018f0:	4651      	mov	r1, sl
 80018f2:	ebb2 0801 	subs.w	r8, r2, r1
 80018f6:	4659      	mov	r1, fp
 80018f8:	eb63 0901 	sbc.w	r9, r3, r1
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001908:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800190c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001910:	4690      	mov	r8, r2
 8001912:	4699      	mov	r9, r3
 8001914:	4623      	mov	r3, r4
 8001916:	eb18 0303 	adds.w	r3, r8, r3
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	462b      	mov	r3, r5
 800191e:	eb49 0303 	adc.w	r3, r9, r3
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001930:	4629      	mov	r1, r5
 8001932:	024b      	lsls	r3, r1, #9
 8001934:	4621      	mov	r1, r4
 8001936:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800193a:	4621      	mov	r1, r4
 800193c:	024a      	lsls	r2, r1, #9
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001946:	2200      	movs	r2, #0
 8001948:	65bb      	str	r3, [r7, #88]	; 0x58
 800194a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800194c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001950:	f7fe fcb6 	bl	80002c0 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800195e:	e065      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x420>
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x458>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	2200      	movs	r2, #0
 8001974:	4618      	mov	r0, r3
 8001976:	4611      	mov	r1, r2
 8001978:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197c:	653b      	str	r3, [r7, #80]	; 0x50
 800197e:	2300      	movs	r3, #0
 8001980:	657b      	str	r3, [r7, #84]	; 0x54
 8001982:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001986:	4642      	mov	r2, r8
 8001988:	464b      	mov	r3, r9
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0159      	lsls	r1, r3, #5
 8001994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001998:	0150      	lsls	r0, r2, #5
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4641      	mov	r1, r8
 80019a0:	1a51      	subs	r1, r2, r1
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	4649      	mov	r1, r9
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019b8:	4659      	mov	r1, fp
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	4651      	mov	r1, sl
 80019be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c2:	4651      	mov	r1, sl
 80019c4:	018a      	lsls	r2, r1, #6
 80019c6:	4651      	mov	r1, sl
 80019c8:	1a54      	subs	r4, r2, r1
 80019ca:	4659      	mov	r1, fp
 80019cc:	eb63 0501 	sbc.w	r5, r3, r1
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	00eb      	lsls	r3, r5, #3
 80019da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019de:	00e2      	lsls	r2, r4, #3
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	4643      	mov	r3, r8
 80019e6:	18e3      	adds	r3, r4, r3
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	464b      	mov	r3, r9
 80019ec:	eb45 0303 	adc.w	r3, r5, r3
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fe:	4629      	mov	r1, r5
 8001a00:	028b      	lsls	r3, r1, #10
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a08:	4621      	mov	r1, r4
 8001a0a:	028a      	lsls	r2, r1, #10
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a14:	2200      	movs	r2, #0
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a1e:	f7fe fc4f 	bl	80002c0 <__aeabi_uldivmod>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4613      	mov	r3, r2
 8001a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0f1b      	lsrs	r3, r3, #28
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a4a:	e003      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	37b8      	adds	r7, #184	; 0xb8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400

08001a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e28d      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8083 	beq.w	8001b92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a8c:	4b94      	ldr	r3, [pc, #592]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d019      	beq.n	8001acc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a98:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa4:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab0:	d00c      	beq.n	8001acc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aba:	2b0c      	cmp	r3, #12
 8001abc:	d112      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abe:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d05b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x124>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d157      	bne.n	8001b90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e25a      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x90>
 8001aee:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xcc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xb4>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xcc>
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f986 	bl	8000e50 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f982 	bl	8000e50 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e21f      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xdc>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f972 	bl	8000e50 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f96e 	bl	8000e50 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e20b      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x104>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06f      	beq.n	8001c7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b9e:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d017      	beq.n	8001bda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001baa:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d105      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x186>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1d3      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x278>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f91b 	bl	8000e50 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f917 	bl	8000e50 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1b4      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4925      	ldr	r1, [pc, #148]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x278>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f8fa 	bl	8000e50 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f8f6 	bl	8000e50 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e193      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f8da 	bl	8000e50 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f8d6 	bl	8000e50 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e173      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x234>
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f8c3 	bl	8000e50 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f8bf 	bl	8000e50 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e15c      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b8a      	ldr	r3, [pc, #552]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a7e      	ldr	r2, [pc, #504]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f87f 	bl	8000e50 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff f87b 	bl	8000e50 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e118      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x4b0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x31e>
 8001d7c:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x358>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x340>
 8001d92:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x358>
 8001dac:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a59      	ldr	r2, [pc, #356]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a56      	ldr	r2, [pc, #344]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f840 	bl	8000e50 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f83c 	bl	8000e50 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0d7      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x368>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f82a 	bl	8000e50 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f826 	bl	8000e50 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0c1      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80ad 	beq.w	8001f98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d060      	beq.n	8001f0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d145      	bne.n	8001ede <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe fffa 	bl	8000e50 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fff6 	bl	8000e50 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e093      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	071b      	lsls	r3, r3, #28
 8001eaa:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7fe ffcb 	bl	8000e50 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe ffc7 	bl	8000e50 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e064      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x452>
 8001edc:	e05c      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x4b4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ffb4 	bl	8000e50 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ffb0 	bl	8000e50 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04d      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x480>
 8001f0a:	e045      	b.n	8001f98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e040      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_OscConfig+0x538>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d030      	beq.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d129      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d122      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d119      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10f      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e042      	b.n	8002040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fdf4 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f82b 	bl	8002048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b0c0      	sub	sp, #256	; 0x100
 800204e:	af00      	add	r7, sp, #0
 8002050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	ea40 0301 	orr.w	r3, r0, r1
 8002070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	431a      	orrs	r2, r3
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020a0:	f021 010c 	bic.w	r1, r1, #12
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020ae:	430b      	orrs	r3, r1
 80020b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	6999      	ldr	r1, [r3, #24]
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	ea40 0301 	orr.w	r3, r0, r1
 80020ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <UART_SetConfig+0x2cc>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	d005      	beq.n	80020e8 <UART_SetConfig+0xa0>
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <UART_SetConfig+0x2d0>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d104      	bne.n	80020f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020e8:	f7ff fa7c 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 80020ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020f0:	e003      	b.n	80020fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020f2:	f7ff fa63 	bl	80015bc <HAL_RCC_GetPCLK1Freq>
 80020f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002104:	f040 810c 	bne.w	8002320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800210c:	2200      	movs	r2, #0
 800210e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800211a:	4622      	mov	r2, r4
 800211c:	462b      	mov	r3, r5
 800211e:	1891      	adds	r1, r2, r2
 8002120:	65b9      	str	r1, [r7, #88]	; 0x58
 8002122:	415b      	adcs	r3, r3
 8002124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800212a:	4621      	mov	r1, r4
 800212c:	eb12 0801 	adds.w	r8, r2, r1
 8002130:	4629      	mov	r1, r5
 8002132:	eb43 0901 	adc.w	r9, r3, r1
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800214a:	4690      	mov	r8, r2
 800214c:	4699      	mov	r9, r3
 800214e:	4623      	mov	r3, r4
 8002150:	eb18 0303 	adds.w	r3, r8, r3
 8002154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002158:	462b      	mov	r3, r5
 800215a:	eb49 0303 	adc.w	r3, r9, r3
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800216e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002176:	460b      	mov	r3, r1
 8002178:	18db      	adds	r3, r3, r3
 800217a:	653b      	str	r3, [r7, #80]	; 0x50
 800217c:	4613      	mov	r3, r2
 800217e:	eb42 0303 	adc.w	r3, r2, r3
 8002182:	657b      	str	r3, [r7, #84]	; 0x54
 8002184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800218c:	f7fe f898 	bl	80002c0 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <UART_SetConfig+0x2d4>)
 8002196:	fba3 2302 	umull	r2, r3, r3, r2
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	011c      	lsls	r4, r3, #4
 800219e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021b0:	4642      	mov	r2, r8
 80021b2:	464b      	mov	r3, r9
 80021b4:	1891      	adds	r1, r2, r2
 80021b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80021b8:	415b      	adcs	r3, r3
 80021ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021c0:	4641      	mov	r1, r8
 80021c2:	eb12 0a01 	adds.w	sl, r2, r1
 80021c6:	4649      	mov	r1, r9
 80021c8:	eb43 0b01 	adc.w	fp, r3, r1
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021e0:	4692      	mov	sl, r2
 80021e2:	469b      	mov	fp, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	eb1a 0303 	adds.w	r3, sl, r3
 80021ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ee:	464b      	mov	r3, r9
 80021f0:	eb4b 0303 	adc.w	r3, fp, r3
 80021f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800220c:	460b      	mov	r3, r1
 800220e:	18db      	adds	r3, r3, r3
 8002210:	643b      	str	r3, [r7, #64]	; 0x40
 8002212:	4613      	mov	r3, r2
 8002214:	eb42 0303 	adc.w	r3, r2, r3
 8002218:	647b      	str	r3, [r7, #68]	; 0x44
 800221a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800221e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002222:	f7fe f84d 	bl	80002c0 <__aeabi_uldivmod>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4611      	mov	r1, r2
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <UART_SetConfig+0x2d4>)
 800222e:	fba3 2301 	umull	r2, r3, r3, r1
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2264      	movs	r2, #100	; 0x64
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	1acb      	subs	r3, r1, r3
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <UART_SetConfig+0x2d4>)
 8002244:	fba3 2302 	umull	r2, r3, r3, r2
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002250:	441c      	add	r4, r3
 8002252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002256:	2200      	movs	r2, #0
 8002258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800225c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002264:	4642      	mov	r2, r8
 8002266:	464b      	mov	r3, r9
 8002268:	1891      	adds	r1, r2, r2
 800226a:	63b9      	str	r1, [r7, #56]	; 0x38
 800226c:	415b      	adcs	r3, r3
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002274:	4641      	mov	r1, r8
 8002276:	1851      	adds	r1, r2, r1
 8002278:	6339      	str	r1, [r7, #48]	; 0x30
 800227a:	4649      	mov	r1, r9
 800227c:	414b      	adcs	r3, r1
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800228c:	4659      	mov	r1, fp
 800228e:	00cb      	lsls	r3, r1, #3
 8002290:	4651      	mov	r1, sl
 8002292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002296:	4651      	mov	r1, sl
 8002298:	00ca      	lsls	r2, r1, #3
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	4642      	mov	r2, r8
 80022a2:	189b      	adds	r3, r3, r2
 80022a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022a8:	464b      	mov	r3, r9
 80022aa:	460a      	mov	r2, r1
 80022ac:	eb42 0303 	adc.w	r3, r2, r3
 80022b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022c8:	460b      	mov	r3, r1
 80022ca:	18db      	adds	r3, r3, r3
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	4613      	mov	r3, r2
 80022d0:	eb42 0303 	adc.w	r3, r2, r3
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022de:	f7fd ffef 	bl	80002c0 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <UART_SetConfig+0x2d4>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <UART_SetConfig+0x2d4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4422      	add	r2, r4
 800230e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002310:	e106      	b.n	8002520 <UART_SetConfig+0x4d8>
 8002312:	bf00      	nop
 8002314:	40011000 	.word	0x40011000
 8002318:	40011400 	.word	0x40011400
 800231c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002324:	2200      	movs	r2, #0
 8002326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800232a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800232e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002332:	4642      	mov	r2, r8
 8002334:	464b      	mov	r3, r9
 8002336:	1891      	adds	r1, r2, r2
 8002338:	6239      	str	r1, [r7, #32]
 800233a:	415b      	adcs	r3, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002342:	4641      	mov	r1, r8
 8002344:	1854      	adds	r4, r2, r1
 8002346:	4649      	mov	r1, r9
 8002348:	eb43 0501 	adc.w	r5, r3, r1
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	00eb      	lsls	r3, r5, #3
 8002356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235a:	00e2      	lsls	r2, r4, #3
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	4643      	mov	r3, r8
 8002362:	18e3      	adds	r3, r4, r3
 8002364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002368:	464b      	mov	r3, r9
 800236a:	eb45 0303 	adc.w	r3, r5, r3
 800236e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800237e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800238e:	4629      	mov	r1, r5
 8002390:	008b      	lsls	r3, r1, #2
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002398:	4621      	mov	r1, r4
 800239a:	008a      	lsls	r2, r1, #2
 800239c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023a0:	f7fd ff8e 	bl	80002c0 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4b60      	ldr	r3, [pc, #384]	; (800252c <UART_SetConfig+0x4e4>)
 80023aa:	fba3 2302 	umull	r2, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	011c      	lsls	r4, r3, #4
 80023b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	1891      	adds	r1, r2, r2
 80023ca:	61b9      	str	r1, [r7, #24]
 80023cc:	415b      	adcs	r3, r3
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d4:	4641      	mov	r1, r8
 80023d6:	1851      	adds	r1, r2, r1
 80023d8:	6139      	str	r1, [r7, #16]
 80023da:	4649      	mov	r1, r9
 80023dc:	414b      	adcs	r3, r1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023ec:	4659      	mov	r1, fp
 80023ee:	00cb      	lsls	r3, r1, #3
 80023f0:	4651      	mov	r1, sl
 80023f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f6:	4651      	mov	r1, sl
 80023f8:	00ca      	lsls	r2, r1, #3
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	4642      	mov	r2, r8
 8002402:	189b      	adds	r3, r3, r2
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002408:	464b      	mov	r3, r9
 800240a:	460a      	mov	r2, r1
 800240c:	eb42 0303 	adc.w	r3, r2, r3
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	67bb      	str	r3, [r7, #120]	; 0x78
 800241e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800242c:	4649      	mov	r1, r9
 800242e:	008b      	lsls	r3, r1, #2
 8002430:	4641      	mov	r1, r8
 8002432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002436:	4641      	mov	r1, r8
 8002438:	008a      	lsls	r2, r1, #2
 800243a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800243e:	f7fd ff3f 	bl	80002c0 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4611      	mov	r1, r2
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <UART_SetConfig+0x4e4>)
 800244a:	fba3 2301 	umull	r2, r3, r3, r1
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2264      	movs	r2, #100	; 0x64
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	3332      	adds	r3, #50	; 0x32
 800245c:	4a33      	ldr	r2, [pc, #204]	; (800252c <UART_SetConfig+0x4e4>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002468:	441c      	add	r4, r3
 800246a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800246e:	2200      	movs	r2, #0
 8002470:	673b      	str	r3, [r7, #112]	; 0x70
 8002472:	677a      	str	r2, [r7, #116]	; 0x74
 8002474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	1891      	adds	r1, r2, r2
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	415b      	adcs	r3, r3
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002488:	4641      	mov	r1, r8
 800248a:	1851      	adds	r1, r2, r1
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	4649      	mov	r1, r9
 8002490:	414b      	adcs	r3, r1
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024a0:	4659      	mov	r1, fp
 80024a2:	00cb      	lsls	r3, r1, #3
 80024a4:	4651      	mov	r1, sl
 80024a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024aa:	4651      	mov	r1, sl
 80024ac:	00ca      	lsls	r2, r1, #3
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	4642      	mov	r2, r8
 80024b6:	189b      	adds	r3, r3, r2
 80024b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ba:	464b      	mov	r3, r9
 80024bc:	460a      	mov	r2, r1
 80024be:	eb42 0303 	adc.w	r3, r2, r3
 80024c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	663b      	str	r3, [r7, #96]	; 0x60
 80024ce:	667a      	str	r2, [r7, #100]	; 0x64
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024dc:	4649      	mov	r1, r9
 80024de:	008b      	lsls	r3, r1, #2
 80024e0:	4641      	mov	r1, r8
 80024e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e6:	4641      	mov	r1, r8
 80024e8:	008a      	lsls	r2, r1, #2
 80024ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ee:	f7fd fee7 	bl	80002c0 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <UART_SetConfig+0x4e4>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <UART_SetConfig+0x4e4>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4422      	add	r2, r4
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002526:	46bd      	mov	sp, r7
 8002528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252c:	51eb851f 	.word	0x51eb851f

08002530 <siprintf>:
 8002530:	b40e      	push	{r1, r2, r3}
 8002532:	b500      	push	{lr}
 8002534:	b09c      	sub	sp, #112	; 0x70
 8002536:	ab1d      	add	r3, sp, #116	; 0x74
 8002538:	9002      	str	r0, [sp, #8]
 800253a:	9006      	str	r0, [sp, #24]
 800253c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <siprintf+0x38>)
 8002542:	9107      	str	r1, [sp, #28]
 8002544:	9104      	str	r1, [sp, #16]
 8002546:	4909      	ldr	r1, [pc, #36]	; (800256c <siprintf+0x3c>)
 8002548:	f853 2b04 	ldr.w	r2, [r3], #4
 800254c:	9105      	str	r1, [sp, #20]
 800254e:	6800      	ldr	r0, [r0, #0]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	a902      	add	r1, sp, #8
 8002554:	f000 f89a 	bl	800268c <_svfiprintf_r>
 8002558:	9b02      	ldr	r3, [sp, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	b01c      	add	sp, #112	; 0x70
 8002560:	f85d eb04 	ldr.w	lr, [sp], #4
 8002564:	b003      	add	sp, #12
 8002566:	4770      	bx	lr
 8002568:	20000058 	.word	0x20000058
 800256c:	ffff0208 	.word	0xffff0208

08002570 <memset>:
 8002570:	4402      	add	r2, r0
 8002572:	4603      	mov	r3, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	f803 1b01 	strb.w	r1, [r3], #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <__errno>:
 8002580:	4b01      	ldr	r3, [pc, #4]	; (8002588 <__errno+0x8>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000058 	.word	0x20000058

0800258c <__libc_init_array>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	4d0d      	ldr	r5, [pc, #52]	; (80025c4 <__libc_init_array+0x38>)
 8002590:	4c0d      	ldr	r4, [pc, #52]	; (80025c8 <__libc_init_array+0x3c>)
 8002592:	1b64      	subs	r4, r4, r5
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	2600      	movs	r6, #0
 8002598:	42a6      	cmp	r6, r4
 800259a:	d109      	bne.n	80025b0 <__libc_init_array+0x24>
 800259c:	4d0b      	ldr	r5, [pc, #44]	; (80025cc <__libc_init_array+0x40>)
 800259e:	4c0c      	ldr	r4, [pc, #48]	; (80025d0 <__libc_init_array+0x44>)
 80025a0:	f000 fc6a 	bl	8002e78 <_init>
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	2600      	movs	r6, #0
 80025aa:	42a6      	cmp	r6, r4
 80025ac:	d105      	bne.n	80025ba <__libc_init_array+0x2e>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b4:	4798      	blx	r3
 80025b6:	3601      	adds	r6, #1
 80025b8:	e7ee      	b.n	8002598 <__libc_init_array+0xc>
 80025ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80025be:	4798      	blx	r3
 80025c0:	3601      	adds	r6, #1
 80025c2:	e7f2      	b.n	80025aa <__libc_init_array+0x1e>
 80025c4:	08002f10 	.word	0x08002f10
 80025c8:	08002f10 	.word	0x08002f10
 80025cc:	08002f10 	.word	0x08002f10
 80025d0:	08002f14 	.word	0x08002f14

080025d4 <__retarget_lock_acquire_recursive>:
 80025d4:	4770      	bx	lr

080025d6 <__retarget_lock_release_recursive>:
 80025d6:	4770      	bx	lr

080025d8 <__ssputs_r>:
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	688e      	ldr	r6, [r1, #8]
 80025de:	461f      	mov	r7, r3
 80025e0:	42be      	cmp	r6, r7
 80025e2:	680b      	ldr	r3, [r1, #0]
 80025e4:	4682      	mov	sl, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	4690      	mov	r8, r2
 80025ea:	d82c      	bhi.n	8002646 <__ssputs_r+0x6e>
 80025ec:	898a      	ldrh	r2, [r1, #12]
 80025ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025f2:	d026      	beq.n	8002642 <__ssputs_r+0x6a>
 80025f4:	6965      	ldr	r5, [r4, #20]
 80025f6:	6909      	ldr	r1, [r1, #16]
 80025f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025fc:	eba3 0901 	sub.w	r9, r3, r1
 8002600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002604:	1c7b      	adds	r3, r7, #1
 8002606:	444b      	add	r3, r9
 8002608:	106d      	asrs	r5, r5, #1
 800260a:	429d      	cmp	r5, r3
 800260c:	bf38      	it	cc
 800260e:	461d      	movcc	r5, r3
 8002610:	0553      	lsls	r3, r2, #21
 8002612:	d527      	bpl.n	8002664 <__ssputs_r+0x8c>
 8002614:	4629      	mov	r1, r5
 8002616:	f000 f957 	bl	80028c8 <_malloc_r>
 800261a:	4606      	mov	r6, r0
 800261c:	b360      	cbz	r0, 8002678 <__ssputs_r+0xa0>
 800261e:	6921      	ldr	r1, [r4, #16]
 8002620:	464a      	mov	r2, r9
 8002622:	f000 fbc7 	bl	8002db4 <memcpy>
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800262c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002630:	81a3      	strh	r3, [r4, #12]
 8002632:	6126      	str	r6, [r4, #16]
 8002634:	6165      	str	r5, [r4, #20]
 8002636:	444e      	add	r6, r9
 8002638:	eba5 0509 	sub.w	r5, r5, r9
 800263c:	6026      	str	r6, [r4, #0]
 800263e:	60a5      	str	r5, [r4, #8]
 8002640:	463e      	mov	r6, r7
 8002642:	42be      	cmp	r6, r7
 8002644:	d900      	bls.n	8002648 <__ssputs_r+0x70>
 8002646:	463e      	mov	r6, r7
 8002648:	6820      	ldr	r0, [r4, #0]
 800264a:	4632      	mov	r2, r6
 800264c:	4641      	mov	r1, r8
 800264e:	f000 fb86 	bl	8002d5e <memmove>
 8002652:	68a3      	ldr	r3, [r4, #8]
 8002654:	1b9b      	subs	r3, r3, r6
 8002656:	60a3      	str	r3, [r4, #8]
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	4433      	add	r3, r6
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	2000      	movs	r0, #0
 8002660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002664:	462a      	mov	r2, r5
 8002666:	f000 fb4b 	bl	8002d00 <_realloc_r>
 800266a:	4606      	mov	r6, r0
 800266c:	2800      	cmp	r0, #0
 800266e:	d1e0      	bne.n	8002632 <__ssputs_r+0x5a>
 8002670:	6921      	ldr	r1, [r4, #16]
 8002672:	4650      	mov	r0, sl
 8002674:	f000 fbac 	bl	8002dd0 <_free_r>
 8002678:	230c      	movs	r3, #12
 800267a:	f8ca 3000 	str.w	r3, [sl]
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002684:	81a3      	strh	r3, [r4, #12]
 8002686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800268a:	e7e9      	b.n	8002660 <__ssputs_r+0x88>

0800268c <_svfiprintf_r>:
 800268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002690:	4698      	mov	r8, r3
 8002692:	898b      	ldrh	r3, [r1, #12]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	b09d      	sub	sp, #116	; 0x74
 8002698:	4607      	mov	r7, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4614      	mov	r4, r2
 800269e:	d50e      	bpl.n	80026be <_svfiprintf_r+0x32>
 80026a0:	690b      	ldr	r3, [r1, #16]
 80026a2:	b963      	cbnz	r3, 80026be <_svfiprintf_r+0x32>
 80026a4:	2140      	movs	r1, #64	; 0x40
 80026a6:	f000 f90f 	bl	80028c8 <_malloc_r>
 80026aa:	6028      	str	r0, [r5, #0]
 80026ac:	6128      	str	r0, [r5, #16]
 80026ae:	b920      	cbnz	r0, 80026ba <_svfiprintf_r+0x2e>
 80026b0:	230c      	movs	r3, #12
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b8:	e0d0      	b.n	800285c <_svfiprintf_r+0x1d0>
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	616b      	str	r3, [r5, #20]
 80026be:	2300      	movs	r3, #0
 80026c0:	9309      	str	r3, [sp, #36]	; 0x24
 80026c2:	2320      	movs	r3, #32
 80026c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80026cc:	2330      	movs	r3, #48	; 0x30
 80026ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002874 <_svfiprintf_r+0x1e8>
 80026d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026d6:	f04f 0901 	mov.w	r9, #1
 80026da:	4623      	mov	r3, r4
 80026dc:	469a      	mov	sl, r3
 80026de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026e2:	b10a      	cbz	r2, 80026e8 <_svfiprintf_r+0x5c>
 80026e4:	2a25      	cmp	r2, #37	; 0x25
 80026e6:	d1f9      	bne.n	80026dc <_svfiprintf_r+0x50>
 80026e8:	ebba 0b04 	subs.w	fp, sl, r4
 80026ec:	d00b      	beq.n	8002706 <_svfiprintf_r+0x7a>
 80026ee:	465b      	mov	r3, fp
 80026f0:	4622      	mov	r2, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	4638      	mov	r0, r7
 80026f6:	f7ff ff6f 	bl	80025d8 <__ssputs_r>
 80026fa:	3001      	adds	r0, #1
 80026fc:	f000 80a9 	beq.w	8002852 <_svfiprintf_r+0x1c6>
 8002700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002702:	445a      	add	r2, fp
 8002704:	9209      	str	r2, [sp, #36]	; 0x24
 8002706:	f89a 3000 	ldrb.w	r3, [sl]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80a1 	beq.w	8002852 <_svfiprintf_r+0x1c6>
 8002710:	2300      	movs	r3, #0
 8002712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800271a:	f10a 0a01 	add.w	sl, sl, #1
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	9307      	str	r3, [sp, #28]
 8002722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002726:	931a      	str	r3, [sp, #104]	; 0x68
 8002728:	4654      	mov	r4, sl
 800272a:	2205      	movs	r2, #5
 800272c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002730:	4850      	ldr	r0, [pc, #320]	; (8002874 <_svfiprintf_r+0x1e8>)
 8002732:	f7fd fd75 	bl	8000220 <memchr>
 8002736:	9a04      	ldr	r2, [sp, #16]
 8002738:	b9d8      	cbnz	r0, 8002772 <_svfiprintf_r+0xe6>
 800273a:	06d0      	lsls	r0, r2, #27
 800273c:	bf44      	itt	mi
 800273e:	2320      	movmi	r3, #32
 8002740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002744:	0711      	lsls	r1, r2, #28
 8002746:	bf44      	itt	mi
 8002748:	232b      	movmi	r3, #43	; 0x2b
 800274a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800274e:	f89a 3000 	ldrb.w	r3, [sl]
 8002752:	2b2a      	cmp	r3, #42	; 0x2a
 8002754:	d015      	beq.n	8002782 <_svfiprintf_r+0xf6>
 8002756:	9a07      	ldr	r2, [sp, #28]
 8002758:	4654      	mov	r4, sl
 800275a:	2000      	movs	r0, #0
 800275c:	f04f 0c0a 	mov.w	ip, #10
 8002760:	4621      	mov	r1, r4
 8002762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002766:	3b30      	subs	r3, #48	; 0x30
 8002768:	2b09      	cmp	r3, #9
 800276a:	d94d      	bls.n	8002808 <_svfiprintf_r+0x17c>
 800276c:	b1b0      	cbz	r0, 800279c <_svfiprintf_r+0x110>
 800276e:	9207      	str	r2, [sp, #28]
 8002770:	e014      	b.n	800279c <_svfiprintf_r+0x110>
 8002772:	eba0 0308 	sub.w	r3, r0, r8
 8002776:	fa09 f303 	lsl.w	r3, r9, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	9304      	str	r3, [sp, #16]
 800277e:	46a2      	mov	sl, r4
 8002780:	e7d2      	b.n	8002728 <_svfiprintf_r+0x9c>
 8002782:	9b03      	ldr	r3, [sp, #12]
 8002784:	1d19      	adds	r1, r3, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	9103      	str	r1, [sp, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	bfbb      	ittet	lt
 800278e:	425b      	neglt	r3, r3
 8002790:	f042 0202 	orrlt.w	r2, r2, #2
 8002794:	9307      	strge	r3, [sp, #28]
 8002796:	9307      	strlt	r3, [sp, #28]
 8002798:	bfb8      	it	lt
 800279a:	9204      	strlt	r2, [sp, #16]
 800279c:	7823      	ldrb	r3, [r4, #0]
 800279e:	2b2e      	cmp	r3, #46	; 0x2e
 80027a0:	d10c      	bne.n	80027bc <_svfiprintf_r+0x130>
 80027a2:	7863      	ldrb	r3, [r4, #1]
 80027a4:	2b2a      	cmp	r3, #42	; 0x2a
 80027a6:	d134      	bne.n	8002812 <_svfiprintf_r+0x186>
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	1d1a      	adds	r2, r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bfb8      	it	lt
 80027b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027b8:	3402      	adds	r4, #2
 80027ba:	9305      	str	r3, [sp, #20]
 80027bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002884 <_svfiprintf_r+0x1f8>
 80027c0:	7821      	ldrb	r1, [r4, #0]
 80027c2:	2203      	movs	r2, #3
 80027c4:	4650      	mov	r0, sl
 80027c6:	f7fd fd2b 	bl	8000220 <memchr>
 80027ca:	b138      	cbz	r0, 80027dc <_svfiprintf_r+0x150>
 80027cc:	9b04      	ldr	r3, [sp, #16]
 80027ce:	eba0 000a 	sub.w	r0, r0, sl
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	4082      	lsls	r2, r0
 80027d6:	4313      	orrs	r3, r2
 80027d8:	3401      	adds	r4, #1
 80027da:	9304      	str	r3, [sp, #16]
 80027dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e0:	4825      	ldr	r0, [pc, #148]	; (8002878 <_svfiprintf_r+0x1ec>)
 80027e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e6:	2206      	movs	r2, #6
 80027e8:	f7fd fd1a 	bl	8000220 <memchr>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d038      	beq.n	8002862 <_svfiprintf_r+0x1d6>
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <_svfiprintf_r+0x1f0>)
 80027f2:	bb1b      	cbnz	r3, 800283c <_svfiprintf_r+0x1b0>
 80027f4:	9b03      	ldr	r3, [sp, #12]
 80027f6:	3307      	adds	r3, #7
 80027f8:	f023 0307 	bic.w	r3, r3, #7
 80027fc:	3308      	adds	r3, #8
 80027fe:	9303      	str	r3, [sp, #12]
 8002800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002802:	4433      	add	r3, r6
 8002804:	9309      	str	r3, [sp, #36]	; 0x24
 8002806:	e768      	b.n	80026da <_svfiprintf_r+0x4e>
 8002808:	fb0c 3202 	mla	r2, ip, r2, r3
 800280c:	460c      	mov	r4, r1
 800280e:	2001      	movs	r0, #1
 8002810:	e7a6      	b.n	8002760 <_svfiprintf_r+0xd4>
 8002812:	2300      	movs	r3, #0
 8002814:	3401      	adds	r4, #1
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 0c0a 	mov.w	ip, #10
 800281e:	4620      	mov	r0, r4
 8002820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002824:	3a30      	subs	r2, #48	; 0x30
 8002826:	2a09      	cmp	r2, #9
 8002828:	d903      	bls.n	8002832 <_svfiprintf_r+0x1a6>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0c6      	beq.n	80027bc <_svfiprintf_r+0x130>
 800282e:	9105      	str	r1, [sp, #20]
 8002830:	e7c4      	b.n	80027bc <_svfiprintf_r+0x130>
 8002832:	fb0c 2101 	mla	r1, ip, r1, r2
 8002836:	4604      	mov	r4, r0
 8002838:	2301      	movs	r3, #1
 800283a:	e7f0      	b.n	800281e <_svfiprintf_r+0x192>
 800283c:	ab03      	add	r3, sp, #12
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	462a      	mov	r2, r5
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <_svfiprintf_r+0x1f4>)
 8002844:	a904      	add	r1, sp, #16
 8002846:	4638      	mov	r0, r7
 8002848:	f3af 8000 	nop.w
 800284c:	1c42      	adds	r2, r0, #1
 800284e:	4606      	mov	r6, r0
 8002850:	d1d6      	bne.n	8002800 <_svfiprintf_r+0x174>
 8002852:	89ab      	ldrh	r3, [r5, #12]
 8002854:	065b      	lsls	r3, r3, #25
 8002856:	f53f af2d 	bmi.w	80026b4 <_svfiprintf_r+0x28>
 800285a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800285c:	b01d      	add	sp, #116	; 0x74
 800285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002862:	ab03      	add	r3, sp, #12
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	462a      	mov	r2, r5
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <_svfiprintf_r+0x1f4>)
 800286a:	a904      	add	r1, sp, #16
 800286c:	4638      	mov	r0, r7
 800286e:	f000 f919 	bl	8002aa4 <_printf_i>
 8002872:	e7eb      	b.n	800284c <_svfiprintf_r+0x1c0>
 8002874:	08002ed4 	.word	0x08002ed4
 8002878:	08002ede 	.word	0x08002ede
 800287c:	00000000 	.word	0x00000000
 8002880:	080025d9 	.word	0x080025d9
 8002884:	08002eda 	.word	0x08002eda

08002888 <sbrk_aligned>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	4e0e      	ldr	r6, [pc, #56]	; (80028c4 <sbrk_aligned+0x3c>)
 800288c:	460c      	mov	r4, r1
 800288e:	6831      	ldr	r1, [r6, #0]
 8002890:	4605      	mov	r5, r0
 8002892:	b911      	cbnz	r1, 800289a <sbrk_aligned+0x12>
 8002894:	f000 fa7e 	bl	8002d94 <_sbrk_r>
 8002898:	6030      	str	r0, [r6, #0]
 800289a:	4621      	mov	r1, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f000 fa79 	bl	8002d94 <_sbrk_r>
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	d00a      	beq.n	80028bc <sbrk_aligned+0x34>
 80028a6:	1cc4      	adds	r4, r0, #3
 80028a8:	f024 0403 	bic.w	r4, r4, #3
 80028ac:	42a0      	cmp	r0, r4
 80028ae:	d007      	beq.n	80028c0 <sbrk_aligned+0x38>
 80028b0:	1a21      	subs	r1, r4, r0
 80028b2:	4628      	mov	r0, r5
 80028b4:	f000 fa6e 	bl	8002d94 <_sbrk_r>
 80028b8:	3001      	adds	r0, #1
 80028ba:	d101      	bne.n	80028c0 <sbrk_aligned+0x38>
 80028bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	20000208 	.word	0x20000208

080028c8 <_malloc_r>:
 80028c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028cc:	1ccd      	adds	r5, r1, #3
 80028ce:	f025 0503 	bic.w	r5, r5, #3
 80028d2:	3508      	adds	r5, #8
 80028d4:	2d0c      	cmp	r5, #12
 80028d6:	bf38      	it	cc
 80028d8:	250c      	movcc	r5, #12
 80028da:	2d00      	cmp	r5, #0
 80028dc:	4607      	mov	r7, r0
 80028de:	db01      	blt.n	80028e4 <_malloc_r+0x1c>
 80028e0:	42a9      	cmp	r1, r5
 80028e2:	d905      	bls.n	80028f0 <_malloc_r+0x28>
 80028e4:	230c      	movs	r3, #12
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	2600      	movs	r6, #0
 80028ea:	4630      	mov	r0, r6
 80028ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029c4 <_malloc_r+0xfc>
 80028f4:	f000 f9f8 	bl	8002ce8 <__malloc_lock>
 80028f8:	f8d8 3000 	ldr.w	r3, [r8]
 80028fc:	461c      	mov	r4, r3
 80028fe:	bb5c      	cbnz	r4, 8002958 <_malloc_r+0x90>
 8002900:	4629      	mov	r1, r5
 8002902:	4638      	mov	r0, r7
 8002904:	f7ff ffc0 	bl	8002888 <sbrk_aligned>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	4604      	mov	r4, r0
 800290c:	d155      	bne.n	80029ba <_malloc_r+0xf2>
 800290e:	f8d8 4000 	ldr.w	r4, [r8]
 8002912:	4626      	mov	r6, r4
 8002914:	2e00      	cmp	r6, #0
 8002916:	d145      	bne.n	80029a4 <_malloc_r+0xdc>
 8002918:	2c00      	cmp	r4, #0
 800291a:	d048      	beq.n	80029ae <_malloc_r+0xe6>
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	4631      	mov	r1, r6
 8002920:	4638      	mov	r0, r7
 8002922:	eb04 0903 	add.w	r9, r4, r3
 8002926:	f000 fa35 	bl	8002d94 <_sbrk_r>
 800292a:	4581      	cmp	r9, r0
 800292c:	d13f      	bne.n	80029ae <_malloc_r+0xe6>
 800292e:	6821      	ldr	r1, [r4, #0]
 8002930:	1a6d      	subs	r5, r5, r1
 8002932:	4629      	mov	r1, r5
 8002934:	4638      	mov	r0, r7
 8002936:	f7ff ffa7 	bl	8002888 <sbrk_aligned>
 800293a:	3001      	adds	r0, #1
 800293c:	d037      	beq.n	80029ae <_malloc_r+0xe6>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	442b      	add	r3, r5
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	f8d8 3000 	ldr.w	r3, [r8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d038      	beq.n	80029be <_malloc_r+0xf6>
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	42a2      	cmp	r2, r4
 8002950:	d12b      	bne.n	80029aa <_malloc_r+0xe2>
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	e00f      	b.n	8002978 <_malloc_r+0xb0>
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	1b52      	subs	r2, r2, r5
 800295c:	d41f      	bmi.n	800299e <_malloc_r+0xd6>
 800295e:	2a0b      	cmp	r2, #11
 8002960:	d917      	bls.n	8002992 <_malloc_r+0xca>
 8002962:	1961      	adds	r1, r4, r5
 8002964:	42a3      	cmp	r3, r4
 8002966:	6025      	str	r5, [r4, #0]
 8002968:	bf18      	it	ne
 800296a:	6059      	strne	r1, [r3, #4]
 800296c:	6863      	ldr	r3, [r4, #4]
 800296e:	bf08      	it	eq
 8002970:	f8c8 1000 	streq.w	r1, [r8]
 8002974:	5162      	str	r2, [r4, r5]
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	4638      	mov	r0, r7
 800297a:	f104 060b 	add.w	r6, r4, #11
 800297e:	f000 f9b9 	bl	8002cf4 <__malloc_unlock>
 8002982:	f026 0607 	bic.w	r6, r6, #7
 8002986:	1d23      	adds	r3, r4, #4
 8002988:	1af2      	subs	r2, r6, r3
 800298a:	d0ae      	beq.n	80028ea <_malloc_r+0x22>
 800298c:	1b9b      	subs	r3, r3, r6
 800298e:	50a3      	str	r3, [r4, r2]
 8002990:	e7ab      	b.n	80028ea <_malloc_r+0x22>
 8002992:	42a3      	cmp	r3, r4
 8002994:	6862      	ldr	r2, [r4, #4]
 8002996:	d1dd      	bne.n	8002954 <_malloc_r+0x8c>
 8002998:	f8c8 2000 	str.w	r2, [r8]
 800299c:	e7ec      	b.n	8002978 <_malloc_r+0xb0>
 800299e:	4623      	mov	r3, r4
 80029a0:	6864      	ldr	r4, [r4, #4]
 80029a2:	e7ac      	b.n	80028fe <_malloc_r+0x36>
 80029a4:	4634      	mov	r4, r6
 80029a6:	6876      	ldr	r6, [r6, #4]
 80029a8:	e7b4      	b.n	8002914 <_malloc_r+0x4c>
 80029aa:	4613      	mov	r3, r2
 80029ac:	e7cc      	b.n	8002948 <_malloc_r+0x80>
 80029ae:	230c      	movs	r3, #12
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4638      	mov	r0, r7
 80029b4:	f000 f99e 	bl	8002cf4 <__malloc_unlock>
 80029b8:	e797      	b.n	80028ea <_malloc_r+0x22>
 80029ba:	6025      	str	r5, [r4, #0]
 80029bc:	e7dc      	b.n	8002978 <_malloc_r+0xb0>
 80029be:	605b      	str	r3, [r3, #4]
 80029c0:	deff      	udf	#255	; 0xff
 80029c2:	bf00      	nop
 80029c4:	20000204 	.word	0x20000204

080029c8 <_printf_common>:
 80029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	4616      	mov	r6, r2
 80029ce:	4699      	mov	r9, r3
 80029d0:	688a      	ldr	r2, [r1, #8]
 80029d2:	690b      	ldr	r3, [r1, #16]
 80029d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029d8:	4293      	cmp	r3, r2
 80029da:	bfb8      	it	lt
 80029dc:	4613      	movlt	r3, r2
 80029de:	6033      	str	r3, [r6, #0]
 80029e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029e4:	4607      	mov	r7, r0
 80029e6:	460c      	mov	r4, r1
 80029e8:	b10a      	cbz	r2, 80029ee <_printf_common+0x26>
 80029ea:	3301      	adds	r3, #1
 80029ec:	6033      	str	r3, [r6, #0]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	0699      	lsls	r1, r3, #26
 80029f2:	bf42      	ittt	mi
 80029f4:	6833      	ldrmi	r3, [r6, #0]
 80029f6:	3302      	addmi	r3, #2
 80029f8:	6033      	strmi	r3, [r6, #0]
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	f015 0506 	ands.w	r5, r5, #6
 8002a00:	d106      	bne.n	8002a10 <_printf_common+0x48>
 8002a02:	f104 0a19 	add.w	sl, r4, #25
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	6832      	ldr	r2, [r6, #0]
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	42ab      	cmp	r3, r5
 8002a0e:	dc26      	bgt.n	8002a5e <_printf_common+0x96>
 8002a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a14:	1e13      	subs	r3, r2, #0
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	bf18      	it	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	0692      	lsls	r2, r2, #26
 8002a1e:	d42b      	bmi.n	8002a78 <_printf_common+0xb0>
 8002a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a24:	4649      	mov	r1, r9
 8002a26:	4638      	mov	r0, r7
 8002a28:	47c0      	blx	r8
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d01e      	beq.n	8002a6c <_printf_common+0xa4>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	6922      	ldr	r2, [r4, #16]
 8002a32:	f003 0306 	and.w	r3, r3, #6
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf02      	ittt	eq
 8002a3a:	68e5      	ldreq	r5, [r4, #12]
 8002a3c:	6833      	ldreq	r3, [r6, #0]
 8002a3e:	1aed      	subeq	r5, r5, r3
 8002a40:	68a3      	ldr	r3, [r4, #8]
 8002a42:	bf0c      	ite	eq
 8002a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a48:	2500      	movne	r5, #0
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bfc4      	itt	gt
 8002a4e:	1a9b      	subgt	r3, r3, r2
 8002a50:	18ed      	addgt	r5, r5, r3
 8002a52:	2600      	movs	r6, #0
 8002a54:	341a      	adds	r4, #26
 8002a56:	42b5      	cmp	r5, r6
 8002a58:	d11a      	bne.n	8002a90 <_printf_common+0xc8>
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	e008      	b.n	8002a70 <_printf_common+0xa8>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	4652      	mov	r2, sl
 8002a62:	4649      	mov	r1, r9
 8002a64:	4638      	mov	r0, r7
 8002a66:	47c0      	blx	r8
 8002a68:	3001      	adds	r0, #1
 8002a6a:	d103      	bne.n	8002a74 <_printf_common+0xac>
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a74:	3501      	adds	r5, #1
 8002a76:	e7c6      	b.n	8002a06 <_printf_common+0x3e>
 8002a78:	18e1      	adds	r1, r4, r3
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	2030      	movs	r0, #48	; 0x30
 8002a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a82:	4422      	add	r2, r4
 8002a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	e7c7      	b.n	8002a20 <_printf_common+0x58>
 8002a90:	2301      	movs	r3, #1
 8002a92:	4622      	mov	r2, r4
 8002a94:	4649      	mov	r1, r9
 8002a96:	4638      	mov	r0, r7
 8002a98:	47c0      	blx	r8
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d0e6      	beq.n	8002a6c <_printf_common+0xa4>
 8002a9e:	3601      	adds	r6, #1
 8002aa0:	e7d9      	b.n	8002a56 <_printf_common+0x8e>
	...

08002aa4 <_printf_i>:
 8002aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa8:	7e0f      	ldrb	r7, [r1, #24]
 8002aaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002aac:	2f78      	cmp	r7, #120	; 0x78
 8002aae:	4691      	mov	r9, r2
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	469a      	mov	sl, r3
 8002ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002aba:	d807      	bhi.n	8002acc <_printf_i+0x28>
 8002abc:	2f62      	cmp	r7, #98	; 0x62
 8002abe:	d80a      	bhi.n	8002ad6 <_printf_i+0x32>
 8002ac0:	2f00      	cmp	r7, #0
 8002ac2:	f000 80d4 	beq.w	8002c6e <_printf_i+0x1ca>
 8002ac6:	2f58      	cmp	r7, #88	; 0x58
 8002ac8:	f000 80c0 	beq.w	8002c4c <_printf_i+0x1a8>
 8002acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ad4:	e03a      	b.n	8002b4c <_printf_i+0xa8>
 8002ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ada:	2b15      	cmp	r3, #21
 8002adc:	d8f6      	bhi.n	8002acc <_printf_i+0x28>
 8002ade:	a101      	add	r1, pc, #4	; (adr r1, 8002ae4 <_printf_i+0x40>)
 8002ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ae4:	08002b3d 	.word	0x08002b3d
 8002ae8:	08002b51 	.word	0x08002b51
 8002aec:	08002acd 	.word	0x08002acd
 8002af0:	08002acd 	.word	0x08002acd
 8002af4:	08002acd 	.word	0x08002acd
 8002af8:	08002acd 	.word	0x08002acd
 8002afc:	08002b51 	.word	0x08002b51
 8002b00:	08002acd 	.word	0x08002acd
 8002b04:	08002acd 	.word	0x08002acd
 8002b08:	08002acd 	.word	0x08002acd
 8002b0c:	08002acd 	.word	0x08002acd
 8002b10:	08002c55 	.word	0x08002c55
 8002b14:	08002b7d 	.word	0x08002b7d
 8002b18:	08002c0f 	.word	0x08002c0f
 8002b1c:	08002acd 	.word	0x08002acd
 8002b20:	08002acd 	.word	0x08002acd
 8002b24:	08002c77 	.word	0x08002c77
 8002b28:	08002acd 	.word	0x08002acd
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002acd 	.word	0x08002acd
 8002b34:	08002acd 	.word	0x08002acd
 8002b38:	08002c17 	.word	0x08002c17
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	602a      	str	r2, [r5, #0]
 8002b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e09f      	b.n	8002c90 <_printf_i+0x1ec>
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	0607      	lsls	r7, r0, #24
 8002b56:	f103 0104 	add.w	r1, r3, #4
 8002b5a:	6029      	str	r1, [r5, #0]
 8002b5c:	d501      	bpl.n	8002b62 <_printf_i+0xbe>
 8002b5e:	681e      	ldr	r6, [r3, #0]
 8002b60:	e003      	b.n	8002b6a <_printf_i+0xc6>
 8002b62:	0646      	lsls	r6, r0, #25
 8002b64:	d5fb      	bpl.n	8002b5e <_printf_i+0xba>
 8002b66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b6a:	2e00      	cmp	r6, #0
 8002b6c:	da03      	bge.n	8002b76 <_printf_i+0xd2>
 8002b6e:	232d      	movs	r3, #45	; 0x2d
 8002b70:	4276      	negs	r6, r6
 8002b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b76:	485a      	ldr	r0, [pc, #360]	; (8002ce0 <_printf_i+0x23c>)
 8002b78:	230a      	movs	r3, #10
 8002b7a:	e012      	b.n	8002ba2 <_printf_i+0xfe>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	6820      	ldr	r0, [r4, #0]
 8002b80:	1d19      	adds	r1, r3, #4
 8002b82:	6029      	str	r1, [r5, #0]
 8002b84:	0605      	lsls	r5, r0, #24
 8002b86:	d501      	bpl.n	8002b8c <_printf_i+0xe8>
 8002b88:	681e      	ldr	r6, [r3, #0]
 8002b8a:	e002      	b.n	8002b92 <_printf_i+0xee>
 8002b8c:	0641      	lsls	r1, r0, #25
 8002b8e:	d5fb      	bpl.n	8002b88 <_printf_i+0xe4>
 8002b90:	881e      	ldrh	r6, [r3, #0]
 8002b92:	4853      	ldr	r0, [pc, #332]	; (8002ce0 <_printf_i+0x23c>)
 8002b94:	2f6f      	cmp	r7, #111	; 0x6f
 8002b96:	bf0c      	ite	eq
 8002b98:	2308      	moveq	r3, #8
 8002b9a:	230a      	movne	r3, #10
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ba2:	6865      	ldr	r5, [r4, #4]
 8002ba4:	60a5      	str	r5, [r4, #8]
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	bfa2      	ittt	ge
 8002baa:	6821      	ldrge	r1, [r4, #0]
 8002bac:	f021 0104 	bicge.w	r1, r1, #4
 8002bb0:	6021      	strge	r1, [r4, #0]
 8002bb2:	b90e      	cbnz	r6, 8002bb8 <_printf_i+0x114>
 8002bb4:	2d00      	cmp	r5, #0
 8002bb6:	d04b      	beq.n	8002c50 <_printf_i+0x1ac>
 8002bb8:	4615      	mov	r5, r2
 8002bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8002bc2:	5dc7      	ldrb	r7, [r0, r7]
 8002bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bc8:	4637      	mov	r7, r6
 8002bca:	42bb      	cmp	r3, r7
 8002bcc:	460e      	mov	r6, r1
 8002bce:	d9f4      	bls.n	8002bba <_printf_i+0x116>
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10b      	bne.n	8002bec <_printf_i+0x148>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	07de      	lsls	r6, r3, #31
 8002bd8:	d508      	bpl.n	8002bec <_printf_i+0x148>
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	6861      	ldr	r1, [r4, #4]
 8002bde:	4299      	cmp	r1, r3
 8002be0:	bfde      	ittt	le
 8002be2:	2330      	movle	r3, #48	; 0x30
 8002be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002be8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bec:	1b52      	subs	r2, r2, r5
 8002bee:	6122      	str	r2, [r4, #16]
 8002bf0:	f8cd a000 	str.w	sl, [sp]
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	aa03      	add	r2, sp, #12
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	f7ff fee4 	bl	80029c8 <_printf_common>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d14a      	bne.n	8002c9a <_printf_i+0x1f6>
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c08:	b004      	add	sp, #16
 8002c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	4833      	ldr	r0, [pc, #204]	; (8002ce4 <_printf_i+0x240>)
 8002c18:	2778      	movs	r7, #120	; 0x78
 8002c1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	6829      	ldr	r1, [r5, #0]
 8002c22:	061f      	lsls	r7, r3, #24
 8002c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c28:	d402      	bmi.n	8002c30 <_printf_i+0x18c>
 8002c2a:	065f      	lsls	r7, r3, #25
 8002c2c:	bf48      	it	mi
 8002c2e:	b2b6      	uxthmi	r6, r6
 8002c30:	07df      	lsls	r7, r3, #31
 8002c32:	bf48      	it	mi
 8002c34:	f043 0320 	orrmi.w	r3, r3, #32
 8002c38:	6029      	str	r1, [r5, #0]
 8002c3a:	bf48      	it	mi
 8002c3c:	6023      	strmi	r3, [r4, #0]
 8002c3e:	b91e      	cbnz	r6, 8002c48 <_printf_i+0x1a4>
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f023 0320 	bic.w	r3, r3, #32
 8002c46:	6023      	str	r3, [r4, #0]
 8002c48:	2310      	movs	r3, #16
 8002c4a:	e7a7      	b.n	8002b9c <_printf_i+0xf8>
 8002c4c:	4824      	ldr	r0, [pc, #144]	; (8002ce0 <_printf_i+0x23c>)
 8002c4e:	e7e4      	b.n	8002c1a <_printf_i+0x176>
 8002c50:	4615      	mov	r5, r2
 8002c52:	e7bd      	b.n	8002bd0 <_printf_i+0x12c>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	6826      	ldr	r6, [r4, #0]
 8002c58:	6961      	ldr	r1, [r4, #20]
 8002c5a:	1d18      	adds	r0, r3, #4
 8002c5c:	6028      	str	r0, [r5, #0]
 8002c5e:	0635      	lsls	r5, r6, #24
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	d501      	bpl.n	8002c68 <_printf_i+0x1c4>
 8002c64:	6019      	str	r1, [r3, #0]
 8002c66:	e002      	b.n	8002c6e <_printf_i+0x1ca>
 8002c68:	0670      	lsls	r0, r6, #25
 8002c6a:	d5fb      	bpl.n	8002c64 <_printf_i+0x1c0>
 8002c6c:	8019      	strh	r1, [r3, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6123      	str	r3, [r4, #16]
 8002c72:	4615      	mov	r5, r2
 8002c74:	e7bc      	b.n	8002bf0 <_printf_i+0x14c>
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	1d1a      	adds	r2, r3, #4
 8002c7a:	602a      	str	r2, [r5, #0]
 8002c7c:	681d      	ldr	r5, [r3, #0]
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	2100      	movs	r1, #0
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7fd facc 	bl	8000220 <memchr>
 8002c88:	b108      	cbz	r0, 8002c8e <_printf_i+0x1ea>
 8002c8a:	1b40      	subs	r0, r0, r5
 8002c8c:	6060      	str	r0, [r4, #4]
 8002c8e:	6863      	ldr	r3, [r4, #4]
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	2300      	movs	r3, #0
 8002c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c98:	e7aa      	b.n	8002bf0 <_printf_i+0x14c>
 8002c9a:	6923      	ldr	r3, [r4, #16]
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	47d0      	blx	sl
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	d0ad      	beq.n	8002c04 <_printf_i+0x160>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	079b      	lsls	r3, r3, #30
 8002cac:	d413      	bmi.n	8002cd6 <_printf_i+0x232>
 8002cae:	68e0      	ldr	r0, [r4, #12]
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	4298      	cmp	r0, r3
 8002cb4:	bfb8      	it	lt
 8002cb6:	4618      	movlt	r0, r3
 8002cb8:	e7a6      	b.n	8002c08 <_printf_i+0x164>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4640      	mov	r0, r8
 8002cc2:	47d0      	blx	sl
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d09d      	beq.n	8002c04 <_printf_i+0x160>
 8002cc8:	3501      	adds	r5, #1
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	9903      	ldr	r1, [sp, #12]
 8002cce:	1a5b      	subs	r3, r3, r1
 8002cd0:	42ab      	cmp	r3, r5
 8002cd2:	dcf2      	bgt.n	8002cba <_printf_i+0x216>
 8002cd4:	e7eb      	b.n	8002cae <_printf_i+0x20a>
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	f104 0619 	add.w	r6, r4, #25
 8002cdc:	e7f5      	b.n	8002cca <_printf_i+0x226>
 8002cde:	bf00      	nop
 8002ce0:	08002ee5 	.word	0x08002ee5
 8002ce4:	08002ef6 	.word	0x08002ef6

08002ce8 <__malloc_lock>:
 8002ce8:	4801      	ldr	r0, [pc, #4]	; (8002cf0 <__malloc_lock+0x8>)
 8002cea:	f7ff bc73 	b.w	80025d4 <__retarget_lock_acquire_recursive>
 8002cee:	bf00      	nop
 8002cf0:	20000200 	.word	0x20000200

08002cf4 <__malloc_unlock>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	; (8002cfc <__malloc_unlock+0x8>)
 8002cf6:	f7ff bc6e 	b.w	80025d6 <__retarget_lock_release_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	20000200 	.word	0x20000200

08002d00 <_realloc_r>:
 8002d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d04:	4680      	mov	r8, r0
 8002d06:	4614      	mov	r4, r2
 8002d08:	460e      	mov	r6, r1
 8002d0a:	b921      	cbnz	r1, 8002d16 <_realloc_r+0x16>
 8002d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	4611      	mov	r1, r2
 8002d12:	f7ff bdd9 	b.w	80028c8 <_malloc_r>
 8002d16:	b92a      	cbnz	r2, 8002d24 <_realloc_r+0x24>
 8002d18:	f000 f85a 	bl	8002dd0 <_free_r>
 8002d1c:	4625      	mov	r5, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d24:	f000 f8a0 	bl	8002e68 <_malloc_usable_size_r>
 8002d28:	4284      	cmp	r4, r0
 8002d2a:	4607      	mov	r7, r0
 8002d2c:	d802      	bhi.n	8002d34 <_realloc_r+0x34>
 8002d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d32:	d812      	bhi.n	8002d5a <_realloc_r+0x5a>
 8002d34:	4621      	mov	r1, r4
 8002d36:	4640      	mov	r0, r8
 8002d38:	f7ff fdc6 	bl	80028c8 <_malloc_r>
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d0ed      	beq.n	8002d1e <_realloc_r+0x1e>
 8002d42:	42bc      	cmp	r4, r7
 8002d44:	4622      	mov	r2, r4
 8002d46:	4631      	mov	r1, r6
 8002d48:	bf28      	it	cs
 8002d4a:	463a      	movcs	r2, r7
 8002d4c:	f000 f832 	bl	8002db4 <memcpy>
 8002d50:	4631      	mov	r1, r6
 8002d52:	4640      	mov	r0, r8
 8002d54:	f000 f83c 	bl	8002dd0 <_free_r>
 8002d58:	e7e1      	b.n	8002d1e <_realloc_r+0x1e>
 8002d5a:	4635      	mov	r5, r6
 8002d5c:	e7df      	b.n	8002d1e <_realloc_r+0x1e>

08002d5e <memmove>:
 8002d5e:	4288      	cmp	r0, r1
 8002d60:	b510      	push	{r4, lr}
 8002d62:	eb01 0402 	add.w	r4, r1, r2
 8002d66:	d902      	bls.n	8002d6e <memmove+0x10>
 8002d68:	4284      	cmp	r4, r0
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	d807      	bhi.n	8002d7e <memmove+0x20>
 8002d6e:	1e43      	subs	r3, r0, #1
 8002d70:	42a1      	cmp	r1, r4
 8002d72:	d008      	beq.n	8002d86 <memmove+0x28>
 8002d74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d7c:	e7f8      	b.n	8002d70 <memmove+0x12>
 8002d7e:	4402      	add	r2, r0
 8002d80:	4601      	mov	r1, r0
 8002d82:	428a      	cmp	r2, r1
 8002d84:	d100      	bne.n	8002d88 <memmove+0x2a>
 8002d86:	bd10      	pop	{r4, pc}
 8002d88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d90:	e7f7      	b.n	8002d82 <memmove+0x24>
	...

08002d94 <_sbrk_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4d06      	ldr	r5, [pc, #24]	; (8002db0 <_sbrk_r+0x1c>)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fd ff7e 	bl	8000ca0 <_sbrk>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_sbrk_r+0x1a>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_sbrk_r+0x1a>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	2000020c 	.word	0x2000020c

08002db4 <memcpy>:
 8002db4:	440a      	add	r2, r1
 8002db6:	4291      	cmp	r1, r2
 8002db8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002dbc:	d100      	bne.n	8002dc0 <memcpy+0xc>
 8002dbe:	4770      	bx	lr
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dca:	4291      	cmp	r1, r2
 8002dcc:	d1f9      	bne.n	8002dc2 <memcpy+0xe>
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <_free_r>:
 8002dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d044      	beq.n	8002e60 <_free_r+0x90>
 8002dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dda:	9001      	str	r0, [sp, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f1a1 0404 	sub.w	r4, r1, #4
 8002de2:	bfb8      	it	lt
 8002de4:	18e4      	addlt	r4, r4, r3
 8002de6:	f7ff ff7f 	bl	8002ce8 <__malloc_lock>
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <_free_r+0x94>)
 8002dec:	9801      	ldr	r0, [sp, #4]
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	b933      	cbnz	r3, 8002e00 <_free_r+0x30>
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	6014      	str	r4, [r2, #0]
 8002df6:	b003      	add	sp, #12
 8002df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dfc:	f7ff bf7a 	b.w	8002cf4 <__malloc_unlock>
 8002e00:	42a3      	cmp	r3, r4
 8002e02:	d908      	bls.n	8002e16 <_free_r+0x46>
 8002e04:	6825      	ldr	r5, [r4, #0]
 8002e06:	1961      	adds	r1, r4, r5
 8002e08:	428b      	cmp	r3, r1
 8002e0a:	bf01      	itttt	eq
 8002e0c:	6819      	ldreq	r1, [r3, #0]
 8002e0e:	685b      	ldreq	r3, [r3, #4]
 8002e10:	1949      	addeq	r1, r1, r5
 8002e12:	6021      	streq	r1, [r4, #0]
 8002e14:	e7ed      	b.n	8002df2 <_free_r+0x22>
 8002e16:	461a      	mov	r2, r3
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b10b      	cbz	r3, 8002e20 <_free_r+0x50>
 8002e1c:	42a3      	cmp	r3, r4
 8002e1e:	d9fa      	bls.n	8002e16 <_free_r+0x46>
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	1855      	adds	r5, r2, r1
 8002e24:	42a5      	cmp	r5, r4
 8002e26:	d10b      	bne.n	8002e40 <_free_r+0x70>
 8002e28:	6824      	ldr	r4, [r4, #0]
 8002e2a:	4421      	add	r1, r4
 8002e2c:	1854      	adds	r4, r2, r1
 8002e2e:	42a3      	cmp	r3, r4
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	d1e0      	bne.n	8002df6 <_free_r+0x26>
 8002e34:	681c      	ldr	r4, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	6053      	str	r3, [r2, #4]
 8002e3a:	440c      	add	r4, r1
 8002e3c:	6014      	str	r4, [r2, #0]
 8002e3e:	e7da      	b.n	8002df6 <_free_r+0x26>
 8002e40:	d902      	bls.n	8002e48 <_free_r+0x78>
 8002e42:	230c      	movs	r3, #12
 8002e44:	6003      	str	r3, [r0, #0]
 8002e46:	e7d6      	b.n	8002df6 <_free_r+0x26>
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	1961      	adds	r1, r4, r5
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	bf04      	itt	eq
 8002e50:	6819      	ldreq	r1, [r3, #0]
 8002e52:	685b      	ldreq	r3, [r3, #4]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	bf04      	itt	eq
 8002e58:	1949      	addeq	r1, r1, r5
 8002e5a:	6021      	streq	r1, [r4, #0]
 8002e5c:	6054      	str	r4, [r2, #4]
 8002e5e:	e7ca      	b.n	8002df6 <_free_r+0x26>
 8002e60:	b003      	add	sp, #12
 8002e62:	bd30      	pop	{r4, r5, pc}
 8002e64:	20000204 	.word	0x20000204

08002e68 <_malloc_usable_size_r>:
 8002e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e6c:	1f18      	subs	r0, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfbc      	itt	lt
 8002e72:	580b      	ldrlt	r3, [r1, r0]
 8002e74:	18c0      	addlt	r0, r0, r3
 8002e76:	4770      	bx	lr

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
