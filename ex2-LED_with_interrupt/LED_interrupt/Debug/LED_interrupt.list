
LED_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b1c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d34  08003d34  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d3c  08003d3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004060  20000010  08003d54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004070  08003d54  00024070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011eb4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9d  00000000  00000000  00031f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d16  00000000  00000000  00035aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bcc  00000000  00000000  000367be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013771  00000000  00000000  0005938a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8c1f  00000000  00000000  0006cafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045fc  00000000  00000000  0014571c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00149d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003cd4 	.word	0x08003cd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003cd4 	.word	0x08003cd4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
 {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fae1 	bl	8000b0c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f81d 	bl	8000588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8b3 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f887 	bl	8000664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x40>)
 8000558:	1d3c      	adds	r4, r7, #4
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 f956 	bl	800281e <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <main+0x44>)
 8000576:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000578:	f002 f94a 	bl	8002810 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
  {
	  osErrorOS; //error message
 800057c:	e7fe      	b.n	800057c <main+0x3c>
 800057e:	bf00      	nop
 8000580:	08003cf8 	.word	0x08003cf8
 8000584:	200002c8 	.word	0x200002c8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fb70 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <SystemClock_Config+0xd4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <SystemClock_Config+0xd4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <SystemClock_Config+0xd8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a22      	ldr	r2, [pc, #136]	; (8000660 <SystemClock_Config+0xd8>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005fc:	2310      	movs	r3, #16
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f8de 	bl	80017d8 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000622:	f000 f923 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fd4c 	bl	80010e0 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800064e:	f000 f90d 	bl	800086c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fddc 	bl	8002258 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f8e1 	bl	800086c <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000280 	.word	0x20000280
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a30      	ldr	r2, [pc, #192]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_GPIO_Init+0xe0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xe0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MX_GPIO_Init+0xe0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_GPIO_Init+0xe0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xe0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_GPIO_Init+0xe0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0xe0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4816      	ldr	r0, [pc, #88]	; (800079c <MX_GPIO_Init+0xe4>)
 8000744:	f000 fc9a 	bl	800107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4810      	ldr	r0, [pc, #64]	; (80007a0 <MX_GPIO_Init+0xe8>)
 8000760:	f000 faf8 	bl	8000d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4808      	ldr	r0, [pc, #32]	; (800079c <MX_GPIO_Init+0xe4>)
 800077c:	f000 faea 	bl	8000d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2105      	movs	r1, #5
 8000784:	2028      	movs	r0, #40	; 0x28
 8000786:	f000 fabb 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800078a:	2028      	movs	r0, #40	; 0x28
 800078c:	f000 fad4 	bl	8000d38 <HAL_NVIC_EnableIRQ>
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
		/* Blue button not pressed: */
		if(counter == 0){
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <StartDefaultTask+0x6c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d112      	bne.n	80007dc <StartDefaultTask+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2120      	movs	r1, #32
 80007ba:	4816      	ldr	r0, [pc, #88]	; (8000814 <StartDefaultTask+0x70>)
 80007bc:	f000 fc5e 	bl	800107c <HAL_GPIO_WritePin>
			osDelay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f002 f877 	bl	80028b6 <osDelay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2120      	movs	r1, #32
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <StartDefaultTask+0x70>)
 80007ce:	f000 fc55 	bl	800107c <HAL_GPIO_WritePin>
			osDelay(500);
 80007d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d6:	f002 f86e 	bl	80028b6 <osDelay>
 80007da:	e7e7      	b.n	80007ac <StartDefaultTask+0x8>
		}
		/* Blue button pressed 1 time: */
		else if(counter == 1){
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <StartDefaultTask+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d105      	bne.n	80007f2 <StartDefaultTask+0x4e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <StartDefaultTask+0x70>)
 80007ec:	f000 fc46 	bl	800107c <HAL_GPIO_WritePin>
 80007f0:	e7dc      	b.n	80007ac <StartDefaultTask+0x8>
		}
		/* Blue button pressed 2 times: */
		else if(counter == 2){
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <StartDefaultTask+0x6c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d105      	bne.n	8000808 <StartDefaultTask+0x64>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <StartDefaultTask+0x70>)
 8000802:	f000 fc3b 	bl	800107c <HAL_GPIO_WritePin>
 8000806:	e7d1      	b.n	80007ac <StartDefaultTask+0x8>
		}
		else{
			counter = 0;
 8000808:	4b01      	ldr	r3, [pc, #4]	; (8000810 <StartDefaultTask+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
		if(counter == 0){
 800080e:	e7cd      	b.n	80007ac <StartDefaultTask+0x8>
 8000810:	200002cc 	.word	0x200002cc
 8000814:	40020000 	.word	0x40020000

08000818 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

/* Function to handle the interrupt */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000828:	d106      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x20>
		counter++;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_GPIO_EXTI_Callback+0x2c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000836:	701a      	strb	r2, [r3, #0]
	}
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	200002cc 	.word	0x200002cc

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 f979 	bl	8000b50 <HAL_IncTick>
  }
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010000 	.word	0x40010000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  osErrorOS;
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_MspInit+0x54>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_MspInit+0x54>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 fa1f 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12b      	bne.n	800094a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x88>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092a:	230c      	movs	r3, #12
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_UART_MspInit+0x8c>)
 8000946:	f000 fa05 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40004400 	.word	0x40004400
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <HAL_InitTick+0xd0>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	4a2d      	ldr	r2, [pc, #180]	; (8000a30 <HAL_InitTick+0xd0>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6453      	str	r3, [r2, #68]	; 0x44
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_InitTick+0xd0>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fcbc 	bl	8001314 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800099c:	f000 fca6 	bl	80012ec <HAL_RCC_GetPCLK2Freq>
 80009a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a4:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_InitTick+0xd4>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0c9b      	lsrs	r3, r3, #18
 80009ac:	3b01      	subs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_InitTick+0xd8>)
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <HAL_InitTick+0xdc>)
 80009b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_InitTick+0xd8>)
 80009b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xd8>)
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xd8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_InitTick+0xd8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009d6:	4818      	ldr	r0, [pc, #96]	; (8000a38 <HAL_InitTick+0xd8>)
 80009d8:	f001 f99c 	bl	8001d14 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d11b      	bne.n	8000a22 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <HAL_InitTick+0xd8>)
 80009ec:	f001 f9ec 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d111      	bne.n	8000a22 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009fe:	2019      	movs	r0, #25
 8000a00:	f000 f99a 	bl	8000d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d808      	bhi.n	8000a1c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	2019      	movs	r0, #25
 8000a10:	f000 f976 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_InitTick+0xe0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e002      	b.n	8000a22 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	200002d0 	.word	0x200002d0
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a76:	f001 fa17 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200002d0 	.word	0x200002d0

08000a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a8c:	f000 fb10 	bl	80010b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f003 f8d1 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd29 	bl	8000540 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000afc:	08003d44 	.word	0x08003d44
  ldr r2, =_sbss
 8000b00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b04:	20004070 	.word	0x20004070

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f8d8 	bl	8000cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff ff10 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe9a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000318 	.word	0x20000318

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000318 	.word	0x20000318

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4c 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff61 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffb1 	bl	8000c84 <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff80 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e165      	b.n	800103c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 8154 	bne.w	8001036 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d005      	beq.n	8000da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d130      	bne.n	8000e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 0201 	and.w	r2, r3, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d017      	beq.n	8000e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80ae 	beq.w	8001036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a5c      	ldr	r2, [pc, #368]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b5a      	ldr	r3, [pc, #360]	; (8001054 <HAL_GPIO_Init+0x300>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x308>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d025      	beq.n	8000f6e <HAL_GPIO_Init+0x21a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01f      	beq.n	8000f6a <HAL_GPIO_Init+0x216>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x212>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x314>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x318>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x20a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x206>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x320>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x202>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00c      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00a      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x21c>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_GPIO_Init+0x304>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a31      	ldr	r2, [pc, #196]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a26      	ldr	r2, [pc, #152]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_GPIO_Init+0x324>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_GPIO_Init+0x324>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <HAL_GPIO_Init+0x324>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f ae96 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40021400 	.word	0x40021400
 8001074:	40021800 	.word	0x40021800
 8001078:	40013c00 	.word	0x40013c00

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fba2 	bl	8000818 <HAL_GPIO_EXTI_Callback>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0cc      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d90c      	bls.n	800111c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b65      	ldr	r3, [pc, #404]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800113e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	4313      	orrs	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d044      	beq.n	8001200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d119      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d003      	beq.n	800119e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119a:	2b03      	cmp	r3, #3
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e067      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4934      	ldr	r1, [pc, #208]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fcd2 	bl	8000b78 <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	f7ff fcce 	bl	8000b78 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e04f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 020c 	and.w	r2, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d1eb      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d20c      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f887 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 800126a:	4602      	mov	r2, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	490a      	ldr	r1, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb6a 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00
 800129c:	40023800 	.word	0x40023800
 80012a0:	08003d1c 	.word	0x08003d1c
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000000 	.word	0x20000000

080012c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c8:	f7ff fff0 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	4903      	ldr	r1, [pc, #12]	; (80012e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012da:	5ccb      	ldrb	r3, [r1, r3]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	08003d2c 	.word	0x08003d2c

080012ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f0:	f7ff ffdc 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0b5b      	lsrs	r3, r3, #13
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	4903      	ldr	r1, [pc, #12]	; (8001310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001302:	5ccb      	ldrb	r3, [r1, r3]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	08003d2c 	.word	0x08003d2c

08001314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	220f      	movs	r2, #15
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_RCC_GetClockConfig+0x60>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 020f 	and.w	r2, r3, #15
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b0ae      	sub	sp, #184	; 0xb8
 800137e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800139e:	4bcb      	ldr	r3, [pc, #812]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	f200 8206 	bhi.w	80017b8 <HAL_RCC_GetSysClockFreq+0x440>
 80013ac:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013e9 	.word	0x080013e9
 80013b8:	080017b9 	.word	0x080017b9
 80013bc:	080017b9 	.word	0x080017b9
 80013c0:	080017b9 	.word	0x080017b9
 80013c4:	080013f1 	.word	0x080013f1
 80013c8:	080017b9 	.word	0x080017b9
 80013cc:	080017b9 	.word	0x080017b9
 80013d0:	080017b9 	.word	0x080017b9
 80013d4:	080013f9 	.word	0x080013f9
 80013d8:	080017b9 	.word	0x080017b9
 80013dc:	080017b9 	.word	0x080017b9
 80013e0:	080017b9 	.word	0x080017b9
 80013e4:	080015e9 	.word	0x080015e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013e8:	4bb9      	ldr	r3, [pc, #740]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013ee:	e1e7      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4bb8      	ldr	r3, [pc, #736]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013f6:	e1e3      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f8:	4bb4      	ldr	r3, [pc, #720]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001404:	4bb1      	ldr	r3, [pc, #708]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d071      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001410:	4bae      	ldr	r3, [pc, #696]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	2200      	movs	r2, #0
 8001418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800141c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001436:	4622      	mov	r2, r4
 8001438:	462b      	mov	r3, r5
 800143a:	f04f 0000 	mov.w	r0, #0
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001448:	0150      	lsls	r0, r2, #5
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4621      	mov	r1, r4
 8001450:	1a51      	subs	r1, r2, r1
 8001452:	6439      	str	r1, [r7, #64]	; 0x40
 8001454:	4629      	mov	r1, r5
 8001456:	eb63 0301 	sbc.w	r3, r3, r1
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001468:	4649      	mov	r1, r9
 800146a:	018b      	lsls	r3, r1, #6
 800146c:	4641      	mov	r1, r8
 800146e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001472:	4641      	mov	r1, r8
 8001474:	018a      	lsls	r2, r1, #6
 8001476:	4641      	mov	r1, r8
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	63b9      	str	r1, [r7, #56]	; 0x38
 800147c:	4649      	mov	r1, r9
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001490:	4649      	mov	r1, r9
 8001492:	00cb      	lsls	r3, r1, #3
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800149a:	4641      	mov	r1, r8
 800149c:	00ca      	lsls	r2, r1, #3
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	4622      	mov	r2, r4
 80014a6:	189b      	adds	r3, r3, r2
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
 80014aa:	462b      	mov	r3, r5
 80014ac:	460a      	mov	r2, r1
 80014ae:	eb42 0303 	adc.w	r3, r2, r3
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014c0:	4629      	mov	r1, r5
 80014c2:	024b      	lsls	r3, r1, #9
 80014c4:	4621      	mov	r1, r4
 80014c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ca:	4621      	mov	r1, r4
 80014cc:	024a      	lsls	r2, r1, #9
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014e4:	f7fe fe94 	bl	8000210 <__aeabi_uldivmod>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4613      	mov	r3, r2
 80014ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014f2:	e067      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001500:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150c:	67bb      	str	r3, [r7, #120]	; 0x78
 800150e:	2300      	movs	r3, #0
 8001510:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001512:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001516:	4622      	mov	r2, r4
 8001518:	462b      	mov	r3, r5
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	0159      	lsls	r1, r3, #5
 8001524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001528:	0150      	lsls	r0, r2, #5
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4621      	mov	r1, r4
 8001530:	1a51      	subs	r1, r2, r1
 8001532:	62b9      	str	r1, [r7, #40]	; 0x28
 8001534:	4629      	mov	r1, r5
 8001536:	eb63 0301 	sbc.w	r3, r3, r1
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001548:	4649      	mov	r1, r9
 800154a:	018b      	lsls	r3, r1, #6
 800154c:	4641      	mov	r1, r8
 800154e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001552:	4641      	mov	r1, r8
 8001554:	018a      	lsls	r2, r1, #6
 8001556:	4641      	mov	r1, r8
 8001558:	ebb2 0a01 	subs.w	sl, r2, r1
 800155c:	4649      	mov	r1, r9
 800155e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800156e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001576:	4692      	mov	sl, r2
 8001578:	469b      	mov	fp, r3
 800157a:	4623      	mov	r3, r4
 800157c:	eb1a 0303 	adds.w	r3, sl, r3
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	462b      	mov	r3, r5
 8001584:	eb4b 0303 	adc.w	r3, fp, r3
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001596:	4629      	mov	r1, r5
 8001598:	028b      	lsls	r3, r1, #10
 800159a:	4621      	mov	r1, r4
 800159c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a0:	4621      	mov	r1, r4
 80015a2:	028a      	lsls	r2, r1, #10
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ac:	2200      	movs	r2, #0
 80015ae:	673b      	str	r3, [r7, #112]	; 0x70
 80015b0:	677a      	str	r2, [r7, #116]	; 0x74
 80015b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015b6:	f7fe fe2b 	bl	8000210 <__aeabi_uldivmod>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4613      	mov	r3, r2
 80015c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	3301      	adds	r3, #1
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015e6:	e0eb      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e8:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d06b      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	2200      	movs	r2, #0
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
 800160a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800160c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001612:	663b      	str	r3, [r7, #96]	; 0x60
 8001614:	2300      	movs	r3, #0
 8001616:	667b      	str	r3, [r7, #100]	; 0x64
 8001618:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800161c:	4622      	mov	r2, r4
 800161e:	462b      	mov	r3, r5
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	0159      	lsls	r1, r3, #5
 800162a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800162e:	0150      	lsls	r0, r2, #5
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4621      	mov	r1, r4
 8001636:	1a51      	subs	r1, r2, r1
 8001638:	61b9      	str	r1, [r7, #24]
 800163a:	4629      	mov	r1, r5
 800163c:	eb63 0301 	sbc.w	r3, r3, r1
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800164e:	4659      	mov	r1, fp
 8001650:	018b      	lsls	r3, r1, #6
 8001652:	4651      	mov	r1, sl
 8001654:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001658:	4651      	mov	r1, sl
 800165a:	018a      	lsls	r2, r1, #6
 800165c:	4651      	mov	r1, sl
 800165e:	ebb2 0801 	subs.w	r8, r2, r1
 8001662:	4659      	mov	r1, fp
 8001664:	eb63 0901 	sbc.w	r9, r3, r1
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001674:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001678:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800167c:	4690      	mov	r8, r2
 800167e:	4699      	mov	r9, r3
 8001680:	4623      	mov	r3, r4
 8001682:	eb18 0303 	adds.w	r3, r8, r3
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	462b      	mov	r3, r5
 800168a:	eb49 0303 	adc.w	r3, r9, r3
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800169c:	4629      	mov	r1, r5
 800169e:	024b      	lsls	r3, r1, #9
 80016a0:	4621      	mov	r1, r4
 80016a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016a6:	4621      	mov	r1, r4
 80016a8:	024a      	lsls	r2, r1, #9
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b2:	2200      	movs	r2, #0
 80016b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016bc:	f7fe fda8 	bl	8000210 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016ca:	e065      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x420>
 80016cc:	40023800 	.word	0x40023800
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	4611      	mov	r1, r2
 80016e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016e8:	653b      	str	r3, [r7, #80]	; 0x50
 80016ea:	2300      	movs	r3, #0
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54
 80016ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016f2:	4642      	mov	r2, r8
 80016f4:	464b      	mov	r3, r9
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0159      	lsls	r1, r3, #5
 8001700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001704:	0150      	lsls	r0, r2, #5
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4641      	mov	r1, r8
 800170c:	1a51      	subs	r1, r2, r1
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	4649      	mov	r1, r9
 8001712:	eb63 0301 	sbc.w	r3, r3, r1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001724:	4659      	mov	r1, fp
 8001726:	018b      	lsls	r3, r1, #6
 8001728:	4651      	mov	r1, sl
 800172a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172e:	4651      	mov	r1, sl
 8001730:	018a      	lsls	r2, r1, #6
 8001732:	4651      	mov	r1, sl
 8001734:	1a54      	subs	r4, r2, r1
 8001736:	4659      	mov	r1, fp
 8001738:	eb63 0501 	sbc.w	r5, r3, r1
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	00eb      	lsls	r3, r5, #3
 8001746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174a:	00e2      	lsls	r2, r4, #3
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	4643      	mov	r3, r8
 8001752:	18e3      	adds	r3, r4, r3
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	464b      	mov	r3, r9
 8001758:	eb45 0303 	adc.w	r3, r5, r3
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176a:	4629      	mov	r1, r5
 800176c:	028b      	lsls	r3, r1, #10
 800176e:	4621      	mov	r1, r4
 8001770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001774:	4621      	mov	r1, r4
 8001776:	028a      	lsls	r2, r1, #10
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001780:	2200      	movs	r2, #0
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
 8001784:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001786:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800178a:	f7fe fd41 	bl	8000210 <__aeabi_uldivmod>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4613      	mov	r3, r2
 8001794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0f1b      	lsrs	r3, r3, #28
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017b6:	e003      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	37b8      	adds	r7, #184	; 0xb8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400

080017d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e28d      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8083 	beq.w	80018fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f8:	4b94      	ldr	r3, [pc, #592]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d019      	beq.n	8001838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001804:	4b91      	ldr	r3, [pc, #580]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800180c:	2b08      	cmp	r3, #8
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181c:	d00c      	beq.n	8001838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001836:	d10b      	bne.n	8001850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d05b      	beq.n	80018fc <HAL_RCC_OscConfig+0x124>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d157      	bne.n	80018fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e25a      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x90>
 800185a:	4b7c      	ldr	r3, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7b      	ldr	r2, [pc, #492]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e01d      	b.n	80018a4 <HAL_RCC_OscConfig+0xcc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0xb4>
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a72      	ldr	r2, [pc, #456]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0xcc>
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f964 	bl	8000b78 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f960 	bl	8000b78 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e21f      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0xdc>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f950 	bl	8000b78 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f94c 	bl	8000b78 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e20b      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x104>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d06f      	beq.n	80019ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b00      	cmp	r3, #0
 8001914:	d017      	beq.n	8001946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800191e:	2b08      	cmp	r3, #8
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d11c      	bne.n	8001974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x186>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1d3      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	e03a      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff f8f9 	bl	8000b78 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff f8f5 	bl	8000b78 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e1b4      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4925      	ldr	r1, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8d8 	bl	8000b78 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff f8d4 	bl	8000b78 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e193      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d036      	beq.n	8001a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8b8 	bl	8000b78 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f8b4 	bl	8000b78 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e173      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x234>
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff f8a1 	bl	8000b78 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e00e      	b.n	8001a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f89d 	bl	8000b78 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d907      	bls.n	8001a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e15c      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	4b8a      	ldr	r3, [pc, #552]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ea      	bne.n	8001a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8097 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b7f      	ldr	r3, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b79      	ldr	r3, [pc, #484]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f85d 	bl	8000b78 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff f859 	bl	8000b78 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e118      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x31e>
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a65      	ldr	r2, [pc, #404]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x358>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x340>
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x358>
 8001b18:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a59      	ldr	r2, [pc, #356]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff f81e 	bl	8000b78 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f81a 	bl	8000b78 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0d7      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ee      	beq.n	8001b40 <HAL_RCC_OscConfig+0x368>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f808 	bl	8000b78 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f804 	bl	8000b78 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0c1      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a3a      	ldr	r2, [pc, #232]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80ad 	beq.w	8001d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d060      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d145      	bne.n	8001c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ffd8 	bl	8000b78 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe ffd4 	bl	8000b78 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e093      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	071b      	lsls	r3, r3, #28
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7fe ffa9 	bl	8000b78 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe ffa5 	bl	8000b78 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e064      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x452>
 8001c48:	e05c      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ff92 	bl	8000b78 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ff8e 	bl	8000b78 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e04d      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x480>
 8001c76:	e045      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e040      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_RCC_OscConfig+0x538>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d030      	beq.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d129      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d122      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d119      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10f      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f839 	bl	8001db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f9c0 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04e      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40001800 	.word	0x40001800

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8d2 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8c4 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8d5 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ac 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89e 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8af 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f886 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f878 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f889 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f860 	bl	800209c <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f852 	bl	8002088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f863 	bl	80020b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0201 	mvn.w	r2, #1
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fc1a 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f906 	bl	8002244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f834 	bl	80020c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0220 	mvn.w	r2, #32
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8d8 	bl	8002230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d00f      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a43      	ldr	r2, [pc, #268]	; (8002208 <TIM_Base_SetConfig+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00b      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a42      	ldr	r2, [pc, #264]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a35      	ldr	r2, [pc, #212]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d027      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <TIM_Base_SetConfig+0x130>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d023      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a31      	ldr	r2, [pc, #196]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d017      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <TIM_Base_SetConfig+0x140>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <TIM_Base_SetConfig+0x144>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <TIM_Base_SetConfig+0x148>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0x14c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0x150>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0xf8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f023 0201 	bic.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	40001800 	.word	0x40001800
 8002228:	40001c00 	.word	0x40001c00
 800222c:	40002000 	.word	0x40002000

08002230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e042      	b.n	80022f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fb26 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f82b 	bl	80022f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022fc:	b0c0      	sub	sp, #256	; 0x100
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	ea40 0301 	orr.w	r3, r0, r1
 8002320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	431a      	orrs	r2, r3
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	431a      	orrs	r2, r3
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002350:	f021 010c 	bic.w	r1, r1, #12
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	6999      	ldr	r1, [r3, #24]
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	ea40 0301 	orr.w	r3, r0, r1
 800237e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <UART_SetConfig+0x2cc>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d005      	beq.n	8002398 <UART_SetConfig+0xa0>
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b8d      	ldr	r3, [pc, #564]	; (80025c8 <UART_SetConfig+0x2d0>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d104      	bne.n	80023a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7fe ffa8 	bl	80012ec <HAL_RCC_GetPCLK2Freq>
 800239c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023a0:	e003      	b.n	80023aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a2:	f7fe ff8f 	bl	80012c4 <HAL_RCC_GetPCLK1Freq>
 80023a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023b4:	f040 810c 	bne.w	80025d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	1891      	adds	r1, r2, r2
 80023d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023d2:	415b      	adcs	r3, r3
 80023d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023da:	4621      	mov	r1, r4
 80023dc:	eb12 0801 	adds.w	r8, r2, r1
 80023e0:	4629      	mov	r1, r5
 80023e2:	eb43 0901 	adc.w	r9, r3, r1
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fa:	4690      	mov	r8, r2
 80023fc:	4699      	mov	r9, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	eb18 0303 	adds.w	r3, r8, r3
 8002404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002408:	462b      	mov	r3, r5
 800240a:	eb49 0303 	adc.w	r3, r9, r3
 800240e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800241e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002426:	460b      	mov	r3, r1
 8002428:	18db      	adds	r3, r3, r3
 800242a:	653b      	str	r3, [r7, #80]	; 0x50
 800242c:	4613      	mov	r3, r2
 800242e:	eb42 0303 	adc.w	r3, r2, r3
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
 8002434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800243c:	f7fd fee8 	bl	8000210 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4b61      	ldr	r3, [pc, #388]	; (80025cc <UART_SetConfig+0x2d4>)
 8002446:	fba3 2302 	umull	r2, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	011c      	lsls	r4, r3, #4
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800245c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	64b9      	str	r1, [r7, #72]	; 0x48
 8002468:	415b      	adcs	r3, r3
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800246c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002470:	4641      	mov	r1, r8
 8002472:	eb12 0a01 	adds.w	sl, r2, r1
 8002476:	4649      	mov	r1, r9
 8002478:	eb43 0b01 	adc.w	fp, r3, r1
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800248c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002490:	4692      	mov	sl, r2
 8002492:	469b      	mov	fp, r3
 8002494:	4643      	mov	r3, r8
 8002496:	eb1a 0303 	adds.w	r3, sl, r3
 800249a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800249e:	464b      	mov	r3, r9
 80024a0:	eb4b 0303 	adc.w	r3, fp, r3
 80024a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024bc:	460b      	mov	r3, r1
 80024be:	18db      	adds	r3, r3, r3
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
 80024c2:	4613      	mov	r3, r2
 80024c4:	eb42 0303 	adc.w	r3, r2, r3
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024d2:	f7fd fe9d 	bl	8000210 <__aeabi_uldivmod>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <UART_SetConfig+0x2d4>)
 80024de:	fba3 2301 	umull	r2, r3, r3, r1
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2264      	movs	r2, #100	; 0x64
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	1acb      	subs	r3, r1, r3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <UART_SetConfig+0x2d4>)
 80024f4:	fba3 2302 	umull	r2, r3, r3, r2
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002500:	441c      	add	r4, r3
 8002502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800250c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002514:	4642      	mov	r2, r8
 8002516:	464b      	mov	r3, r9
 8002518:	1891      	adds	r1, r2, r2
 800251a:	63b9      	str	r1, [r7, #56]	; 0x38
 800251c:	415b      	adcs	r3, r3
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002524:	4641      	mov	r1, r8
 8002526:	1851      	adds	r1, r2, r1
 8002528:	6339      	str	r1, [r7, #48]	; 0x30
 800252a:	4649      	mov	r1, r9
 800252c:	414b      	adcs	r3, r1
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800253c:	4659      	mov	r1, fp
 800253e:	00cb      	lsls	r3, r1, #3
 8002540:	4651      	mov	r1, sl
 8002542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002546:	4651      	mov	r1, sl
 8002548:	00ca      	lsls	r2, r1, #3
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4603      	mov	r3, r0
 8002550:	4642      	mov	r2, r8
 8002552:	189b      	adds	r3, r3, r2
 8002554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002558:	464b      	mov	r3, r9
 800255a:	460a      	mov	r2, r1
 800255c:	eb42 0303 	adc.w	r3, r2, r3
 8002560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002578:	460b      	mov	r3, r1
 800257a:	18db      	adds	r3, r3, r3
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
 800257e:	4613      	mov	r3, r2
 8002580:	eb42 0303 	adc.w	r3, r2, r3
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800258a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800258e:	f7fd fe3f 	bl	8000210 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <UART_SetConfig+0x2d4>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	; 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <UART_SetConfig+0x2d4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	f003 0207 	and.w	r2, r3, #7
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4422      	add	r2, r4
 80025be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025c0:	e106      	b.n	80027d0 <UART_SetConfig+0x4d8>
 80025c2:	bf00      	nop
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40011400 	.word	0x40011400
 80025cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025e2:	4642      	mov	r2, r8
 80025e4:	464b      	mov	r3, r9
 80025e6:	1891      	adds	r1, r2, r2
 80025e8:	6239      	str	r1, [r7, #32]
 80025ea:	415b      	adcs	r3, r3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025f2:	4641      	mov	r1, r8
 80025f4:	1854      	adds	r4, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb43 0501 	adc.w	r5, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	00eb      	lsls	r3, r5, #3
 8002606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	4643      	mov	r3, r8
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002618:	464b      	mov	r3, r9
 800261a:	eb45 0303 	adc.w	r3, r5, r3
 800261e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800262e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800263e:	4629      	mov	r1, r5
 8002640:	008b      	lsls	r3, r1, #2
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002648:	4621      	mov	r1, r4
 800264a:	008a      	lsls	r2, r1, #2
 800264c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002650:	f7fd fdde 	bl	8000210 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4b60      	ldr	r3, [pc, #384]	; (80027dc <UART_SetConfig+0x4e4>)
 800265a:	fba3 2302 	umull	r2, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	011c      	lsls	r4, r3, #4
 8002662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800266c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	1891      	adds	r1, r2, r2
 800267a:	61b9      	str	r1, [r7, #24]
 800267c:	415b      	adcs	r3, r3
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002684:	4641      	mov	r1, r8
 8002686:	1851      	adds	r1, r2, r1
 8002688:	6139      	str	r1, [r7, #16]
 800268a:	4649      	mov	r1, r9
 800268c:	414b      	adcs	r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	00cb      	lsls	r3, r1, #3
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a6:	4651      	mov	r1, sl
 80026a8:	00ca      	lsls	r2, r1, #3
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	4642      	mov	r2, r8
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026b8:	464b      	mov	r3, r9
 80026ba:	460a      	mov	r2, r1
 80026bc:	eb42 0303 	adc.w	r3, r2, r3
 80026c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026dc:	4649      	mov	r1, r9
 80026de:	008b      	lsls	r3, r1, #2
 80026e0:	4641      	mov	r1, r8
 80026e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e6:	4641      	mov	r1, r8
 80026e8:	008a      	lsls	r2, r1, #2
 80026ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026ee:	f7fd fd8f 	bl	8000210 <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <UART_SetConfig+0x4e4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <UART_SetConfig+0x4e4>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	441c      	add	r4, r3
 800271a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271e:	2200      	movs	r2, #0
 8002720:	673b      	str	r3, [r7, #112]	; 0x70
 8002722:	677a      	str	r2, [r7, #116]	; 0x74
 8002724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	1891      	adds	r1, r2, r2
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	415b      	adcs	r3, r3
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002738:	4641      	mov	r1, r8
 800273a:	1851      	adds	r1, r2, r1
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	4649      	mov	r1, r9
 8002740:	414b      	adcs	r3, r1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002750:	4659      	mov	r1, fp
 8002752:	00cb      	lsls	r3, r1, #3
 8002754:	4651      	mov	r1, sl
 8002756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800275a:	4651      	mov	r1, sl
 800275c:	00ca      	lsls	r2, r1, #3
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	4603      	mov	r3, r0
 8002764:	4642      	mov	r2, r8
 8002766:	189b      	adds	r3, r3, r2
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68
 800276a:	464b      	mov	r3, r9
 800276c:	460a      	mov	r2, r1
 800276e:	eb42 0303 	adc.w	r3, r2, r3
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	663b      	str	r3, [r7, #96]	; 0x60
 800277e:	667a      	str	r2, [r7, #100]	; 0x64
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800278c:	4649      	mov	r1, r9
 800278e:	008b      	lsls	r3, r1, #2
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002796:	4641      	mov	r1, r8
 8002798:	008a      	lsls	r2, r1, #2
 800279a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800279e:	f7fd fd37 	bl	8000210 <__aeabi_uldivmod>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <UART_SetConfig+0x4e4>)
 80027a8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	2164      	movs	r1, #100	; 0x64
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	3332      	adds	r3, #50	; 0x32
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <UART_SetConfig+0x4e4>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4422      	add	r2, r4
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027dc:	51eb851f 	.word	0x51eb851f

080027e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f2:	2b84      	cmp	r3, #132	; 0x84
 80027f4:	d005      	beq.n	8002802 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	3303      	adds	r3, #3
 8002800:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002814:	f000 fade 	bl	8002dd4 <vTaskStartScheduler>
  
  return osOK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}

0800281e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800281e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002820:	b089      	sub	sp, #36	; 0x24
 8002822:	af04      	add	r7, sp, #16
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <osThreadCreate+0x54>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685c      	ldr	r4, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691e      	ldr	r6, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ffc8 	bl	80027e0 <makeFreeRtosPriority>
 8002850:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800285a:	9202      	str	r2, [sp, #8]
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	9100      	str	r1, [sp, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4632      	mov	r2, r6
 8002864:	4629      	mov	r1, r5
 8002866:	4620      	mov	r0, r4
 8002868:	f000 f8ed 	bl	8002a46 <xTaskCreateStatic>
 800286c:	4603      	mov	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e01c      	b.n	80028ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685c      	ldr	r4, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800287e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffaa 	bl	80027e0 <makeFreeRtosPriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	9200      	str	r2, [sp, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	4632      	mov	r2, r6
 800289a:	4629      	mov	r1, r5
 800289c:	4620      	mov	r0, r4
 800289e:	f000 f92f 	bl	8002b00 <xTaskCreate>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d001      	beq.n	80028ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <osDelay+0x16>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	e000      	b.n	80028ce <osDelay+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa4c 	bl	8002d6c <vTaskDelay>
  
  return osOK;
 80028d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f103 0208 	add.w	r2, r3, #8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f103 0208 	add.w	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f103 0208 	add.w	r2, r3, #8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d103      	bne.n	80029a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e00c      	b.n	80029ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3308      	adds	r3, #8
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e002      	b.n	80029ae <vListInsert+0x2e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d2f6      	bcs.n	80029a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6852      	ldr	r2, [r2, #4]
 8002a12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d103      	bne.n	8002a26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b08e      	sub	sp, #56	; 0x38
 8002a4a:	af04      	add	r7, sp, #16
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <xTaskCreateStatic+0x46>
	__asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	61fb      	str	r3, [r7, #28]
}
 8002a88:	bf00      	nop
 8002a8a:	e7fe      	b.n	8002a8a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a8c:	2354      	movs	r3, #84	; 0x54
 8002a8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b54      	cmp	r3, #84	; 0x54
 8002a94:	d00a      	beq.n	8002aac <xTaskCreateStatic+0x66>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	61bb      	str	r3, [r7, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002aac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01e      	beq.n	8002af2 <xTaskCreateStatic+0xac>
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01b      	beq.n	8002af2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002acc:	2300      	movs	r3, #0
 8002ace:	9303      	str	r3, [sp, #12]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f850 	bl	8002b8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aec:	f000 f8d4 	bl	8002c98 <prvAddNewTaskToReadyList>
 8002af0:	e001      	b.n	8002af6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002af6:	697b      	ldr	r3, [r7, #20]
	}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fec7 	bl	80038a8 <pvPortMalloc>
 8002b1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b22:	2054      	movs	r0, #84	; 0x54
 8002b24:	f000 fec0 	bl	80038a8 <pvPortMalloc>
 8002b28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
 8002b36:	e005      	b.n	8002b44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b38:	6978      	ldr	r0, [r7, #20]
 8002b3a:	f000 ff81 	bl	8003a40 <vPortFree>
 8002b3e:	e001      	b.n	8002b44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d017      	beq.n	8002b7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	9302      	str	r3, [sp, #8]
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f80e 	bl	8002b8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b6e:	69f8      	ldr	r0, [r7, #28]
 8002b70:	f000 f892 	bl	8002c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e002      	b.n	8002b80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b80:	69bb      	ldr	r3, [r7, #24]
	}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f023 0307 	bic.w	r3, r3, #7
 8002bb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	617b      	str	r3, [r7, #20]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01f      	beq.n	8002c18 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e012      	b.n	8002c04 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	7819      	ldrb	r1, [r3, #0]
 8002be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4413      	add	r3, r2
 8002bec:	3334      	adds	r3, #52	; 0x34
 8002bee:	460a      	mov	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	d9e9      	bls.n	8002bde <prvInitialiseNewTask+0x54>
 8002c0a:	e000      	b.n	8002c0e <prvInitialiseNewTask+0x84>
			{
				break;
 8002c0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c16:	e003      	b.n	8002c20 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d901      	bls.n	8002c2a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c26:	2306      	movs	r3, #6
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe6c 	bl	800291e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	3318      	adds	r3, #24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe67 	bl	800291e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	f1c3 0207 	rsb	r2, r3, #7
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	69b8      	ldr	r0, [r7, #24]
 8002c7a:	f000 fc05 	bl	8003488 <pxPortInitialiseStack>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ca0:	f000 fd20 	bl	80036e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <prvAddNewTaskToReadyList+0xb8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <prvAddNewTaskToReadyList+0xb8>)
 8002cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <prvAddNewTaskToReadyList+0xbc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cb6:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <prvAddNewTaskToReadyList+0xbc>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <prvAddNewTaskToReadyList+0xb8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d110      	bne.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cc4:	f000 fabc 	bl	8003240 <prvInitialiseTaskLists>
 8002cc8:	e00d      	b.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <prvAddNewTaskToReadyList+0xc0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <prvAddNewTaskToReadyList+0xbc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d802      	bhi.n	8002ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <prvAddNewTaskToReadyList+0xbc>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <prvAddNewTaskToReadyList+0xc4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <prvAddNewTaskToReadyList+0xc4>)
 8002cee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <prvAddNewTaskToReadyList+0xc8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <prvAddNewTaskToReadyList+0xc8>)
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <prvAddNewTaskToReadyList+0xcc>)
 8002d10:	441a      	add	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f7ff fe0d 	bl	8002938 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d1e:	f000 fd11 	bl	8003744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <prvAddNewTaskToReadyList+0xc0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00e      	beq.n	8002d48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <prvAddNewTaskToReadyList+0xbc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <prvAddNewTaskToReadyList+0xd0>)
 8002d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000041c 	.word	0x2000041c
 8002d54:	2000031c 	.word	0x2000031c
 8002d58:	20000428 	.word	0x20000428
 8002d5c:	20000438 	.word	0x20000438
 8002d60:	20000424 	.word	0x20000424
 8002d64:	20000320 	.word	0x20000320
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <vTaskDelay+0x60>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <vTaskDelay+0x30>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	60bb      	str	r3, [r7, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d9c:	f000 f87a 	bl	8002e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002da0:	2100      	movs	r1, #0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fb0a 	bl	80033bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002da8:	f000 f882 	bl	8002eb0 <xTaskResumeAll>
 8002dac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <vTaskDelay+0x64>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000444 	.word	0x20000444
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002de2:	463a      	mov	r2, r7
 8002de4:	1d39      	adds	r1, r7, #4
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb8e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	9202      	str	r2, [sp, #8]
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	460a      	mov	r2, r1
 8002e02:	491e      	ldr	r1, [pc, #120]	; (8002e7c <vTaskStartScheduler+0xa8>)
 8002e04:	481e      	ldr	r0, [pc, #120]	; (8002e80 <vTaskStartScheduler+0xac>)
 8002e06:	f7ff fe1e 	bl	8002a46 <xTaskCreateStatic>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <vTaskStartScheduler+0xb0>)
 8002e0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <vTaskStartScheduler+0xb0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e001      	b.n	8002e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d116      	bne.n	8002e56 <vTaskStartScheduler+0x82>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	613b      	str	r3, [r7, #16]
}
 8002e3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <vTaskStartScheduler+0xb4>)
 8002e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <vTaskStartScheduler+0xb8>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <vTaskStartScheduler+0xbc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e50:	f000 fba6 	bl	80035a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e54:	e00e      	b.n	8002e74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d10a      	bne.n	8002e74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	60fb      	str	r3, [r7, #12]
}
 8002e70:	bf00      	nop
 8002e72:	e7fe      	b.n	8002e72 <vTaskStartScheduler+0x9e>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	08003d14 	.word	0x08003d14
 8002e80:	08003211 	.word	0x08003211
 8002e84:	20000440 	.word	0x20000440
 8002e88:	2000043c 	.word	0x2000043c
 8002e8c:	20000428 	.word	0x20000428
 8002e90:	20000420 	.word	0x20000420

08002e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <vTaskSuspendAll+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a03      	ldr	r2, [pc, #12]	; (8002eac <vTaskSuspendAll+0x18>)
 8002ea0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	20000444 	.word	0x20000444

08002eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <xTaskResumeAll+0x114>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <xTaskResumeAll+0x2c>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	603b      	str	r3, [r7, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	e7fe      	b.n	8002eda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002edc:	f000 fc02 	bl	80036e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ee0:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <xTaskResumeAll+0x114>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4a37      	ldr	r2, [pc, #220]	; (8002fc4 <xTaskResumeAll+0x114>)
 8002ee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <xTaskResumeAll+0x114>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d161      	bne.n	8002fb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <xTaskResumeAll+0x118>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d05d      	beq.n	8002fb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002efa:	e02e      	b.n	8002f5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002efc:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <xTaskResumeAll+0x11c>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3318      	adds	r3, #24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fd72 	bl	80029f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fd6d 	bl	80029f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <xTaskResumeAll+0x120>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <xTaskResumeAll+0x120>)
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <xTaskResumeAll+0x124>)
 8002f38:	441a      	add	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7ff fcf9 	bl	8002938 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <xTaskResumeAll+0x128>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d302      	bcc.n	8002f5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <xTaskResumeAll+0x12c>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <xTaskResumeAll+0x11c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cc      	bne.n	8002efc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f68:	f000 fa08 	bl	800337c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <xTaskResumeAll+0x130>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f78:	f000 f836 	bl	8002fe8 <xTaskIncrementTick>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <xTaskResumeAll+0x12c>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f1      	bne.n	8002f78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <xTaskResumeAll+0x130>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <xTaskResumeAll+0x12c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <xTaskResumeAll+0x134>)
 8002fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fb6:	f000 fbc5 	bl	8003744 <vPortExitCritical>

	return xAlreadyYielded;
 8002fba:	68bb      	ldr	r3, [r7, #8]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000444 	.word	0x20000444
 8002fc8:	2000041c 	.word	0x2000041c
 8002fcc:	200003dc 	.word	0x200003dc
 8002fd0:	20000424 	.word	0x20000424
 8002fd4:	20000320 	.word	0x20000320
 8002fd8:	2000031c 	.word	0x2000031c
 8002fdc:	20000430 	.word	0x20000430
 8002fe0:	2000042c 	.word	0x2000042c
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff2:	4b4e      	ldr	r3, [pc, #312]	; (800312c <xTaskIncrementTick+0x144>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 808e 	bne.w	8003118 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <xTaskIncrementTick+0x148>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003004:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <xTaskIncrementTick+0x148>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d120      	bne.n	8003052 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <xTaskIncrementTick+0x14c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <xTaskIncrementTick+0x48>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <xTaskIncrementTick+0x46>
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <xTaskIncrementTick+0x14c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b40      	ldr	r3, [pc, #256]	; (8003138 <xTaskIncrementTick+0x150>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3e      	ldr	r2, [pc, #248]	; (8003134 <xTaskIncrementTick+0x14c>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <xTaskIncrementTick+0x150>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b3d      	ldr	r3, [pc, #244]	; (800313c <xTaskIncrementTick+0x154>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	4a3c      	ldr	r2, [pc, #240]	; (800313c <xTaskIncrementTick+0x154>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	f000 f995 	bl	800337c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <xTaskIncrementTick+0x158>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d348      	bcc.n	80030ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <xTaskIncrementTick+0x14c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <xTaskIncrementTick+0x158>)
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	601a      	str	r2, [r3, #0]
					break;
 800306e:	e03e      	b.n	80030ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <xTaskIncrementTick+0x14c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d203      	bcs.n	8003090 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003088:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <xTaskIncrementTick+0x158>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800308e:	e02e      	b.n	80030ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3304      	adds	r3, #4
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fcac 	bl	80029f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3318      	adds	r3, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fca3 	bl	80029f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <xTaskIncrementTick+0x15c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <xTaskIncrementTick+0x15c>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <xTaskIncrementTick+0x160>)
 80030cc:	441a      	add	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff fc2f 	bl	8002938 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <xTaskIncrementTick+0x164>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3b9      	bcc.n	800305c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ec:	e7b6      	b.n	800305c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <xTaskIncrementTick+0x164>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4914      	ldr	r1, [pc, #80]	; (8003148 <xTaskIncrementTick+0x160>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d901      	bls.n	800310a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003106:	2301      	movs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <xTaskIncrementTick+0x168>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e004      	b.n	8003122 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <xTaskIncrementTick+0x16c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <xTaskIncrementTick+0x16c>)
 8003120:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003122:	697b      	ldr	r3, [r7, #20]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000444 	.word	0x20000444
 8003130:	20000420 	.word	0x20000420
 8003134:	200003d4 	.word	0x200003d4
 8003138:	200003d8 	.word	0x200003d8
 800313c:	20000434 	.word	0x20000434
 8003140:	2000043c 	.word	0x2000043c
 8003144:	20000424 	.word	0x20000424
 8003148:	20000320 	.word	0x20000320
 800314c:	2000031c 	.word	0x2000031c
 8003150:	20000430 	.word	0x20000430
 8003154:	2000042c 	.word	0x2000042c

08003158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <vTaskSwitchContext+0xa4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003166:	4b26      	ldr	r3, [pc, #152]	; (8003200 <vTaskSwitchContext+0xa8>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800316c:	e03f      	b.n	80031ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <vTaskSwitchContext+0xa8>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003174:	4b23      	ldr	r3, [pc, #140]	; (8003204 <vTaskSwitchContext+0xac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f1c3 031f 	rsb	r3, r3, #31
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	491f      	ldr	r1, [pc, #124]	; (8003208 <vTaskSwitchContext+0xb0>)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	607b      	str	r3, [r7, #4]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <vTaskSwitchContext+0x5a>
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <vTaskSwitchContext+0xb0>)
 80031c0:	4413      	add	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3308      	adds	r3, #8
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d104      	bne.n	80031e4 <vTaskSwitchContext+0x8c>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <vTaskSwitchContext+0xb4>)
 80031ec:	6013      	str	r3, [r2, #0]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000444 	.word	0x20000444
 8003200:	20000430 	.word	0x20000430
 8003204:	20000424 	.word	0x20000424
 8003208:	20000320 	.word	0x20000320
 800320c:	2000031c 	.word	0x2000031c

08003210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003218:	f000 f852 	bl	80032c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <prvIdleTask+0x28>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d9f9      	bls.n	8003218 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <prvIdleTask+0x2c>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003234:	e7f0      	b.n	8003218 <prvIdleTask+0x8>
 8003236:	bf00      	nop
 8003238:	20000320 	.word	0x20000320
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	e00c      	b.n	8003266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <prvInitialiseTaskLists+0x60>)
 8003258:	4413      	add	r3, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fb3f 	bl	80028de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3301      	adds	r3, #1
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b06      	cmp	r3, #6
 800326a:	d9ef      	bls.n	800324c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800326c:	480d      	ldr	r0, [pc, #52]	; (80032a4 <prvInitialiseTaskLists+0x64>)
 800326e:	f7ff fb36 	bl	80028de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <prvInitialiseTaskLists+0x68>)
 8003274:	f7ff fb33 	bl	80028de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003278:	480c      	ldr	r0, [pc, #48]	; (80032ac <prvInitialiseTaskLists+0x6c>)
 800327a:	f7ff fb30 	bl	80028de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800327e:	480c      	ldr	r0, [pc, #48]	; (80032b0 <prvInitialiseTaskLists+0x70>)
 8003280:	f7ff fb2d 	bl	80028de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003284:	480b      	ldr	r0, [pc, #44]	; (80032b4 <prvInitialiseTaskLists+0x74>)
 8003286:	f7ff fb2a 	bl	80028de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <prvInitialiseTaskLists+0x78>)
 800328c:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <prvInitialiseTaskLists+0x64>)
 800328e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <prvInitialiseTaskLists+0x7c>)
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <prvInitialiseTaskLists+0x68>)
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000320 	.word	0x20000320
 80032a4:	200003ac 	.word	0x200003ac
 80032a8:	200003c0 	.word	0x200003c0
 80032ac:	200003dc 	.word	0x200003dc
 80032b0:	200003f0 	.word	0x200003f0
 80032b4:	20000408 	.word	0x20000408
 80032b8:	200003d4 	.word	0x200003d4
 80032bc:	200003d8 	.word	0x200003d8

080032c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032c6:	e019      	b.n	80032fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032c8:	f000 fa0c 	bl	80036e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <prvCheckTasksWaitingTermination+0x50>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fb8a 	bl	80029f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <prvCheckTasksWaitingTermination+0x54>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <prvCheckTasksWaitingTermination+0x54>)
 80032e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <prvCheckTasksWaitingTermination+0x58>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <prvCheckTasksWaitingTermination+0x58>)
 80032f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032f2:	f000 fa27 	bl	8003744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f810 	bl	800331c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <prvCheckTasksWaitingTermination+0x58>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e1      	bne.n	80032c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200003f0 	.word	0x200003f0
 8003314:	2000041c 	.word	0x2000041c
 8003318:	20000404 	.word	0x20000404

0800331c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800332a:	2b00      	cmp	r3, #0
 800332c:	d108      	bne.n	8003340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fb84 	bl	8003a40 <vPortFree>
				vPortFree( pxTCB );
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb81 	bl	8003a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800333e:	e018      	b.n	8003372 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003346:	2b01      	cmp	r3, #1
 8003348:	d103      	bne.n	8003352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb78 	bl	8003a40 <vPortFree>
	}
 8003350:	e00f      	b.n	8003372 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003358:	2b02      	cmp	r3, #2
 800335a:	d00a      	beq.n	8003372 <prvDeleteTCB+0x56>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	60fb      	str	r3, [r7, #12]
}
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <prvDeleteTCB+0x54>
	}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <prvResetNextTaskUnblockTime+0x38>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <prvResetNextTaskUnblockTime+0x3c>)
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003394:	e008      	b.n	80033a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <prvResetNextTaskUnblockTime+0x38>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <prvResetNextTaskUnblockTime+0x3c>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	200003d4 	.word	0x200003d4
 80033b8:	2000043c 	.word	0x2000043c

080033bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <prvAddCurrentTaskToDelayedList+0xb0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fb0d 	bl	80029f2 <uxListRemove>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2201      	movs	r2, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4013      	ands	r3, r2
 80033f2:	4a20      	ldr	r2, [pc, #128]	; (8003474 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d10a      	bne.n	8003414 <prvAddCurrentTaskToDelayedList+0x58>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	481a      	ldr	r0, [pc, #104]	; (8003478 <prvAddCurrentTaskToDelayedList+0xbc>)
 800340e:	f7ff fa93 	bl	8002938 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003412:	e026      	b.n	8003462 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d209      	bcs.n	8003440 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800342c:	4b13      	ldr	r3, [pc, #76]	; (800347c <prvAddCurrentTaskToDelayedList+0xc0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f7ff faa1 	bl	8002980 <vListInsert>
}
 800343e:	e010      	b.n	8003462 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7ff fa97 	bl	8002980 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d202      	bcs.n	8003462 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800345c:	4a09      	ldr	r2, [pc, #36]	; (8003484 <prvAddCurrentTaskToDelayedList+0xc8>)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000420 	.word	0x20000420
 8003470:	2000031c 	.word	0x2000031c
 8003474:	20000424 	.word	0x20000424
 8003478:	20000408 	.word	0x20000408
 800347c:	200003d8 	.word	0x200003d8
 8003480:	200003d4 	.word	0x200003d4
 8003484:	2000043c 	.word	0x2000043c

08003488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3b04      	subs	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b04      	subs	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b04      	subs	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034b8:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <pxPortInitialiseStack+0x64>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b14      	subs	r3, #20
 80034c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b04      	subs	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f06f 0202 	mvn.w	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b20      	subs	r3, #32
 80034dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	080034f1 	.word	0x080034f1

080034f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <prvTaskExitError+0x54>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d00a      	beq.n	800351a <prvTaskExitError+0x2a>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	60fb      	str	r3, [r7, #12]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <prvTaskExitError+0x28>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60bb      	str	r3, [r7, #8]
}
 800352c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800352e:	bf00      	nop
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0fc      	beq.n	8003530 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	2000000c 	.word	0x2000000c
	...

08003550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <pxCurrentTCBConst2>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355a:	f380 8809 	msr	PSP, r0
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f380 8811 	msr	BASEPRI, r0
 800356a:	4770      	bx	lr
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst2>:
 8003570:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <prvPortStartFirstTask+0x24>)
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	f380 8808 	msr	MSP, r0
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8814 	msr	CONTROL, r0
 800358a:	b662      	cpsie	i
 800358c:	b661      	cpsie	f
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	df00      	svc	0
 8003598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800359a:	bf00      	nop
 800359c:	e000ed08 	.word	0xe000ed08

080035a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <xPortStartScheduler+0x120>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <xPortStartScheduler+0x124>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10a      	bne.n	80035c6 <xPortStartScheduler+0x26>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	613b      	str	r3, [r7, #16]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <xPortStartScheduler+0x120>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <xPortStartScheduler+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10a      	bne.n	80035e6 <xPortStartScheduler+0x46>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60fb      	str	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <xPortStartScheduler+0x12c>)
 80035e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <xPortStartScheduler+0x130>)
 800360c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <xPortStartScheduler+0x134>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003614:	e009      	b.n	800362a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003616:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <xPortStartScheduler+0x134>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <xPortStartScheduler+0x134>)
 800361e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d0ef      	beq.n	8003616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <xPortStartScheduler+0x134>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1c3 0307 	rsb	r3, r3, #7
 800363e:	2b04      	cmp	r3, #4
 8003640:	d00a      	beq.n	8003658 <xPortStartScheduler+0xb8>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60bb      	str	r3, [r7, #8]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <xPortStartScheduler+0x134>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <xPortStartScheduler+0x134>)
 8003660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <xPortStartScheduler+0x134>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <xPortStartScheduler+0x134>)
 800366c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <xPortStartScheduler+0x138>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <xPortStartScheduler+0x138>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <xPortStartScheduler+0x138>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <xPortStartScheduler+0x138>)
 8003688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800368c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800368e:	f000 f8dd 	bl	800384c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <xPortStartScheduler+0x13c>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003698:	f000 f8fc 	bl	8003894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <xPortStartScheduler+0x140>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <xPortStartScheduler+0x140>)
 80036a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036a8:	f7ff ff66 	bl	8003578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036ac:	f7ff fd54 	bl	8003158 <vTaskSwitchContext>
	prvTaskExitError();
 80036b0:	f7ff ff1e 	bl	80034f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00
 80036c4:	410fc271 	.word	0x410fc271
 80036c8:	410fc270 	.word	0x410fc270
 80036cc:	e000e400 	.word	0xe000e400
 80036d0:	20000448 	.word	0x20000448
 80036d4:	2000044c 	.word	0x2000044c
 80036d8:	e000ed20 	.word	0xe000ed20
 80036dc:	2000000c 	.word	0x2000000c
 80036e0:	e000ef34 	.word	0xe000ef34

080036e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	607b      	str	r3, [r7, #4]
}
 80036fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <vPortEnterCritical+0x58>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <vPortEnterCritical+0x58>)
 8003706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <vPortEnterCritical+0x58>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10f      	bne.n	8003730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <vPortEnterCritical+0x5c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <vPortEnterCritical+0x4c>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	603b      	str	r3, [r7, #0]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vPortEnterCritical+0x4a>
	}
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	2000000c 	.word	0x2000000c
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <vPortExitCritical+0x50>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <vPortExitCritical+0x24>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
}
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <vPortExitCritical+0x50>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3b01      	subs	r3, #1
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <vPortExitCritical+0x50>)
 8003770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <vPortExitCritical+0x50>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <vPortExitCritical+0x42>
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c
	...

080037a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037a0:	f3ef 8009 	mrs	r0, PSP
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <pxCurrentTCBConst>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f01e 0f10 	tst.w	lr, #16
 80037b0:	bf08      	it	eq
 80037b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ba:	6010      	str	r0, [r2, #0]
 80037bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037c4:	f380 8811 	msr	BASEPRI, r0
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f7ff fcc2 	bl	8003158 <vTaskSwitchContext>
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f380 8811 	msr	BASEPRI, r0
 80037dc:	bc09      	pop	{r0, r3}
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	6808      	ldr	r0, [r1, #0]
 80037e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e6:	f01e 0f10 	tst.w	lr, #16
 80037ea:	bf08      	it	eq
 80037ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037f0:	f380 8809 	msr	PSP, r0
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst>:
 8003800:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	607b      	str	r3, [r7, #4]
}
 8003820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003822:	f7ff fbe1 	bl	8002fe8 <xTaskIncrementTick>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <SysTick_Handler+0x40>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f383 8811 	msr	BASEPRI, r3
}
 800383e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <vPortSetupTimerInterrupt+0x34>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <vPortSetupTimerInterrupt+0x38>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortSetupTimerInterrupt+0x3c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <vPortSetupTimerInterrupt+0x40>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <vPortSetupTimerInterrupt+0x44>)
 800386a:	3b01      	subs	r3, #1
 800386c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <vPortSetupTimerInterrupt+0x34>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e010 	.word	0xe000e010
 8003884:	e000e018 	.word	0xe000e018
 8003888:	20000000 	.word	0x20000000
 800388c:	10624dd3 	.word	0x10624dd3
 8003890:	e000e014 	.word	0xe000e014

08003894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038a4 <vPortEnableVFP+0x10>
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800389e:	6001      	str	r1, [r0, #0]
 80038a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038a2:	bf00      	nop
 80038a4:	e000ed88 	.word	0xe000ed88

080038a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038b4:	f7ff faee 	bl	8002e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038b8:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <pvPortMalloc+0x180>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038c0:	f000 f920 	bl	8003b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <pvPortMalloc+0x184>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8093 	bne.w	80039f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01d      	beq.n	8003914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80038d8:	2208      	movs	r2, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d014      	beq.n	8003914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f023 0307 	bic.w	r3, r3, #7
 80038f0:	3308      	adds	r3, #8
 80038f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <pvPortMalloc+0x6c>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	617b      	str	r3, [r7, #20]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06e      	beq.n	80039f8 <pvPortMalloc+0x150>
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <pvPortMalloc+0x188>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d869      	bhi.n	80039f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003924:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <pvPortMalloc+0x18c>)
 8003926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003928:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <pvPortMalloc+0x18c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800392e:	e004      	b.n	800393a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <pvPortMalloc+0xa4>
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f1      	bne.n	8003930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <pvPortMalloc+0x180>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	429a      	cmp	r2, r3
 8003954:	d050      	beq.n	80039f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2208      	movs	r2, #8
 800395c:	4413      	add	r3, r2
 800395e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	2308      	movs	r3, #8
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	429a      	cmp	r2, r3
 8003976:	d91f      	bls.n	80039b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <pvPortMalloc+0xf8>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	613b      	str	r3, [r7, #16]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1ad2      	subs	r2, r2, r3
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039b2:	69b8      	ldr	r0, [r7, #24]
 80039b4:	f000 f908 	bl	8003bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <pvPortMalloc+0x188>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <pvPortMalloc+0x188>)
 80039c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <pvPortMalloc+0x188>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <pvPortMalloc+0x190>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d203      	bcs.n	80039da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <pvPortMalloc+0x188>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <pvPortMalloc+0x190>)
 80039d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <pvPortMalloc+0x184>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <pvPortMalloc+0x194>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <pvPortMalloc+0x194>)
 80039f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039f8:	f7ff fa5a 	bl	8002eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <pvPortMalloc+0x174>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60fb      	str	r3, [r7, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <pvPortMalloc+0x172>
	return pvReturn;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20004058 	.word	0x20004058
 8003a2c:	2000406c 	.word	0x2000406c
 8003a30:	2000405c 	.word	0x2000405c
 8003a34:	20004050 	.word	0x20004050
 8003a38:	20004060 	.word	0x20004060
 8003a3c:	20004064 	.word	0x20004064

08003a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d04d      	beq.n	8003aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a52:	2308      	movs	r3, #8
 8003a54:	425b      	negs	r3, r3
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <vPortFree+0xb8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <vPortFree+0x44>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60fb      	str	r3, [r7, #12]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <vPortFree+0x62>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60bb      	str	r3, [r7, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <vPortFree+0xb8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01e      	beq.n	8003aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11a      	bne.n	8003aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <vPortFree+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ac8:	f7ff f9e4 	bl	8002e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <vPortFree+0xbc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <vPortFree+0xbc>)
 8003ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ada:	6938      	ldr	r0, [r7, #16]
 8003adc:	f000 f874 	bl	8003bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <vPortFree+0xc0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <vPortFree+0xc0>)
 8003ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003aea:	f7ff f9e1 	bl	8002eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000406c 	.word	0x2000406c
 8003afc:	2000405c 	.word	0x2000405c
 8003b00:	20004068 	.word	0x20004068

08003b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <prvHeapInit+0xac>)
 8003b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3307      	adds	r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <prvHeapInit+0xac>)
 8003b34:	4413      	add	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <prvHeapInit+0xb0>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <prvHeapInit+0xb0>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b50:	2208      	movs	r2, #8
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <prvHeapInit+0xb4>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <prvHeapInit+0xb8>)
 8003b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <prvHeapInit+0xbc>)
 8003b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <prvHeapInit+0xc0>)
 8003b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	20000450 	.word	0x20000450
 8003bb4:	20004050 	.word	0x20004050
 8003bb8:	20004058 	.word	0x20004058
 8003bbc:	20004060 	.word	0x20004060
 8003bc0:	2000405c 	.word	0x2000405c
 8003bc4:	2000406c 	.word	0x2000406c

08003bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bd0:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <prvInsertBlockIntoFreeList+0xac>)
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e002      	b.n	8003bdc <prvInsertBlockIntoFreeList+0x14>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d8f7      	bhi.n	8003bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d108      	bne.n	8003c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	441a      	add	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d118      	bne.n	8003c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <prvInsertBlockIntoFreeList+0xb0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d00d      	beq.n	8003c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e008      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <prvInsertBlockIntoFreeList+0xb0>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d002      	beq.n	8003c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20004050 	.word	0x20004050
 8003c78:	20004058 	.word	0x20004058

08003c7c <memset>:
 8003c7c:	4402      	add	r2, r0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4d0d      	ldr	r5, [pc, #52]	; (8003cc4 <__libc_init_array+0x38>)
 8003c90:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	2600      	movs	r6, #0
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ccc <__libc_init_array+0x40>)
 8003c9e:	4c0c      	ldr	r4, [pc, #48]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca0:	f000 f818 	bl	8003cd4 <_init>
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	2600      	movs	r6, #0
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08003d3c 	.word	0x08003d3c
 8003cc8:	08003d3c 	.word	0x08003d3c
 8003ccc:	08003d3c 	.word	0x08003d3c
 8003cd0:	08003d40 	.word	0x08003d40

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
